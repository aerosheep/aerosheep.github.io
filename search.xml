<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java笔记</title>
      <link href="/2022/02/16/Java%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/16/Java%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="01、JDK的安装目录"><a href="#01、JDK的安装目录" class="headerlink" title="01、JDK的安装目录"></a>01、JDK的安装目录</h2><table><thead><tr><th align="center">目录名称</th><th align="left">说明</th></tr></thead><tbody><tr><td align="center">bin</td><td align="left">该路径下存放了JDK的各种工具命令。javac和java就放在这个目录。</td></tr><tr><td align="center">conf</td><td align="left">该路径下存放了JDK的相关配置文件。</td></tr><tr><td align="center">include</td><td align="left">该路径下存放了一些平台特定的头文件。</td></tr><tr><td align="center">jmods</td><td align="left">该路径下存放了JDK的各种模块。</td></tr><tr><td align="center">legal</td><td align="left">该路径下存放了JDK各模块的授权文档。</td></tr><tr><td align="center">lib</td><td align="left">该路径下存放了JDK工具的一些补充JAR包。</td></tr></tbody></table><h2 id="02、HelloWorld代码"><a href="#02、HelloWorld代码" class="headerlink" title="02、HelloWorld代码"></a>02、HelloWorld代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/662E827A-FA32-4464-B0BD-40087F429E98.jpg" alt="img"></p><h2 id="03、常用DOS命令"><a href="#03、常用DOS命令" class="headerlink" title="03、常用DOS命令"></a>03、常用DOS命令</h2><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td>盘符名称+：</td><td>盘符切换。</td></tr><tr><td>dir</td><td>查看当前路径下的内容。</td></tr><tr><td>cd 目录</td><td>进入单级目录。</td></tr><tr><td>cd ..</td><td>回退到上一级目录。</td></tr><tr><td>cd 目录1\目录2\</td><td>进入多级目录。</td></tr><tr><td>cd \</td><td>回退到盘符目录。</td></tr><tr><td>cls</td><td>清屏。</td></tr><tr><td>exit</td><td>退出命令提示符窗口。</td></tr></tbody></table><h2 id="04、注释"><a href="#04、注释" class="headerlink" title="04、注释"></a>04、注释</h2><h3 id="单行注释："><a href="#单行注释：" class="headerlink" title="单行注释： //"></a>单行注释： //</h3><h3 id="多行注释：-xxxx"><a href="#多行注释：-xxxx" class="headerlink" title="多行注释： /*  xxxx  */"></a>多行注释： /*  xxxx  */</h3><h2 id="05、常量分类"><a href="#05、常量分类" class="headerlink" title="05、常量分类"></a>05、常量分类</h2><table><thead><tr><th align="center">常量类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td align="center">字符串常量</td><td>用双引号括起来的内容</td><td>“HelloWorld”</td></tr><tr><td align="center">整数常量</td><td>不带小数的数字</td><td>666</td></tr><tr><td align="center">小数常量</td><td>带小数的数字</td><td>123.456</td></tr><tr><td align="center">字符常量</td><td>用单引号括起来的内容</td><td>‘A’</td></tr><tr><td align="center">布尔常量</td><td>布尔值，表示真假</td><td>true  false</td></tr><tr><td align="center">空常量</td><td>一个特殊的值，空值(不能直接输出)</td><td>null</td></tr></tbody></table><h2 id="06、数据类型"><a href="#06、数据类型" class="headerlink" title="06、数据类型"></a>06、数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><ul><li>整数(byte,short,int,long)</li><li>浮点数(float,double)</li><li>字符(char)</li></ul><h4 id="非数值型"><a href="#非数值型" class="headerlink" title="非数值型"></a>非数值型</h4><ul><li>布尔(boolean)</li></ul><h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ul><li>类(class)</li><li>接口(interface)</li><li>数组([])</li></ul><h3 id="变量定义格式：数据类型-变量名-变量值"><a href="#变量定义格式：数据类型-变量名-变量值" class="headerlink" title="变量定义格式：数据类型 变量名 = 变量值"></a>变量定义格式：数据类型 变量名 = 变量值</h3><h3 id="变量使用的注意事项"><a href="#变量使用的注意事项" class="headerlink" title="变量使用的注意事项"></a>变量使用的注意事项</h3><blockquote><p>名字不能重复</p><p>变量未赋值，不能使用</p><p>long类型的变量定义的时候，为了防止整数过大，后面要加L</p><p>float类型的变量定义的时候，为了防止类型不兼容，后面要加F</p></blockquote><h2 id="07、常见命名约定"><a href="#07、常见命名约定" class="headerlink" title="07、常见命名约定"></a>07、常见命名约定</h2><h3 id="小驼峰命名法：作用于方法、变量"><a href="#小驼峰命名法：作用于方法、变量" class="headerlink" title="小驼峰命名法：作用于方法、变量"></a>小驼峰命名法：作用于方法、变量</h3><ul><li>约定1：标识符是一个单词的时候，首字母小写</li><li>范例1：name</li><li>约定2：标识符由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写</li><li>范例2：firstName</li></ul><h3 id="大驼峰命名法：作用于类"><a href="#大驼峰命名法：作用于类" class="headerlink" title="大驼峰命名法：作用于类"></a>大驼峰命名法：作用于类</h3><ul><li>约定1：标识符是一个单词的时候，首字母大写</li><li>范例1：Student</li><li>约定2：标识符由多个单词组成的时候，每个单词的首字母大写</li><li>范例2：GoodStudent</li></ul><h2 id="08、运算符"><a href="#08、运算符" class="headerlink" title="08、运算符"></a>08、运算符</h2><h3 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符"></a>算数运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>+</td><td>加</td><td>加</td></tr><tr><td>-</td><td>减</td><td>减</td></tr><tr><td>*</td><td>乘</td><td>乘</td></tr><tr><td>/</td><td>除</td><td>除</td></tr><tr><td>%</td><td>取余</td><td>获取的是两个数据做除法的余数</td></tr></tbody></table><p>除法得到的是商，取余得到的是余数</p><p>整数相除只能得到整数，要想得到小数，必须有浮点数参与</p><h3 id="字符的’-’操作"><a href="#字符的’-’操作" class="headerlink" title="字符的’+’操作"></a>字符的’+’操作</h3><table><thead><tr><th align="center">‘A’</th><th align="center">65</th><th align="center">A-Z是连续的</th></tr></thead><tbody><tr><td align="center">‘a’</td><td align="center">97</td><td align="center">a-z是连续的</td></tr><tr><td align="center">‘0’</td><td align="center">48</td><td align="center">0-9是连续的</td></tr></tbody></table><p>算术表达式中包含多个基本数据类型的值的时候，整个算术表达式的类型会自动进行提升。</p><p>提升规则：</p><ul><li>byte类型，short类型和char类型将被提升到int类型</li><li>整个表达式的类型自动提升到表达式中最高等级操作数同样的类型</li><li>等级顺序：byte,short,char-&gt;int-&gt;long-&gt;float-&gt;double</li></ul><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>a=10，将10赋值给变量a</td></tr><tr><td>+=</td><td>加后赋值</td><td>a+=b，将a+b的值给a</td></tr><tr><td>-=</td><td>减后赋值</td><td>a-=b，将a-b的值给a</td></tr><tr><td>*=</td><td>乘后赋值</td><td>a*=b，将a×b的值给a</td></tr><tr><td>/=</td><td>除后赋值</td><td>a/=b，将a÷b的商给a</td></tr><tr><td>%=</td><td>取余后赋值</td><td>a%=b，将a÷b的余数给a</td></tr></tbody></table><h3 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h3><table><thead><tr><th>符号</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>++</td><td>自增</td><td>变量的值加1</td></tr><tr><td>–</td><td>自减</td><td>变量的值减1</td></tr></tbody></table><p>注意事项：</p><ul><li>++和–既可以放在变量的后边，也可以放在变量的前面，例如：i++和++i</li><li>单独使用的时候，++和–无论是放在变量的前边还是后边，结果都是一样的</li><li>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或–</li><li>参与操作的时候，如果放在变量的前边，先拿变量做++或–，后拿变量参与操作</li><li>一般参与操作的时候都是用：++变量名</li></ul><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table><thead><tr><th>符号</th><th>说明</th></tr></thead><tbody><tr><td>==</td><td>a==b，判断a和b的值是否相等，成立为true，不成立为false</td></tr><tr><td>!=</td><td>a!=b，判断a和b的值是否不相等，成立为true，不成立为false</td></tr><tr><td>&gt;</td><td>a&gt;b，判断a是否大于b，成立为true，不成立为false</td></tr><tr><td>&gt;=</td><td>a&gt;=b，判断a是否大于等于b，成立为true，不成立为false</td></tr><tr><td>&lt;</td><td>a&lt;b，判断a是否小于b，成立为true，不成立为false</td></tr><tr><td>&lt;=</td><td>a&lt;=b，判断a是否小于等于b，成立为true，不成立为false</td></tr></tbody></table><h3 id="基本逻辑运算符"><a href="#基本逻辑运算符" class="headerlink" title="基本逻辑运算符"></a>基本逻辑运算符</h3><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th>说明</th></tr></thead><tbody><tr><td align="center">&amp;</td><td align="center">逻辑与</td><td>a&amp;b，a和b都是true，结果为true，否则为false</td></tr><tr><td align="center">|</td><td align="center">逻辑或</td><td>a|b，a和b都是false，结果为false，否则为true</td></tr><tr><td align="center">^</td><td align="center">逻辑异或</td><td>a^b，a和b结果不同为true，相同为false</td></tr><tr><td align="center">!</td><td align="center">逻辑非</td><td>!a，结果和a的结果正好相反</td></tr></tbody></table><h3 id="短路逻辑运算符"><a href="#短路逻辑运算符" class="headerlink" title="短路逻辑运算符"></a>短路逻辑运算符</h3><table><thead><tr><th align="center">符号</th><th align="center">作用</th><th>说明</th></tr></thead><tbody><tr><td align="center">&amp;&amp;</td><td align="center">短路与</td><td>作用和&amp;相同，但是有短路效果</td></tr><tr><td align="center">||</td><td align="center">短路或</td><td>作用和|相同，但是有短路效果</td></tr></tbody></table><p>注意事项：</p><ul><li><p>逻辑与&amp;，无论左边真假，右边都要执行</p><p>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行</p></li><li><p>逻辑或|，无论左边真假，右边都要执行</p><p>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行</p></li></ul><h3 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h3><ul><li>格式：关系表达式 ? 表达式1 : 表达式2；</li><li>范例：a &gt; b ? a : b;</li></ul><p>计算规则：</p><p>​    首先计算关系表达式的值</p><p>​    如果值为true，表达式1的值就是运算结果</p><p>​    如果值为false，表达式2的值就是运算结果</p><h2 id="09、数据输入"><a href="#09、数据输入" class="headerlink" title="09、数据输入"></a>09、数据输入</h2><h3 id="Scanner使用的基本步骤"><a href="#Scanner使用的基本步骤" class="headerlink" title="Scanner使用的基本步骤"></a>Scanner使用的基本步骤</h3><p>1、导包</p><blockquote><p>import java.util.Scanner;</p><p>导包的动作必须出现在类定义的上边</p></blockquote><p>2、创建对象</p><blockquote><p>Scanner sc = new Scanner(System.in);</p><p>上面这个格式里面，只有sc是变量名，可以变，其他的都不允许变</p></blockquote><p>3、接收数据</p><blockquote><p>int i = sc.nextInt();</p><p>上面这个格式里面，只有i是变量名，可以变，其他的都不允许变</p></blockquote><h2 id="10、数据输出"><a href="#10、数据输出" class="headerlink" title="10、数据输出"></a>10、数据输出</h2><p>System.out.println(“内容”);    输出内容并换行</p><p>System.out.print(“内容”);    输出内容不换行</p><p>System.out.println();    只起到换行作用</p><h2 id="11、分支语句"><a href="#11、分支语句" class="headerlink" title="11、分支语句"></a>11、分支语句</h2><h3 id="流程控制语句分类"><a href="#流程控制语句分类" class="headerlink" title="流程控制语句分类"></a>流程控制语句分类</h3><ul><li>顺序结构</li><li>分支结构(if,switch)</li><li>循环结构(for,while,do…while)</li></ul><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><h4 id="if语句格式1"><a href="#if语句格式1" class="headerlink" title="if语句格式1"></a>if语句格式1</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">语句体；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>① 首先计算关系表达式的值</p><p>② 如果关系表达式的值为true就执行语句体</p><p>③ 如果关系表达式的值为false就不执行语句体</p><p>④ 继续执行后面的语句内容</p><h4 id="if语句格式2"><a href="#if语句格式2" class="headerlink" title="if语句格式2"></a>if语句格式2</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">语句体<span class="number">1</span>；</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">语句体<span class="number">2</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>① 首先计算关系表达式的值</p><p>② 如果关系表达式的值为true就执行语句体1</p><p>③ 如果关系表达式的值为false就执行语句体2</p><p>④ 继续执行后面的语句内容</p><h4 id="if语句格式3"><a href="#if语句格式3" class="headerlink" title="if语句格式3"></a>if语句格式3</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式<span class="number">1</span>)&#123;</span><br><span class="line">语句体<span class="number">1</span>；</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(关系表达式<span class="number">2</span>)&#123;</span><br><span class="line">语句体<span class="number">2</span>；</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">语句体n+<span class="number">1</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><h4 id="switch语句格式"><a href="#switch语句格式" class="headerlink" title="switch语句格式"></a>switch语句格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>:</span><br><span class="line">语句体<span class="number">1</span>；</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line">[<span class="keyword">break</span>;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式说明：</p><ul><li>表达式：取值为byte、short、int、char，JDK5以后可以是枚举，JDK7以后可以是String</li><li>case：后面跟的是要和表达式进行比较的值。</li><li>break：表示中断，结束的意思，用来结束switch语句。</li><li>default：表示所以情况都不匹配的时候，就执行该处的内容，和if语句的else相似。</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211231183600377.png" alt="image-20211231183600377"></p><h4 id="case穿透"><a href="#case穿透" class="headerlink" title="case穿透"></a>case穿透</h4><p>题目：输入一个月份并判断这个月属于哪一个季节</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(month)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">12</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;冬季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;春季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;夏季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">11</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;秋季&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        System.out.println(<span class="string">&quot;你输入的月份有误&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><p>在switch语句中，如果case控制的语句体后面不写break，将出现<strong>穿透</strong>现象，在不判断下一个case值的情况下，向下运行，直到遇到break，或者整体switch语句结束</p><h2 id="12、循环语句"><a href="#12、循环语句" class="headerlink" title="12、循环语句"></a>12、循环语句</h2><h3 id="for循环语句格式"><a href="#for循环语句格式" class="headerlink" title="for循环语句格式"></a>for循环语句格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化语句;条件判断语句;条件控制语句)&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">题目：输出<span class="number">5</span>次<span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">5</span>; i++) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>① 执行初始化语句</p><p>② 执行条件判断语句，看其结果是true还是false</p><p>​    如果是false，循环结束</p><p>​    如果是true，继续执行</p><p>③ 执行循环体语句</p><p>④ 执行条件控制语句</p><p>⑤ 回到 ② 继续</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211231190135248.png" alt="image-20211231190135248"></p><h3 id="while循环语句格式"><a href="#while循环语句格式" class="headerlink" title="while循环语句格式"></a>while循环语句格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">基本格式：</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">完整格式：</span><br><span class="line">初始化语句；</span><br><span class="line"><span class="keyword">while</span>(条件判断语句)&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件循环语句;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">题目：输出<span class="number">5</span>次<span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"><span class="keyword">int</span> i =<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(i&lt;=<span class="number">5</span>) &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>① 执行初始化语句</p><p>② 执行条件判断语句，看其结果是true还是false</p><p>​    如果是false，循环结束</p><p>​    如果是true，继续执行</p><p>③ 执行循环体语句</p><p>④ 执行条件控制语句</p><p>⑤ 回到 ② 继续</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211231193412425.png" alt="image-20211231193412425"></p><h3 id="do…while循环语句格式"><a href="#do…while循环语句格式" class="headerlink" title="do…while循环语句格式"></a>do…while循环语句格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">基本格式：</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br><span class="line"></span><br><span class="line">完整格式：</span><br><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;<span class="keyword">while</span>(条件判断语句);</span><br><span class="line"></span><br><span class="line">题目：输出<span class="number">5</span>次<span class="string">&quot;HelloWorld&quot;</span></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;HelloWorld&quot;</span>);</span><br><span class="line">    i++;</span><br><span class="line">&#125;<span class="keyword">while</span>(i&lt;=<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>执行流程：</p><p>① 执行初始化语句</p><p>② 执行循环体语句</p><p>③ 执行条件控制语句</p><p>④ 执行条件判断语句，看其结果是true还剩false</p><p>​    如果是false，循环结束</p><p>​    如果是true，继续执行</p><p>⑤ 回到 ② 继续</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211231194438350.png" alt="image-20211231194438350"></p><h3 id="三种循环的区别"><a href="#三种循环的区别" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h3><h4 id="三种循环的区别-1"><a href="#三种循环的区别-1" class="headerlink" title="三种循环的区别"></a>三种循环的区别</h4><ul><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体(先判断后执行)</li><li>do…while循环先执行一次循环体，然后判断条件是否成立，是否继续(先执行后判断)</li></ul><h4 id="for和while的区别"><a href="#for和while的区别" class="headerlink" title="for和while的区别"></a>for和while的区别</h4><ul><li>条件控制语句所控制的自增变量，因为归属for循环的语法结构中，在for循环结束后，就不能再次被访问到了</li><li>条件控制语句所控制的自增变量，对于while循环来说不归属其语法结构中，在while循环结束后，该变量还可以继续使用</li></ul><h4 id="死循环格式"><a href="#死循环格式" class="headerlink" title="死循环格式"></a>死循环格式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">while</span>的死循环格式是最常用的</span><br></pre></td></tr></table></figure><h3 id="跳转控制语句"><a href="#跳转控制语句" class="headerlink" title="跳转控制语句"></a>跳转控制语句</h3><p>continue：用在循环中，基于条件控制，跳过某次血循环体内容的执行，继续下一次的执行</p><p>break：用在循环中，基于条件控制，终止循环体内容的执行，也就是说结束当前的整个循环</p><h3 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h3><h4 id="Random的作用和使用步骤"><a href="#Random的作用和使用步骤" class="headerlink" title="Random的作用和使用步骤"></a>Random的作用和使用步骤</h4><p>作用：用于产生一个随机数</p><p>使用步骤：</p><p>① 导包</p><blockquote><p>import java.util.Random;</p><p>导包的动作必须出现在类定义的上面</p></blockquote><p>② 创建对象</p><blockquote><p>Random r = new Random();</p><p>上面这个格式里面，r是变量名，可以变其他的都不允许变</p></blockquote><p>③ 获取随机数</p><blockquote><p>int number = r.nextInt(10);//获取数据的范围：[0,10) 包括0，不包括10</p><p>上面这个格式里面，number是变量名，可以变，数字10可以变。其他的都不允许变</p></blockquote><h2 id="13、IDEA"><a href="#13、IDEA" class="headerlink" title="13、IDEA"></a>13、IDEA</h2><h3 id="HelloWorld步骤"><a href="#HelloWorld步骤" class="headerlink" title="HelloWorld步骤"></a>HelloWorld步骤</h3><ul><li>创建一个空项目(JavaSE_Code)</li><li>创建一个新模块(idea_test)</li><li>在idea_test模块下的src下创建一个包(com.itheima)</li><li>在com.itheima包下新建一个类(HelloWorld)</li><li>在HelloWorld类中编写代码</li><li>在idea中执行程序</li></ul><h3 id="内容辅助键"><a href="#内容辅助键" class="headerlink" title="内容辅助键"></a>内容辅助键</h3><ul><li><p>快速生成语句</p><p>快速生成main()方法：psvm，回车</p><p>快速生成输出语句：sout，回车</p></li><li><p>内容辅助键</p><p>ctrl+alt+space(内容提示，代码补全等)</p></li></ul><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li><p>注释</p><p>单行：选中代码，ctrl+/，再来一次，就是取消</p><p>多行：选中代码，ctrl+shift+/，再来一次，就是取消</p></li><li><p>格式化</p><p>ctrl+alt+L</p></li><li><p>生成类方法</p><p>alt+insert    根据自己需要进行选择</p><p>例如：get/set方法</p></li><li><p>查看方法的源码：选中代码，ctrl+B</p></li><li><p>查看类的所有信息：alt+7</p></li></ul><h2 id="14、数组"><a href="#14、数组" class="headerlink" title="14、数组"></a>14、数组</h2><h3 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h3><ul><li>一次性声明大量的用于存储数据的变量</li><li>要存储的数据通常都是同类型数据，例如：考试成绩</li></ul><h3 id="什么是数组"><a href="#什么是数组" class="headerlink" title="什么是数组"></a>什么是数组</h3><p>数组(array)是一种用于存储<strong>多个相同类型</strong>数据的存储模型</p><h3 id="数组的定义格式"><a href="#数组的定义格式" class="headerlink" title="数组的定义格式"></a>数组的定义格式</h3><ul><li>格式一：数据类型[ ]  变量名</li><li>范例：           int[ ]   arr</li><li>读法：定义了一个int类型的数组，数组名是arr</li><li>格式二：数据类型  变量名</li><li>范例：           int  arr[ ]</li><li>读法：定义了一个int类型的变量，变量名是arr数组</li></ul><h3 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h3><h4 id="数组初始化概述"><a href="#数组初始化概述" class="headerlink" title="数组初始化概述"></a>数组初始化概述</h4><p>Java中的数组必须先初始化，然后才能使用</p><p>所谓初始化：就是为数组中的数组元素分配内存空间，并为每个数组元素赋值</p><h4 id="动态初始化"><a href="#动态初始化" class="headerlink" title="动态初始化"></a>动态初始化</h4><p>动态初始化：初始化时只指定数组长度，由系统为数组分配初始值</p><ul><li><p>格式：数据类型[ ]  变量名 = new 数据类型[数组长度]</p></li><li><p>范例：        int[ ] arr = new int [3];</p><p>左边：</p><p>​        int：说明数组中的元素类型是int类型</p><p>​        [ ] ：说明这是一个数组</p><p>​        arr：这是数组的名称</p><p>右边：</p><p>​        new：为数组申请内存空间</p><p>​        int：说明数组中的元素类型是int类型</p><p>​        [ ] ：说明这是一个数组</p><p>​        3：数组长度，其实就是数组中的元素个数</p></li></ul><h4 id="数组元素访问"><a href="#数组元素访问" class="headerlink" title="数组元素访问"></a>数组元素访问</h4><ul><li>数组变量访问方式</li><li>格式：数组名</li><li>数组内部保存的数据的访问方式</li><li>格式：数组名[索引]</li><li>索引是数组中数据的编号方式</li><li>作用：索引用于访问数组中的数据使用，数组名[索引]等同于变量名，是一种特殊的变量名</li><li>特征①：索引从0开始</li><li>特征②：索引是连续的</li><li>特征③：索引逐一增加，每次加1</li></ul><h4 id="Java中内存分配"><a href="#Java中内存分配" class="headerlink" title="Java中内存分配"></a>Java中内存分配</h4><ul><li><p>栈内存：存储局部变量</p><p>定义在方法中的变量：例如：arr</p><p>使用完毕，立即消失</p></li><li><p>堆内存：存储new出来的内容(实体，对象)</p></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211231225821810.png" alt="image-20211231225821810"></p><h4 id="静态初始化"><a href="#静态初始化" class="headerlink" title="静态初始化"></a>静态初始化</h4><p>静态初始化：初始化时指定每个数组元素的初始值，由系统决定长度</p><ul><li>格式：数据类型[ ] 变量名 = new 数据类型[ ] {数据1，数据2，数据3，…};</li><li>范例：        int[ ]  arr = new  int[ ] {1,2,3};</li><li>简化格式：数据类型[ ] 变量名 = {数据1，数据2，数据3，…};</li><li>范例：     int[ ]  arr = {1,2,3};</li></ul><h4 id="数组常见小问题"><a href="#数组常见小问题" class="headerlink" title="数组常见小问题"></a>数组常见小问题</h4><ul><li><p>索引越界：访问了数组中不存在的索引对应元素，造成索引越界问题</p><p>ArrayIndexOutOfBoundsException</p></li><li><p>空指针异常：访问的数组已经不再指向堆内存的数据，造成空指针异常</p><p>NullPointerException</p></li><li><p>null：空值，引用数据类型的默认值，表示不指向任何有效对象</p></li></ul><h4 id="数组常见操作"><a href="#数组常见操作" class="headerlink" title="数组常见操作"></a>数组常见操作</h4><h5 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;<span class="number">5</span>; x++) &#123;</span><br><span class="line">    System.out.println(arr[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取数组元素个数"><a href="#获取数组元素个数" class="headerlink" title="获取数组元素个数"></a>获取数组元素个数</h4><ul><li>格式：数组名.length</li><li>范例：arr.length</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>; x&lt;arr.length; x++) &#123;</span><br><span class="line">    System.out.println(arr[x]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15、方法"><a href="#15、方法" class="headerlink" title="15、方法"></a>15、方法</h2><h3 id="方法概述"><a href="#方法概述" class="headerlink" title="方法概述"></a>方法概述</h3><p>什么是方法：</p><ul><li>方法(method)是将具有独立功能的代码块组成一个整体，使其具有特殊功能的代码集</li></ul><p>注意：</p><ul><li>方法必须先创建才可以使用，该过程才称为方法定义</li><li>方法创建后并不是直接运行的，需要手动使用后才能执行，该过程称为方法调用</li></ul><h3 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h3><h4 id="两个明确"><a href="#两个明确" class="headerlink" title="两个明确"></a>两个明确</h4><p>① 返回值类型</p><p>② 参数</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名() &#123;</span><br><span class="line"><span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inEvenNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方法调用"><a href="#方法调用" class="headerlink" title="方法调用"></a>方法调用</h3><p>格式：方法名( );</p><p>范例：isEvenNumber( );</p><h3 id="带参数方法定义"><a href="#带参数方法定义" class="headerlink" title="带参数方法定义"></a>带参数方法定义</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(参数) &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单个参数格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(数据类型 变量名) &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isEvenNumber</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多个参数格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> 方法名(数据类型 变量<span class="number">1</span>,数据类型 变量<span class="number">2</span>,......)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span> number1, <span class="keyword">int</span> number2)</span></span>&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意事项：</p><ul><li>方法定义时，参数中的<strong>数据类型</strong>和<strong>变量名</strong>都不能缺少，缺少任意一个程序都报错</li><li>方法定义时，多个参数之间使用逗号( , )分隔</li></ul><h3 id="带参数方法调用"><a href="#带参数方法调用" class="headerlink" title="带参数方法调用"></a>带参数方法调用</h3><p>格式：方法名(参数);</p><p>单个参数格式：方法名(变量名/常量值);</p><p>单个参数范例：isEvenNumber(5);</p><p>多个参数格式：方法名(变量名1/常量值1, 变量名2/常量值2);</p><p>多个参数范例：getMax(5, 6);</p><p>注意事项：</p><ul><li>方法调用时，参数的数量与类型必须与方法定义中的设置相匹配，否则程序报错</li></ul><h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><p>形参：方法定义中的参数（等同于遍历定义格式）</p><p>实参：方法调用中的参数（等同于使用变量或常量）</p><h3 id="带返回值方法定义"><a href="#带返回值方法定义" class="headerlink" title="带返回值方法定义"></a>带返回值方法定义</h3><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 数据类型 方法名(参数)&#123;</span><br><span class="line">    <span class="keyword">return</span> 数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="带返回值方法调用"><a href="#带返回值方法调用" class="headerlink" title="带返回值方法调用"></a>带返回值方法调用</h3><p>格式1：方法名(参数);</p><p>范例：isEvenNumber( 5 );</p><p>格式2：数据类型 变量名 = 方法名( 参数 );</p><p>范例：boolean flag = isEvenNumber( 5 );</p><p>（一般都是用格式2比较多)</p><p>注意：</p><ul><li>方法的返回值通常会使用变量接收，否则该返回值将无意义</li></ul><h3 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h3><ul><li>方法不能嵌套定义</li><li>void表示无返回值，可以省略return，也可以单独的书写return，后面不加数据</li></ul><h3 id="方法的通用格式"><a href="#方法的通用格式" class="headerlink" title="方法的通用格式"></a>方法的通用格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> 返回值类型 方法名(参数)&#123;</span><br><span class="line">    方法体;</span><br><span class="line">    <span class="keyword">return</span> 数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>public static（修饰符，目前先记住这个格式）</p></li><li><p>返回值类型（方法操作完毕之后返回的数据的数据类型）</p><p>如果方法操作完毕，没有数据返回，这里就写void，而且方法体中一般不写return</p></li><li><p>方法名（调用方法时候使用的标识）</p></li><li><p>参数（由数据类型和变量名组成，多个参数之间用 “ , “ 隔开）</p></li><li><p>方法体（完成功能的代码块）</p></li><li><p>return（如果方法操作完毕，有数据返回，用于把数据返回给调用者）</p></li><li><p>定义方法时，要做到两个明确</p><p>明确返回值类型：主要是明确方法操作完毕之后是否有数据返回，如果没有就写void，如果有就写对应的数据类型</p></li><li><p>调用方法时</p><p>void类型的方法，直接调用即可</p><p>非void类型的方法，推荐用变量接收调用</p></li></ul><h3 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h3><h4 id="方法重载概述"><a href="#方法重载概述" class="headerlink" title="方法重载概述"></a>方法重载概述</h4><p>方法重载指同一个类中定义的多个方法之间的关系，满足下列下列条件的多个方法相互构成重载</p><ul><li>多个方法在同一个类中</li><li>多个方法具有相通的方法名</li><li>多个方法的参数不相同，类型不同或者数量不同</li></ul><h3 id="方法参数传递-基本类型"><a href="#方法参数传递-基本类型" class="headerlink" title="方法参数传递(基本类型)"></a>方法参数传递(基本类型)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">100</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + number);</span><br><span class="line">        change(number);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        number = <span class="number">200</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于基本数据类型的参数，形式参数的改变，不影响实际参数的值</p><p>调用change方法前：100</p><p>调用change方法后：100</p><h3 id="方法参数传递-引用类型"><a href="#方法参数传递-引用类型" class="headerlink" title="方法参数传递(引用类型)"></a>方法参数传递(引用类型)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArgsDemo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法前：&quot;</span> + arr[<span class="number">1</span>]);</span><br><span class="line">        change(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;调用change方法后：&quot;</span> + arr[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> sstatic <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220102232125183.png" alt="image-20220102232125183"></p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><h4 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h4><p>需求：设计一个方法用于数组遍历，要求遍历的结果是在一行上的。例如：[11,22,33,44,55]</p><p>思路：</p><p>① 定义一个数组，用静态初始化完成数组元素初始化</p><p>② 定义一个方法，用数组遍历通用格式对数组进行遍历</p><p>③ 用新的输出语句修改遍历操作</p><p>④ 调用遍历方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == arr.length-<span class="number">1</span>)&#123;</span><br><span class="line">                System.out.print(arr[x]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[x]+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="数组最大值"><a href="#数组最大值" class="headerlink" title="数组最大值"></a>数组最大值</h4><p>需求：设计一个方法用于获取数组中元素的最大值，调用方法并输出结果</p><p>思路：</p><p>① 定义一个数组，用静态初始化完成数组元素初始化</p><p>② 定义一个方法，用于获取数组中的最大值</p><p>③ 调用获取最大值方法，用变量接收返回结果</p><p>④ 把结果输出到控制台</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MethodArrayMax</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span>, <span class="number">1020</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> arrmax = getMax(arr);</span><br><span class="line">        System.out.println(arrmax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; arr[x]) &#123;</span><br><span class="line">                max = arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h3><h4 id="Debug概述"><a href="#Debug概述" class="headerlink" title="Debug概述"></a>Debug概述</h4><p>debug：是供程序员使用的程序调试工具，它可以用于查看程序的执行流程，也可以用于追踪程序执行过程来调试程序</p><h4 id="Debug操作流程"><a href="#Debug操作流程" class="headerlink" title="Debug操作流程"></a>Debug操作流程</h4><p>Debug调试，又被称为断点调试，断点其实是一个标记，告诉我们从哪里开始查看</p><p>① 如何加断点</p><p>② 如何运行加了断点的程序</p><p>③ 看哪里</p><p>④ 点哪里</p><p>⑤ 如何删除断点</p><h4 id="①-如何加断点"><a href="#①-如何加断点" class="headerlink" title="① 如何加断点"></a>① 如何加断点</h4><p>选择要设置断点的代码行，在行号的区域后面单击鼠标左键即可</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103013644123.png" alt="image-20220103013644123"></p><h4 id="②-如何运行加了断点的程序"><a href="#②-如何运行加了断点的程序" class="headerlink" title="② 如何运行加了断点的程序"></a>② 如何运行加了断点的程序</h4><p>在代码区域右键Debug执行</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103013730433.png" alt="image-20220103013730433"></p><h4 id="③-看哪里"><a href="#③-看哪里" class="headerlink" title="③ 看哪里"></a>③ 看哪里</h4><p>看Debugger窗口</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103013823097.png" alt="image-20220103013823097"></p><p>看console窗口</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103013948448.png" alt="image-20220103013948448"></p><h4 id="④-点哪里"><a href="#④-点哪里" class="headerlink" title="④ 点哪里"></a>④ 点哪里</h4><p>点Step Into(F7)这个箭头，也可以直接按F7</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103014047164.png" alt="image-20220103014047164"></p><p>点Stop结束</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103014108426.png" alt="image-20220103014108426"></p><h4 id="⑤-如何删除断点"><a href="#⑤-如何删除断点" class="headerlink" title="⑤ 如何删除断点"></a>⑤ 如何删除断点</h4><p>选择要删除的断点，单机鼠标左键即可</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103014159317.png" alt="image-20220103014159317"></p><p>如果是多个断点，可以每一个再点击一次。也可以一次性全部删除</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103014301382.png" alt="image-20220103014301382"></p><h2 id="16、基础知识练习"><a href="#16、基础知识练习" class="headerlink" title="16、基础知识练习"></a>16、基础知识练习</h2><h3 id="减肥计划"><a href="#减肥计划" class="headerlink" title="减肥计划"></a>减肥计划</h3><p>需求：输入星期数，显示今天的减肥活动</p><p>​    周一：跑步</p><p>​    周二：游泳</p><p>​    周三：慢跑</p><p>​    周四：动感单车</p><p>​    周五：拳击</p><p>​    周六：爬山</p><p>​    周日：好好吃一顿</p><h4 id="if版本"><a href="#if版本" class="headerlink" title="if版本"></a>if版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoLoseWeight</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner Num = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入今天的星期数(1-7)：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> Day = Num.nextInt();</span><br><span class="line">        <span class="keyword">if</span> (Day &gt;= <span class="number">1</span> &amp;&amp; Day &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Day == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周一：跑步&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周二：游泳&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周三：慢跑&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周四：动感单车&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周五：拳击&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">6</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周六：爬山&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周日：好好吃一顿&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入的日期有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoLoseWeight02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner Num = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入今天的星期数(1-7)：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> i = Num.nextInt();</span><br><span class="line">        getday(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getday</span><span class="params">(<span class="keyword">int</span> Day)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Day &gt;= <span class="number">1</span> &amp;&amp; Day &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (Day == <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周一：跑步&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">2</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周二：游泳&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">3</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周三：慢跑&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">4</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周四：动感单车&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">5</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周五：拳击&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (Day == <span class="number">6</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周六：爬山&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;今天周日：好好吃一顿&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;您输入的日期有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="switch版本"><a href="#switch版本" class="headerlink" title="switch版本"></a>switch版本</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoLoseWeight03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner Num = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.print(<span class="string">&quot;请输入今天的星期数(1-7)：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> Day = Num.nextInt();</span><br><span class="line">        <span class="keyword">switch</span> (Day) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;慢跑&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;动感单车&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的日期有误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="逢七过"><a href="#逢七过" class="headerlink" title="逢七过"></a>逢七过</h3><p>需求：朋友聚会的时候可能会玩一个游戏：逢七过。规则是：从任意一个数字开始报数，当你要报的数字包含7或者是7的倍数时都要说：过。为了帮助大家更好的玩这个游戏，这里我们直接在控制台打印1-100之间的满足逢七必过规则的数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo7pass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt;= <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">7</span> == <span class="number">0</span> || x % <span class="number">10</span> == <span class="number">7</span> || x / <span class="number">10</span> == <span class="number">7</span>) &#123;</span><br><span class="line">                System.out.print(<span class="string">&quot;过 &quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(x + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不死神兔"><a href="#不死神兔" class="headerlink" title="不死神兔"></a>不死神兔</h3><p>需求：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问第20个月的兔子对数为多少？</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103140049972.png" alt="image-20220103140049972"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoRabbit</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">20</span>];</span><br><span class="line">        arr[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x=<span class="number">2</span>;x&lt;arr.length;x++) &#123;</span><br><span class="line">            arr[x]=arr[x-<span class="number">1</span>]+arr[x-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;第二十个月兔子的对数是：&quot;</span> + arr[<span class="number">19</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="百钱百鸡"><a href="#百钱百鸡" class="headerlink" title="百钱百鸡"></a>百钱百鸡</h3><p>需求：我国古代数学家张丘建在《算经》一书中提出的数学问题：鸡翁一值钱五，鸡母一值钱三，鸡雏三值钱一。百钱买百鸡，问鸡翁、鸡母、鸡雏各几何？</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103142951305.png" alt="image-20220103142951305"></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103143141657.png" alt="image-20220103143141657"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoChicken</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">20</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt;= <span class="number">33</span>; y++) &#123;</span><br><span class="line">                <span class="keyword">int</span> z = <span class="number">100</span> - x - y;</span><br><span class="line">                <span class="keyword">if</span> (z % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; <span class="number">5</span> * x + <span class="number">3</span> * y + z / <span class="number">3</span> == <span class="number">100</span>) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;鸡翁有：&quot;</span> + x + <span class="string">&quot;只 &quot;</span> + <span class="string">&quot;鸡母有：&quot;</span> + y + <span class="string">&quot;只 &quot;</span> + <span class="string">&quot;鸡雏有：&quot;</span> + z + <span class="string">&quot;只&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组元素求和"><a href="#数组元素求和" class="headerlink" title="数组元素求和"></a>数组元素求和</h3><p>需求：有这样的一个数组，元素是{68,27,95,88,171,996,51,210}。求出该数组中满足要求的元素和，要求是：求和的元素个位和十位都不能是7，并且只能是偶数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoSum</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">68</span>, <span class="number">27</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">171</span>, <span class="number">996</span>, <span class="number">51</span>, <span class="number">210</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[x] / <span class="number">10</span> % <span class="number">10</span> != <span class="number">7</span> &amp;&amp; arr[x] % <span class="number">10</span> != <span class="number">7</span> &amp;&amp; arr[x] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum:&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组内容相同"><a href="#数组内容相同" class="headerlink" title="数组内容相同"></a>数组内容相同</h3><p>需求：设计一个方法，用于比较两个数组的内容是否相同</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103145630768.png" alt="image-20220103145630768"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] arr2 = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>&#125;;</span><br><span class="line">        <span class="keyword">boolean</span> flag = Array(arr,arr2);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">Array</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] arr2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.length != arr2.length) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[x] != arr2[x]) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><p>需求：已知一个数组arr={19,28,37,46,50};键盘录入一个数据，查找该数据在数组中的索引，并在控制台输出找到的索引值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArray2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line">        Scanner num = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个数字:&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> n = num.nextInt();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (n == arr[x]) &#123;</span><br><span class="line">                System.out.println(x);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;你输入的数字不在此数组上&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><p>需求：已知一个数组arr={19,28,37,46,50};用程序实现把数组中的元素交换，交换后的数组arr={50,46,37,28,19};并在控制台输出交换后的数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoArray3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line">        reverse(arr);</span><br><span class="line">        printArray(arr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> start = <span class="number">0</span>, end = arr.length - <span class="number">1</span>; start &lt;= end; start++, end--) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;[&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.print(arr[x]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(arr[x] + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="评委打分"><a href="#评委打分" class="headerlink" title="评委打分"></a>评委打分</h3><p>需求：在编程竞赛中，有6个评委为参赛的选手打分，分数为0-100的整数分。在选手的最后得分为：去掉一个最高分和一个最低分后的4个评委平均值(不考虑小数部分)</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103153045708.png" alt="image-20220103153045708"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoScore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">        Scanner num = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请输入&quot;</span> + (x + <span class="number">1</span>) + <span class="string">&quot;个评委的打分：&quot;</span>);</span><br><span class="line">            arr[x] = num.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max = getMax(arr);</span><br><span class="line">        <span class="keyword">int</span> min = getMin(arr);</span><br><span class="line">        <span class="keyword">int</span> sum = getSum(arr);</span><br><span class="line">        <span class="keyword">int</span> avg = (sum - max - min) / <span class="number">4</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;选手平均分是：&quot;</span>+avg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> min = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (min &gt; arr[x]) &#123;</span><br><span class="line">                min = arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMax</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> max = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">1</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (max &lt; arr[x]) &#123;</span><br><span class="line">                max = arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            sum += arr[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="17、面向对象基础"><a href="#17、面向对象基础" class="headerlink" title="17、面向对象基础"></a>17、面向对象基础</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><h4 id="类的定义"><a href="#类的定义" class="headerlink" title="类的定义"></a>类的定义</h4><p>类的重要性：是Java程序的基本组成单位</p><p>类是什么：是对现实生活中一类具有共同属性和行为的事物的抽象，确定对象将会拥有的属性和行为</p><p>类的组成：属性和行为</p><ul><li>属性：在类中通过成员变量来体现（类中方法外的变量）</li><li>行为：在类中通过成员方法来体现（和前面的方法相比去掉static关键字即可）</li></ul><p>类的定义步骤：</p><p>① 定义类</p><p>② 编写类的成员变量</p><p>③ 编写类的成员方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>;</span><br><span class="line">    变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    方法<span class="number">1</span>；</span><br><span class="line">    方法<span class="number">2</span>;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String brand;<span class="comment">//品牌</span></span><br><span class="line">    <span class="keyword">int</span> price;<span class="comment">//价格</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//成员方法 不用再写static</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打电话&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发短信&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="对象的使用"><a href="#对象的使用" class="headerlink" title="对象的使用"></a>对象的使用</h4><p>创建对象：</p><ul><li>格式：类名 对象名 = new 类名();</li><li>范例： Phone p = new Phone();</li></ul><p>使用对象：</p><p>1：使用成员变量</p><ul><li>格式：对象名.变量名</li><li>范例：p.brand</li></ul><p>2：使用成员方法</p><ul><li>格式：对象名.方法名()</li><li>范例：p.call()</li></ul><h3 id="案例：学生"><a href="#案例：学生" class="headerlink" title="案例：学生"></a>案例：学生</h3><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103203027100.png" alt="image-20220103203027100"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StudentClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//成员变量</span></span><br><span class="line">    String name = <span class="string">&quot;陈李生&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习，天天向上&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doHomework</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;键盘敲烂，月薪过万&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StudentClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用对象</span></span><br><span class="line">        System.out.println(s.name + <span class="string">&quot;,&quot;</span> + s.age + <span class="string">&quot;岁&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用方法</span></span><br><span class="line">        s.study();</span><br><span class="line">        s.doHomework();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单个对象（内存图）"><a href="#单个对象（内存图）" class="headerlink" title="单个对象（内存图）"></a>单个对象（内存图）</h3><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103204802341.png" alt="image-20220103204802341"></p><h3 id="多个对象（内存图）"><a href="#多个对象（内存图）" class="headerlink" title="多个对象（内存图）"></a>多个对象（内存图）</h3><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103205521292.png" alt="image-20220103205521292"></p><h3 id="多个对象指向相同（内存图）"><a href="#多个对象指向相同（内存图）" class="headerlink" title="多个对象指向相同（内存图）"></a>多个对象指向相同（内存图）</h3><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103205712139.png" alt="image-20220103205712139"></p><h3 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h3><h4 id="什么是成员变量和局部变量"><a href="#什么是成员变量和局部变量" class="headerlink" title="什么是成员变量和局部变量"></a>什么是成员变量和局部变量</h4><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220103205954090.png" alt="image-20220103205954090"></p><h4 id="成员变量和局部变量的区别"><a href="#成员变量和局部变量的区别" class="headerlink" title="成员变量和局部变量的区别"></a>成员变量和局部变量的区别</h4><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置不同</td><td>类中方法外</td><td>方法内或者方法声明上</td></tr><tr><td>内存中位置不同</td><td>堆内存</td><td>栈内存</td></tr><tr><td>生命周期不同</td><td>随着对象的存在而存在，随着对象的消失而消失</td><td>随着方法的调用而存在，随着方法的调用完毕而消失</td></tr><tr><td>初始化值不同</td><td>有默认的初始化值</td><td>没有默认的初始化值，必须先定义，赋值，才能使用</td></tr></tbody></table><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><h4 id="封装概述"><a href="#封装概述" class="headerlink" title="封装概述"></a>封装概述</h4><p>是面向对象三大特征之一（封装，继承，多态）</p><p>是面向对象编程语言对客观世界的模拟，客观世界里成员变量都是隐藏在对象内部的，外界是无法直接操作的</p><h4 id="封装原理"><a href="#封装原理" class="headerlink" title="封装原理"></a>封装原理</h4><p>将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问成员变量private，提供对应的get变量名()/set变量名()方法</p><h4 id="封装好处"><a href="#封装好处" class="headerlink" title="封装好处"></a>封装好处</h4><p>通过方法来控制变量的操作，提高了代码的安全性</p><p>把代码用方法进行封装，提高了代码的复用性</p><h4 id="private关键字"><a href="#private关键字" class="headerlink" title="private关键字"></a>private关键字</h4><ul><li>是一个权限修饰符</li><li>可以修饰成员（成员变量和成员方法）</li><li>作用是保护成员不被别的类使用，被private修饰的成员只能在本类中才能访问</li></ul><p>针对private修饰的成员变量，如果需要被其他类使用，提供相应的操作</p><ul><li>提供”get变量名()”方法，用于获取成员变量的值，方法用public修饰</li><li>提供”set变量名(参数)”方法，用于设置成员变量的值，方法用public修饰</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义成员变量</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义get/set方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String n)</span> </span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//给成员变量赋值</span></span><br><span class="line">        s.setName(<span class="string">&quot;林青霞&quot;</span>);</span><br><span class="line">        s.setAge(<span class="number">16</span>);</span><br><span class="line">        System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>① this修饰的变量用于指代成员变量</p><ul><li>方法的形参如果与成员变量同名，不带this修饰的变量指的是形参，而不是成员变量</li><li>方法的形参没有与成员变量同名，不带this修饰的变量指的是成员变量</li></ul><p>② 什么时候使用this呢？解决局部变量隐藏成员变量</p><p>③ this：代表所在类的对象引用</p><ul><li>记住：方法被哪个对象调用，this就代表哪个对象</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220104212030974.png" alt="image-20220104212030974"></p><h4 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h4><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220104213513044.png" alt="image-20220104213513044"></p><h2 id="18、字符串"><a href="#18、字符串" class="headerlink" title="18、字符串"></a>18、字符串</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><h4 id="String概述"><a href="#String概述" class="headerlink" title="String概述"></a>String概述</h4><p>String类在<strong>java.lang</strong>包下，所以使用的时候不需要导包</p><p><strong>String</strong>类代表<strong>字符串</strong>，Java程序中的所有字符串文字(例如”abc”)都被实现为此类的案例，也就是说，<strong>Java程序中所有的双引号字符串，都是String类的对象</strong></p><h4 id="字符串特点"><a href="#字符串特点" class="headerlink" title="字符串特点"></a>字符串特点</h4><ul><li>字符串不可变，它们的值在创建后不能被更改</li><li>虽然String的值是不可变的，但是它们可以被共享</li><li>字符串效果上相当于字符串数组(<strong>char[ ]</strong>)，但是底层原理是字节数组(<strong>byte[ ]</strong>) </li></ul><h4 id="String构造方法"><a href="#String构造方法" class="headerlink" title="String构造方法"></a>String构造方法</h4><table><thead><tr><th align="left">方法名</th><th align="left">说明<strong>（推荐使用最后一种）</strong></th></tr></thead><tbody><tr><td align="left">public String( )</td><td align="left">创建一个空白字符串对象，不含有任何内容</td></tr><tr><td align="left">public String(char[] chs)</td><td align="left">根据字符数组的内容，来创建字符串对象</td></tr><tr><td align="left">public String(byte[] bys)</td><td align="left">根据字节数组的内容，来创建字符串对象</td></tr><tr><td align="left">String s = “abc”;</td><td align="left">直接赋值的方式创建字符串对象，内容就是abc</td></tr></tbody></table><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220107213338695.png" alt="image-20220107213338695"></p><h4 id="String对象的特点"><a href="#String对象的特点" class="headerlink" title="String对象的特点"></a>String对象的特点</h4><p>1、通过new创建的字符串对象，每一次new都会申请一个内存空间，虽然内容相同，但是地址值不同</p><blockquote><p>char[ ] chs = {‘a’, ‘b’, ‘c’ };</p><p>String s1 = new Sting(chs);</p><p>String s2 = new Sting(chs);</p></blockquote><p>上面的代码中，JVM会首先创建一个字符数组，然后每一次new的时候都会有一个新的内存地址，只不过s1和s2参考的字符串内容都是相同的</p><p>2、以” “方式给出的字符串，只要字符序列相同（顺序和大小写），无论在程序代码中出现几次，JVM都只会建立一个String对象，并在字符串池中维护</p><blockquote><p>String s3 = “abc”;</p><p>String s4 = “abc”;</p></blockquote><p>在上面的代码中，针对第一行代码，JVM会建立一个String对象放在字符串池中，并给s3参考；</p><p>第二行则让s4直接参考字符串池中的String对象，也就是说它们本质上是同一个对象</p><h4 id="字符串的比较"><a href="#字符串的比较" class="headerlink" title="字符串的比较"></a>字符串的比较</h4><p>使用 == 做比较</p><ul><li>基本类型：比较的是数据值是否相同</li><li>引用类型：比较的是地址值是否相同</li></ul><p>字符串是对象，它比较内容是否相同，是通过一个<strong>方法</strong>来实现，这个<strong>方法</strong>叫：equals()</p><ul><li>public boolean equals(Object anObject)：将此字符串与指定对象进行比较。由于我们比较的是字符串对象，所以参数直接传递一个字符串</li></ul><h4 id="案例：用户登录"><a href="#案例：用户登录" class="headerlink" title="案例：用户登录"></a>案例：用户登录</h4><p>需求：已知用户名和密码，请用程序实现模拟用户登录。总共给三次机会，登录之后，给出相应的提示</p><p>思路：</p><p>① 已知用户名和密码，定义两个字符串表示即可</p><p>② 键盘录入要登陆的用户名和密码，用<strong>Scanner</strong>实现</p><p>③ 拿键盘录入的用户名、密码和已知的用户名、密码进行比较，给出相应的提示。字符串的内容比较，用**equals()**方法实现</p><p>④ 用循环实现多次机会，这里的次数明确，采用<strong>for</strong>循环实现，并在登录成功的时候，使用<strong>break</strong>结束循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">login</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String username = <span class="string">&quot;chenlisheng&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;chenlishengshabi&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;)&#123;</span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入用户名：&quot;</span>);</span><br><span class="line">            String name = sc.nextLine();</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入密码：&quot;</span>);</span><br><span class="line">            String pwd = sc.nextLine();</span><br><span class="line">            <span class="keyword">if</span> (username.equals(name) &amp;&amp; password.equals(pwd)) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;登录失败，请重新输入&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：遍历字符串"><a href="#案例：遍历字符串" class="headerlink" title="案例：遍历字符串"></a>案例：遍历字符串</h4><p>需求：键盘录入一个字符串，使用程序实现在控制台遍历该字符串</p><p>思路：</p><p>① 键盘录入一个字符串，用Scanner实现</p><p>② 遍历字符串，首先要能够获取到字符串中的每一个字符</p><ul><li>public char charAt(int index): 返回指定索引处的char值，字符串的索引值也是从0开始的</li></ul><p>③ 遍历字符串，其次要能够获取到字符串的长度</p><ul><li>public int <strong>length()</strong>: 返回此字符串的长度</li><li>数组的长度：数组名.length</li><li>字符串的长度：字符串对象.length()</li></ul><p>④ 遍历字符串的通用格式</p><blockquote><p>for(int i=0;i&lt;s.length();i++){</p><p>​    s.charAt(i);    // 就是指定索引处的字符值</p><p>}</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            System.out.print(line.charAt(i)+<span class="string">&quot; &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：统计字符次数"><a href="#案例：统计字符次数" class="headerlink" title="案例：统计字符次数"></a>案例：统计字符次数</h4><p>需求：键盘录入一个字符串，统计该字符串中大写字母字符，小写字母字符，数字字符出现的次数（不考虑其他字符）</p><p>思路：</p><p>① 键盘录入一个字符串，用Scanner实现</p><p>② 要统计三种类型的字符个数，需定义三个统计变量，初始值都为0</p><p>③ 遍历字符串，得到每一个字符</p><p>④ 判断该字符属于哪种类型，然后对应类型的统计变量+1</p><p>​    假如ch是一个字符，我要判断它属于大写字母，小写字母，还是数字，直接    判断该字符是否在对应的范围即可</p><ul><li>大写字母：ch&gt;=’A’ &amp;&amp; ch&lt;=’Z’</li><li>小写字母：ch&gt;=’a’ &amp;&amp; ch&lt;=’z’</li><li>数字：ch&gt;=’0’ &amp;&amp; ch&lt;=’9’</li></ul><p>⑤ 输出三种类型的字符个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;输入一个字符串：&quot;</span>);</span><br><span class="line">        String line = sc.nextLine();</span><br><span class="line">        <span class="keyword">int</span> bigLetter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> smallLetter = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; line.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (line.charAt(i) &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; line.charAt(i) &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">                bigLetter += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.charAt(i) &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; line.charAt(i) &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">                smallLetter += <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (line.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; line.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">                number += <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;大写字母个数为：&quot;</span> + bigLetter);</span><br><span class="line">        System.out.println(<span class="string">&quot;小写字母个数为：&quot;</span> + smallLetter);</span><br><span class="line">        System.out.println(<span class="string">&quot;数字个数为：&quot;</span> + number);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例：拼接字符串"><a href="#案例：拼接字符串" class="headerlink" title="案例：拼接字符串"></a>案例：拼接字符串</h4><p>需求：定义一个方法，把int数组中的数据按照指定的格式拼接成一个字符串返回，调用该方法，并在控制台输出结果。例如：数组为int[] arr = {1,2,3};，执行方法后的输出结果为：[1,2,3]</p><p>思路：</p><p>① 定义一个int类型的数组，用静态初始化完成数组元素的初始化</p><p>② 定义一个方法，用于把int数组中的数据按照指定格式拼接成一个字符串返回，返回值类型是<strong>String</strong>，参数列表<strong>int[] arr</strong></p><p>③ 在方法中遍历数组，按照要求进行拼接</p><p>④ 调用方法，用一个遍历接收</p><p>⑤ 输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        String s = arrayToString(arr);</span><br><span class="line">        System.out.println(<span class="string">&quot;s:&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        s = s + <span class="string">&quot;[&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s += arr[i];</span><br><span class="line">                s += <span class="string">&quot;, &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        s = s + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：字符串反转"><a href="#案例：字符串反转" class="headerlink" title="案例：字符串反转"></a>案例：字符串反转</h4><p>需求：定义一个方法，实现字符串反转。键盘录入一个字符串，调用该方法后，在控制台输出结果</p><p>例如，键盘录入abc，输出结果为cba</p><p>思路：</p><p>① 键盘录入一个字符串，用Scanner实现</p><p>② 定义一个方法，实现字符串反转。返回值类型<strong>String</strong>，参数<strong>String s</strong></p><p>③ 在方法中把字符串倒着遍历，然后把每一个得到的字符拼接成一个字符串并返回</p><p>④ 调用方法，用一个变量接收结果</p><p>⑤ 输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        String s1 = changeString(s);</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">changeString</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = s.length() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            s1 = s1 + s.charAt(i);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> s1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><h4 id="StringBuilder概述"><a href="#StringBuilder概述" class="headerlink" title="StringBuilder概述"></a>StringBuilder概述</h4><blockquote><p>如果对字符串进行拼接操作，每次拼接，都会构建一个新的String对象，既耗时，又浪费内存空间，而这种操作还不可避免。那么有没有一种比较好的方式可以解决这个问题呢？答案是肯定的，我们可以通过Java提供的<strong>StringBuilder</strong>类就来解决这个问题。</p></blockquote><p>StringBuilder是一个可变的字符串类，我们可以把它看成一个容器，这里的可变指的是StringBuilder对象中的内容是可变的</p><p><strong>String和StringBuilder的区别</strong></p><ul><li>String：内容是不可变的</li><li>StringBuilder：内容是可变的</li></ul><h4 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder()</td><td>创建一个空白可变字符串对象，不含有任何内容</td></tr><tr><td>public StringBuilder(String str)</td><td>根据字符串的内容，来创建可变字符串对象</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;sb:&quot;</span> + sb);</span><br><span class="line">        System.out.println(<span class="string">&quot;sb.length:&quot;</span> + sb.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="StringBuilder的添加和反转方法"><a href="#StringBuilder的添加和反转方法" class="headerlink" title="StringBuilder的添加和反转方法"></a>StringBuilder的添加和反转方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>返回相反的字符序列</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个字符串：&quot;</span>);</span><br><span class="line">        String s1 = sc.nextLine();</span><br><span class="line">        StringBuilder s = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        s = s.append(s1).append(<span class="string">&quot;我是你爹&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        s = s.reverse();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>StringBuilder和String相互转换</p><p>1、StringBuilder转换为String</p><ul><li>public String **toString()**：通过toString()就可以实现把StringBuilder转换为String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// StringBuilder转换为String</span></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    sb.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// toString()</span></span><br><span class="line">    String s = sb.toString();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、String转换为StringBuilder</p><ul><li>public StringBuilder(String s)：通过构造方法就可以实现把String转换为StringBuilder</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">// String转换为StringBuilder</span></span><br><span class="line">    String s = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// public StringBuilder(String s)：通过构造方法就可以实现把String转换为StringBuilder</span></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder(s);</span><br><span class="line">    System.out.println(sb);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public StringBuilder append(任意类型)</td><td>添加数据，并返回对象本身</td></tr><tr><td>public StringBuilder reverse()</td><td>返回相反的字符序列</td></tr><tr><td>public String toString()</td><td>通过toString()就可以实现把StringBuilder转换为String</td></tr></tbody></table><h2 id="19、集合基础"><a href="#19、集合基础" class="headerlink" title="19、集合基础"></a>19、集合基础</h2><h3 id="集合概述"><a href="#集合概述" class="headerlink" title="集合概述"></a>集合概述</h3><p>集合类的特点：提供一种存储空间可变的存储模型，存储的数据容量可以发生改变</p><p>集合类有很多，目前我们先学习一个：ArrayList</p><p><strong>ArrayList&lt; E &gt;:</strong></p><ul><li>可调整大小的数组实现</li><li>&lt; E &gt;：是一种特殊的数据类型，泛型。</li></ul><p><strong>怎么用呢：</strong></p><ul><li>在出现E的地方我们可以使用引用数据类型替换即可</li><li>举例：ArrayList&lt; String &gt;,ArrayList&lt; Student &gt;</li></ul><h3 id="ArrayList构造方法和添加方法"><a href="#ArrayList构造方法和添加方法" class="headerlink" title="ArrayList构造方法和添加方法"></a>ArrayList构造方法和添加方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public ArrayList()</td><td>创建一个空的集合对象</td></tr><tr><td>public boolean add(E e)</td><td>将指定的元素追加到此集合的末尾</td></tr><tr><td>public void add(int index, E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建一个空的集合对象</span></span><br><span class="line">    ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将指定的元素追加到此集合的末尾</span></span><br><span class="line">    array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//在此集合中的指定位置插入指定的元素</span></span><br><span class="line">    array.add(<span class="number">1</span>,<span class="string">&quot;world&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(array)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ArrayList集合常用方法"><a href="#ArrayList集合常用方法" class="headerlink" title="ArrayList集合常用方法"></a>ArrayList集合常用方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean remove(Object o)</td><td>删除指定的元素，返回删除是否成功</td></tr><tr><td>public E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>public E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>public E get(int index)</td><td>返回指定索引处的元素</td></tr><tr><td>public int size()</td><td>返回集合中的元素的个数</td></tr></tbody></table><h3 id="案例：存储字符串并遍历"><a href="#案例：存储字符串并遍历" class="headerlink" title="案例：存储字符串并遍历"></a>案例：存储字符串并遍历</h3><p>需求：创建一个存储字符串的几何，存储3个字符串元素，使用程序实现在控制台遍历该集合</p><p>思路：</p><p>① 创建集合对象</p><p>② 往集合中添加字符串对象</p><p>③ 遍历集合，首先要能够获取到集合中的每一个元素，这个通过get(int index)方法实现</p><p>④ 遍历集合，其次要能够获取到集合的长度，这个通过size()方法实现</p><p>⑤ 遍历集合的通用格式</p><blockquote><p>for(int i = 0;i&lt;集合对象.size();i++) {</p><p>​    集合对象..get(i);   //就是指定索引处的元素</p><p>}</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Arraylist1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; array = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        array.add(<span class="string">&quot;Cnm&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;array.size();i++)&#123;</span><br><span class="line">            System.out.print(array.get(i)+<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;array:&quot;</span>+array);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="案例：存储学生对象并遍历"><a href="#案例：存储学生对象并遍历" class="headerlink" title="案例：存储学生对象并遍历"></a>案例：存储学生对象并遍历</h3><p>需求：创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><p>思路：</p><p>① 定义学生类</p><p>② 创建集合对象</p><p>③ 创建学生对象</p><p>④ 添加学生对象到集合中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array= <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建学生对象</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">&quot;陈李生&quot;</span>,<span class="number">20</span>);</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;陈华生&quot;</span>,<span class="number">21</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;曾润钰&quot;</span>,<span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 添加学生对象到集合中</span></span><br><span class="line">        array.add(s);</span><br><span class="line">        array.add(s1);</span><br><span class="line">        array.add(s2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;array.size();i++)&#123;</span><br><span class="line">            Student s3 = array.get(i);</span><br><span class="line">            System.out.println(s3.getName()+<span class="string">&quot;, &quot;</span>+s3.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：存储学生对象并遍历2-0"><a href="#案例：存储学生对象并遍历2-0" class="headerlink" title="案例：存储学生对象并遍历2.0"></a>案例：存储学生对象并遍历2.0</h3><p>需求：创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合，学生的姓名和年龄来自于键盘录入</p><p>思路：</p><p>① 定义学生类，为了键盘录入数据方便，把学生类中的成员变量都定义为String类型</p><p>② 创建集合对象</p><p>③ 键盘录入学生对象所需要的数据</p><p>④ 创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</p><p>⑤ 往集合中添加学生对象</p><p>⑥ 遍历集合，采用通用遍历格式实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StudentArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayListStudent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line">        addStudent(array);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            System.out.println(<span class="string">&quot;姓名:&quot;</span>+s.getName()+<span class="string">&quot;,&quot;</span>+<span class="string">&quot;年龄:&quot;</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span></span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入学生对象所需要的数据</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生姓名:&quot;</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生年龄:&quot;</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象,把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//往集合中添加学生对象</span></span><br><span class="line">        array.add(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> StudentArray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="案例：学生管理系统"><a href="#案例：学生管理系统" class="headerlink" title="案例：学生管理系统"></a>案例：学生管理系统</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Case.StudentSystem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        ① 用输出语句完成主界面的编写</span></span><br><span class="line"><span class="comment">        ② 用Scanner实现键盘录入数据</span></span><br><span class="line"><span class="comment">        ③ 用switch语句完成操作的选择</span></span><br><span class="line"><span class="comment">        ④ 用循环完成再次回到主界面</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象,用于存储学生数据</span></span><br><span class="line">        ArrayList&lt;Student&gt; array = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//用输出语句完成主界面的编写</span></span><br><span class="line">            System.out.println(<span class="string">&quot;----------欢迎来到学生管理系统----------&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;1 添加学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;2 删除学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;3 修改学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;4 查看所有学生&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;5 退出&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//用Scanner实现键盘录入数据</span></span><br><span class="line">            Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入你的选择:&quot;</span>);</span><br><span class="line">            <span class="keyword">int</span> s = sc.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//用switch语句完成操作的选择</span></span><br><span class="line">            <span class="keyword">switch</span> (s) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;添加学生&quot;</span>);</span><br><span class="line">                    addStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;删除学生&quot;</span>);</span><br><span class="line">                    deleteStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">                    updateStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;查看所有学生&quot;</span>);</span><br><span class="line">                    findAllStudent(array);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    System.out.println(<span class="string">&quot;谢谢使用&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//键盘录入学生对象所需的数据,显示提示信息,提示要输入何种信息</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        String stuNum;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入学生学号: &quot;</span>);</span><br><span class="line">            stuNum = sc.nextLine();</span><br><span class="line">            <span class="keyword">boolean</span> flag = isUsed(array, stuNum);</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的学号已存在,请重新输入\n&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生姓名:&quot;</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生年龄:&quot;</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入学生居住地:&quot;</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象,把键盘录入的数据赋值给学生对象的成员变量</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line">        s.setStuNum(stuNum);</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line">        s.setAddress(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将学生对象添加到集合中</span></span><br><span class="line">        array.add(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出添加成功提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;添加成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断学号是否存在</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isUsed</span><span class="params">(ArrayList&lt;Student&gt; array,String stuNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span>(s.getStuNum().equals(stuNum))&#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看所有学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">findAllStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无信息,请先添加信息后再进行查询\n&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//显示表头信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;学号\t\t\t\t姓名\t\t年龄\t\t居住地&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将集合中数据取出按照对应格式显示学生信息,年龄显示补充&quot;岁&quot;</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">                Student s = array.get(i);</span><br><span class="line">                System.out.println(s.getStuNum() + <span class="string">&quot;\t&quot;</span> + s.getName() + <span class="string">&quot;\t&quot;</span> + s.getAge() + <span class="string">&quot;岁\t&quot;</span> + s.getAddress());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">deleteStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (array.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无信息,请先添加信息后再进行删除\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要删除的学生学号,显示提示信息</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您要删除的学生的学号:&quot;</span>);</span><br><span class="line">        String stuNum = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合将对应学生对象从集合中删除</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            Student s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.getStuNum().equals(stuNum))&#123;</span><br><span class="line">                array.remove(i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的学号有误,请在查证后再进行删除!\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出删除成功提示信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;删除成功!&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改学生信息方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">updateStudent</span><span class="params">(ArrayList&lt;Student&gt; array)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个学生变量用来存储信息</span></span><br><span class="line">        Student s = <span class="keyword">new</span> Student();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (array.size()==<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无信息,请先添加信息后再进行修改\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要修改的学生学号</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入您要修改的学生的学号:&quot;</span>);</span><br><span class="line">        String stuNum = sc.nextLine();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.getStuNum().equals(stuNum))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;您输入的学号有误,请查证后再进行修改\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//键盘录入要修改的学生信息</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入更正后的学生姓名:&quot;</span>);</span><br><span class="line">        String name = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入更正后的学生年龄:&quot;</span>);</span><br><span class="line">        String age = sc.nextLine();</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入更正后的学生居住地:&quot;</span>);</span><br><span class="line">        String address = sc.nextLine();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给学生变量赋值</span></span><br><span class="line">        s.setStuNum(stuNum);</span><br><span class="line">        s.setName(name);</span><br><span class="line">        s.setAge(age);</span><br><span class="line">        s.setAddress(address);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合修改对应的学生信息</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">            s = array.get(i);</span><br><span class="line">            <span class="keyword">if</span> (s.getStuNum().equals(stuNum))&#123;</span><br><span class="line">                array.set(i,s);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;没有该学号,请查证后再进行修改!\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给出修改成功的提示</span></span><br><span class="line">        System.out.println(<span class="string">&quot;修改成功!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220114152827043.png" alt="image-20220114152827043"></p><h4 id="学生管理系统实现思路"><a href="#学生管理系统实现思路" class="headerlink" title="学生管理系统实现思路"></a>学生管理系统实现思路</h4><p>① 定义学生类</p><p>② 主界面的代码编写</p><p>③ 添加学生的代码编写</p><p>④ 查看学生的代码编写</p><p>⑤ 删除学生的代码编写</p><p>⑥ 修改学生的代码编写</p><h5 id="1、定义学生类"><a href="#1、定义学生类" class="headerlink" title="1、定义学生类"></a>1、定义学生类</h5><p>学生类：</p><ul><li>Student</li></ul><p>成员变量：</p><ul><li>学号：stuNum</li><li>姓名：name</li><li>年龄：age</li><li>居住地：address</li></ul><p>构造方法：</p><ul><li>无参构造</li><li>带四个参数的构造</li></ul><p>成员方法：</p><ul><li>每个成员变量对应给出get/set方法</li></ul><h5 id="2、主界面的代码编写"><a href="#2、主界面的代码编写" class="headerlink" title="2、主界面的代码编写"></a>2、主界面的代码编写</h5><p>思路：</p><p>① 用输出语句完成主界面的编写</p><p>② 用Scanner实现键盘录入数据</p><p>③ 用switch</p><p>④ 用循环完成再次回到主界面</p><p>System.exit(0);     退出JVM虚拟机</p><h5 id="3、添加学生的代码编写"><a href="#3、添加学生的代码编写" class="headerlink" title="3、添加学生的代码编写"></a>3、添加学生的代码编写</h5><p>思路：</p><p>① 用键盘录入选择添加学生</p><p>② 定义一个方法，用于添加学生</p><ul><li>显示提示信息，提示要输入何种信息</li><li>键盘录入学生对象所需要的数据</li><li>创建学生对象，把键盘录入的数据赋值给学生对象的成员变量</li><li>将学生对象添加到集合中(保存)</li><li>给出添加成功提示</li></ul><p>③ 调用方法</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220114161007835.png" alt="image-20220114161007835"></p><h5 id="4、查看学生的代码编写"><a href="#4、查看学生的代码编写" class="headerlink" title="4、查看学生的代码编写"></a>4、查看学生的代码编写</h5><p>思路：</p><p>① 用键盘录入选择查看所有学生信息</p><p>② 定义一个方法，用于查看学生信息</p><ul><li>显示表头信息</li><li>将集合中数据取出按照对应格式显示学生信息，年龄显示补充”岁”</li></ul><p>③ 调用方法</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220114164814833.png" alt="image-20220114164814833"></p><h5 id="5、删除学生的代码编写"><a href="#5、删除学生的代码编写" class="headerlink" title="5、删除学生的代码编写"></a>5、删除学生的代码编写</h5><p>思路：</p><p>① 用键盘录入选择删除学生信息</p><p>② 定义一个方法，用于删除学生信息</p><ul><li>显示提示信息</li><li>键盘录入要删除的学生学号</li><li>遍历集合将对应学生对象从集合中和删除</li><li>给出删除成功提示</li></ul><p>③ 调用方法</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220114170419605.png" alt="image-20220114170419605"></p><h5 id="6、修改学生的代码编写"><a href="#6、修改学生的代码编写" class="headerlink" title="6、修改学生的代码编写"></a>6、修改学生的代码编写</h5><p>思路：</p><p>① 用键盘录入选择修改学生信息</p><p>② 定义一个方法，用于修改学生信息</p><ul><li>显示提示信息</li><li>键盘录入要修改的学生学号</li><li>键盘录入要修改的学生信息</li><li>遍历集合修改对应的学生信息</li><li>给出修改成功提示</li></ul><p>③ 调用方法</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220114174925698.png" alt="image-20220114174925698"></p><h2 id="20、继承"><a href="#20、继承" class="headerlink" title="20、继承"></a>20、继承</h2><h3 id="继承概述"><a href="#继承概述" class="headerlink" title="继承概述"></a>继承概述</h3><p>继承是面向对象三大特征之一。可以使得子类具有父类的属性和方法，还可以在子类中重新定义，追加属性和方法</p><p>继承的格式</p><ul><li>格式：public class 子类名 <strong>extends</strong> 父类 { }</li><li>范例：public class Zi <strong>extends</strong> Fu { }</li><li>Fu：是父类，也被称为基类、超类</li><li>Zi：是子类，也被称为派生类</li></ul><p>继承中子类的特点：</p><ul><li>子类可以有父类的内容</li><li>子类还可以有自己特有的内容</li></ul><h3 id="继承的好处和弊端"><a href="#继承的好处和弊端" class="headerlink" title="继承的好处和弊端"></a>继承的好处和弊端</h3><p>继承好处</p><ul><li>提高了代码的<strong>复用性</strong>(多个类相同的成员可以放到同一个类中)</li><li>提高了代码的<strong>维护性</strong>(如果方法的代码需要修改，修改一处即可)</li></ul><p>继承弊端</p><ul><li>继承让类与类之间产生了关系，类的耦合性增强了，当父类发生变化时子类实现也不得不跟着变化，削弱了子类的独特性</li></ul><p>什么时候使用继承？</p><ul><li>继承体现的关系：is a</li><li>假设法：我有两个类A和B，如果他们满足A是B的一种，或者B是A的一种，就说明他们存在继承关系，这个时候就可以考虑使用继承来体现，否则就不能滥用继承</li><li>举例：苹果和水果，猫和动物，猫和狗(不能用继承)</li></ul><h3 id="继承中变量的访问特点"><a href="#继承中变量的访问特点" class="headerlink" title="继承中变量的访问特点"></a>继承中变量的访问特点</h3><p>在子类方法中访问一个变量</p><ul><li>子类局部范围找</li><li>子类成员范围找</li><li>父类成员方位找</li><li>如果以上都没有那就会报错(不考虑父亲的父亲…)</li></ul><h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p><strong>super****关键字的用法和</strong>this**关键字的用法相似</p><ul><li><strong>this</strong>：代表本类对象的引用</li><li><strong>super</strong>：代表父类存储空间的标识(可以理解为父类对象引用)</li></ul><table><thead><tr><th align="center">关键字</th><th align="center">访问成员变量</th><th align="center">访问构造方法</th><th align="center">访问成员方法</th></tr></thead><tbody><tr><td align="center">this</td><td align="center">this.成员变量<br />访问本类成员变量</td><td align="center">this(…)<br />访问本类构造方法</td><td align="center">this.成员方法(…)<br />访问本类成员方法</td></tr><tr><td align="center">super</td><td align="center">super.成员变量<br />访问父类成员变量</td><td align="center">super(…)<br />访问父类构造方法</td><td align="center">super.成员方法(…)<br />访问父类成员方法</td></tr></tbody></table><h3 id="继承中构造方法的访问特点"><a href="#继承中构造方法的访问特点" class="headerlink" title="继承中构造方法的访问特点"></a>继承中构造方法的访问特点</h3><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116142105020.png" alt="image-20220116142105020"></p><p>子类中所有的构造方法默认都会访问父类中无参的构造方法</p><p>为什么呢？</p><ul><li>因为子类会继承父类中的数据，可能还会使用父类的数据。所以，子类初始化之前，一定要先完成父类数据的初始化</li><li>每一个子类构造方法的第一条语句默认是：<strong>super( )</strong></li></ul><p>如果父类中没有无参构造方法，只有带参构造方法，该怎么办呢？</p><ul><li>通过使用super关键字去显示的调用父类的带参构造方法</li><li>在父类中自己提供一个无参构造方法</li></ul><p><strong>推荐：自己给出无参构造方法</strong></p><h3 id="继承中成员方法的访问特点"><a href="#继承中成员方法的访问特点" class="headerlink" title="继承中成员方法的访问特点"></a>继承中成员方法的访问特点</h3><p>通过子类对象访问一个方法</p><ul><li>子类成员范围找</li><li>父类成员范围找</li><li>如果以上都没有那就会报错(不考虑父亲的父亲…)</li></ul><h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><p>方法重写概述</p><ul><li>子类中出现了和父类中一模一样的方法声明</li></ul><p>方法重写的应用</p><ul><li>当子类需要父类的功能，而功能主体子类有自己特有内容时，可以重写父类中的方法，这样，即沿袭了父类的功能，又定义了子类特有的内容 </li></ul><p><strong>@Override</strong></p><ul><li>是一个注解(注解后面会学到)</li><li>可以帮助我们检查重写方法的声明的正确性</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116145101621.png" alt="image-20220116145101621"></p><h3 id="方法重写注意事项"><a href="#方法重写注意事项" class="headerlink" title="方法重写注意事项"></a>方法重写注意事项</h3><ul><li>私有方法不能被重写(父类私有成员子类不能继承的)</li><li>子类方法访问权限不能更低(public &gt; 默认 &gt; 私有)</li><li>权限优先级：public &gt; protected &gt; default(默认) &gt; private</li></ul><h3 id="Java中继承的注意事项"><a href="#Java中继承的注意事项" class="headerlink" title="Java中继承的注意事项"></a>Java中继承的注意事项</h3><ul><li>Java中类只支持单继承，不支持多继承</li><li>Java中类支持多层继承</li></ul><p> <img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116150922779.png" alt="image-20220116150922779"></p><h3 id="案例：老师和学生"><a href="#案例：老师和学生" class="headerlink" title="案例：老师和学生"></a>案例：老师和学生</h3><p>需求：定义老师类和学生类，然后写代码测试；最后找到老师类和学生类当中的共性内容，抽取出一个父类，用继承的方式改写代码，并进行测试</p><p>思路：</p><p>① 定义老师类( 姓名，年龄，教书() )</p><p>② 定义学生类( 姓名，年龄，学习() )</p><p>③ 定义测试类，写代码测试</p><p>④ 共性抽取父类，定义人类(姓名，年龄)</p><p>⑤ 定义老师类，继承人类，并给出自己特有方法：教书( )</p><p>⑥ 定义学生类，继承人类，并给出自己特有方法：学习( )</p><p>⑦ 定义测试类，写代码测试</p><p><strong>代码在Case.TeacherAndStudent里面</strong></p><h3 id="案例：猫和狗"><a href="#案例：猫和狗" class="headerlink" title="案例：猫和狗"></a>案例：猫和狗</h3><p>需求：请采用继承的思想实现猫和狗的案例，并在测试类中进行测试</p><p>分析：</p><p>① 猫：</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法，抓老鼠()</li></ul><p>② 狗：</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法，看门()</li></ul><p>③ 共性：</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法</li></ul><p>思路：</p><p>① 定义动物类(Animal)</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法</li></ul><p>② 定义猫类(Cat)，继承动物类</p><ul><li>构造方法：无参，带参</li><li>成员方法：抓老鼠()</li></ul><p>③ 定义狗类(Dog)，继承动物类</p><ul><li>构造方法：无参，带参</li><li>成员方法：看门()</li></ul><p>④ 定义测试类(AnimalDemo)，写代码测试</p><p><strong>代码在Case.CatAndDog里面</strong></p><h2 id="21、修饰符"><a href="#21、修饰符" class="headerlink" title="21、修饰符"></a>21、修饰符</h2><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><h4 id="包的概述和使用"><a href="#包的概述和使用" class="headerlink" title="包的概述和使用"></a>包的概述和使用</h4><p>其实就是文件夹</p><p>作用：对类进行分类管理  </p><p>包的定义格式</p><ul><li>格式：<strong>package 包名；</strong>(多级包用.分开)</li><li>范例：package com.itheima;</li></ul><p>带包的Java类编译和执行</p><ul><li><p>手动建包：</p><ul><li>按照以前的格式编译java文件    javac HelloWorld.java</li><li>手动创建包                          在E盘创建文件夹com，然后在com下创建文件夹itheima</li><li>把class文件放到包的最里面     把HelloWold,class放到com/itheima</li><li>带包执行                             java com.itheima.HelloWorld</li></ul></li><li><p>自动建包：</p><ul><li><p>javac -d .HelloWorld</p></li><li><p>java com.itheima.HelloWorld</p></li></ul></li></ul><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><h4 id="导包的概述和使用"><a href="#导包的概述和使用" class="headerlink" title="导包的概述和使用"></a>导包的概述和使用</h4><p>使用不同包下的类时，使用的时候要写类的全路径，写起来太麻烦了，为了简化带包的操作，Java就提供了导包的功能</p><p>导包的格式</p><ul><li>格式：import 包名；</li><li>范例：import java.util.Scanner</li></ul><h3 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h3><h4 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h4><table><thead><tr><th align="center">修饰符</th><th align="center">同一个类中</th><th align="center">同一个包中子类无关类</th><th align="center">不同包的子类</th><th align="center">不同包的无关类</th></tr></thead><tbody><tr><td align="center">private</td><td align="center">✔</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">默认</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td><td align="center"></td></tr><tr><td align="center">protected</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center"></td></tr><tr><td align="center">public</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td><td align="center">✔</td></tr></tbody></table><h4 id="状态修饰符"><a href="#状态修饰符" class="headerlink" title="状态修饰符"></a>状态修饰符</h4><ul><li>final(最终态)</li><li>static(静态)</li></ul><h5 id="final"><a href="#final" class="headerlink" title="final"></a>final</h5><p><strong>final</strong>关键字是最终的意思，可以修饰成员方法，成员变量，类</p><p><strong>final</strong>修饰特点：</p><ul><li>修饰方法：表明该方法是最终方法，<strong>不能被重写</strong></li><li>修饰变量：表明该变量是常量，<strong>不能再次被赋值</strong></li><li>修饰类：表明该类是最终类，<strong>不能被继承</strong></li></ul><p>final修饰局部变量</p><ul><li><p>变量是基本类型：final修饰指的是基本类型的<strong>数据值</strong>不能发生改变</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116180536636.png" alt="image-20220116180536636"></p></li><li><p>变量是引用变量：final修饰指的是引用类型的<strong>地址值</strong>不能发生改变，但是地址里面的内容是可以发生改变的</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116180611724.png" alt="image-20220116180611724"></p></li></ul><h5 id="static"><a href="#static" class="headerlink" title="static"></a>static</h5><p><strong>static</strong>关键字是静态的意思，可以修饰成员方法，成员变量</p><p><strong>static</strong>修饰的特点：</p><ul><li><p>被类的所有对象共享(这也是我们判断是否使用静态关键字的条件)</p></li><li><p>可以通过类名调用(当然，也可也通过对象名调用)</p></li><li><p>static定义的属性特点：由类名称直接调用，并且在没有实例化对象的时候也可以调用。</p><p><strong>推荐使用类名调用</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116180731541.png" alt="image-20220116180731541"></p></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116180756732.png" alt="image-20220116180756732"></p><p><strong>static</strong>访问特点：</p><p>非静态的成员方法( <strong>public void 方法名字( )</strong> )</p><ul><li>能访问静态的成员变量</li><li>能访问非静态的成员变量</li><li>能访问静态的成员方法</li><li>能访问非静态的成员方法</li></ul><p>静态的成员方法( <strong>public static void 方法名字( )</strong> )</p><ul><li>能访问静态的成员变量</li><li>能访问静态的成员方法</li></ul><p><strong>总结成一句话就是：静态成员方法只能访问静态成员(main方法也是静态的)</strong></p><p><strong>不能通过构造方法创建对象，强制要求你用(类名.方法名)的格式调用方法</strong></p><p><strong>非静态的要创建一个类的对象然后进行调用方法</strong></p><h2 id="22、多态"><a href="#22、多态" class="headerlink" title="22、多态"></a>22、多态</h2><h3 id="多态概述-Polymorphism"><a href="#多态概述-Polymorphism" class="headerlink" title="多态概述:Polymorphism"></a>多态概述:Polymorphism</h3><p>同一个对象，在不同时刻表现出来的不同形态</p><p>举例：猫</p><p>我们可以说猫是猫：<strong>猫 cat = new 猫()；</strong></p><p>我们也可以说猫是动物：<strong>动物 animal = new 猫()；</strong></p><p>这里猫在不同的时刻表现出来了不同的形态，这就是<strong>多态</strong></p><p>多态的前提和体现：</p><ul><li><p>有继承/实现方法</p></li><li><p>有方法重写</p></li><li><p>有父类引用指向子类对象</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116181102155.png" alt="image-20220116181102155"></p></li></ul><h3 id="多态中成员访问特点"><a href="#多态中成员访问特点" class="headerlink" title="多态中成员访问特点"></a>多态中成员访问特点</h3><ul><li><p>成员变量：编译看左边，执行看左边</p></li><li><p><strong>输出的成员变量内容看左边的类中定义的是什么输出就是什么</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117162020788.png" alt="image-20220117162020788"></p></li><li><p>成员方法：编译看左边，执行看右边</p></li><li><p><strong>输出的成员方法内容看右边的类中定义的成员方法是什么输出就是什么</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116181420786.png" alt="image-20220116181420786"></p></li></ul><p>为什么成员变量和成员方法的访问不一样呢？</p><ul><li>因为成员方法有重写，而成员变量没有</li></ul><h3 id="多态的好处和弊端"><a href="#多态的好处和弊端" class="headerlink" title="多态的好处和弊端"></a>多态的好处和弊端</h3><ul><li><p>多态的好处：提高了程序的扩展性</p><p>具体表现：定义方法的时候，使用父类型作为参数，将来在使用的时候，使用具体的子类型参与操作</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116182957576.png" alt="image-20220116182957576"></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116183028928.png" alt="image-20220116183028928"></p></li><li><p>多态的弊端：不能使用子类的特有功能</p></li></ul><h3 id="多态中的转型"><a href="#多态中的转型" class="headerlink" title="多态中的转型"></a>多态中的转型</h3><p><strong>可以使用子类的特有功能</strong></p><ul><li><p>向上转型</p><p>从子到父</p><p>父类引用指向子类对象</p></li><li><p>向下转型</p><p>从父到子</p><p>父类引用转为子类对象</p></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220116201611834.png" alt="image-20220116201611834"></p><h3 id="案例：猫和狗-1"><a href="#案例：猫和狗-1" class="headerlink" title="案例：猫和狗"></a>案例：猫和狗</h3><p>需求：请采用多态的思想实现猫和狗的案例，并在测试类中进行测试</p><p>思路：</p><p>① 定义动物类(Animal)</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法，吃饭()</li></ul><p>② 定义猫类(Cat)，继承动物类</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭()</li></ul><p>③ 定义狗类(Dog)，继承动物类</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭()</li></ul><p>④ 定义测试类(AnimalDemo)，写代码测试</p><p><strong>代码在Case.Polymorphism里面</strong></p><h2 id="23、抽象类"><a href="#23、抽象类" class="headerlink" title="23、抽象类"></a>23、抽象类</h2><h3 id="抽象类概述-abstract"><a href="#抽象类概述-abstract" class="headerlink" title="抽象类概述:abstract"></a>抽象类概述:abstract</h3><p>在Java中，一个<strong>没有方法体</strong>的方法应该定义为<strong>抽象方法</strong>，而类中如果有<strong>抽象方法</strong>，该类必须定义为<strong>抽象类</strong></p><h3 id="抽象类的特点"><a href="#抽象类的特点" class="headerlink" title="抽象类的特点"></a>抽象类的特点</h3><ul><li><p>抽象类和抽象方法必须使用<strong>abstract</strong>关键字修饰</p><p>public <strong>abstract</strong> class 类名{ }</p><p>public <strong>abstract</strong> void eat( );</p></li><li><p>抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类</p></li><li><p>抽象类不能实例化</p><p>抽象类如何实例化呢？参照多态的方式，通过子类对象实例化，这叫抽象类多态</p></li><li><p>抽象类的子类</p><p>要么重写抽象类中的所有抽象方法</p><p>要么是抽象类</p></li></ul><h3 id="抽象类的成员特点"><a href="#抽象类的成员特点" class="headerlink" title="抽象类的成员特点"></a>抽象类的成员特点</h3><ul><li><p>成员变量</p><p>可以是变量也可以是常量</p></li><li><p>构造方法</p><p>有构造方法，但是不能实例化</p><p>那么，构造方法的作用是什么呢？用于子类访问父类数据的初始化</p></li><li><p>成员方法</p><p>可以有抽象方法：限定子类必须完成某些动作</p><p>也可以有非抽象方法：提高代码复用性</p></li></ul><h3 id="案例：猫和狗-2"><a href="#案例：猫和狗-2" class="headerlink" title="案例：猫和狗"></a>案例：猫和狗</h3><p>需求：请采用抽象类的思想实现猫和狗的案例，并在测试类中进行测试</p><p>思路：</p><p>① 定义动物类(Animal)</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法，吃饭();</li></ul><p>② 定义猫类(Cat)，继承动物类</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}</li></ul><p>③ 定义狗类(Dog)，继承动物类</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}</li></ul><p>④ 定义测试类(AnimalDemo)，写代码测试</p><p><strong>代码在Case.Abstract里面</strong></p><h2 id="24、接口"><a href="#24、接口" class="headerlink" title="24、接口"></a>24、接口</h2><h3 id="接口概述-Interface"><a href="#接口概述-Interface" class="headerlink" title="接口概述:Interface"></a>接口概述:Interface</h3><p>接口就是一种<strong>公共的规范标准</strong>，只要符合规范标准，大家都可以通用</p><p>Java中的接口更多的体现在<strong>对行为的抽象</strong></p><h3 id="接口的特点"><a href="#接口的特点" class="headerlink" title="接口的特点"></a>接口的特点</h3><ul><li><p>接口用关键字<strong>interface</strong>修饰</p><p>public <strong>interface</strong> 接口名 { }</p></li><li><p>类实现接口用<strong>implement</strong>表示</p><p>public class 类名 <strong>implements</strong> 接口名 { }</p></li><li><p>接口不能实例化</p><p>接口如何实例化呢？参照多态的方式，通过实现类对象实例化，这叫接口多态</p><p>多态的形式：具体类多态，<strong>抽象类多态，接口多态</strong></p><p>多态的前提：有继承或者实现关系；有方法重写；有父(类/接口)引用指向(子/实现)类对象</p></li><li><p>接口的实现类</p><p>要么重写接口中的所有抽象方法</p><p>要么是抽象类</p></li></ul><h3 id="接口的成员特点"><a href="#接口的成员特点" class="headerlink" title="接口的成员特点"></a>接口的成员特点</h3><ul><li><p>成员变量</p><p>只能是常量</p><p>默认修饰符：<strong>public static final</strong></p></li><li><p>构造方法</p><p>接口没有构造方法，因为接口主要是对行为进行抽象的，是没有具体存在</p><p>一个类如果没有父类，默认继承自<strong>Object</strong>类</p></li><li><p>成员方法</p><p>只能是抽象方法</p><p>默认修饰符：<strong>public abstract</strong></p><p><strong>关于接口中的方法，JDK8和JDK9中有一些新特性，后面再讲解</strong></p></li></ul><h3 id="案例：猫和狗-3"><a href="#案例：猫和狗-3" class="headerlink" title="案例：猫和狗"></a>案例：猫和狗</h3><p>需求：对猫和狗进行训练，他们就可以跳高了，这里加入了跳高功能。请采用抽象类和接口来实现猫狗案例，并在测试类中进行测试</p><p>思路：</p><p>① 定义接口(Jumping)</p><ul><li>成员方法：跳高();</li></ul><p>② 定义抽象动物类(Animal)</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法，吃饭();</li></ul><p>③ 定义具体猫类(Cat)，继承动物类，实现跳高接口</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}，重写跳高方法(){…}</li></ul><p>④ 定义狗类(Dog)，继承动物类，实现跳高接口</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}，重写跳高方法(){…}</li></ul><p>⑤ 定义测试类(AnimalDemo)，写代码测试</p><p><strong>代码在Case.InterfaceCatDog里面</strong></p><h3 id="类和接口的关系"><a href="#类和接口的关系" class="headerlink" title="类和接口的关系"></a>类和接口的关系</h3><ul><li><p>类和类的关系</p><p><strong>继承</strong>关系，只能单继承，但是可以多层继承</p></li><li><p>类和接口的关系</p><p><strong>实现</strong>关系，可以单实现，也可以多实现，还可以在继承一个类的同时实现<strong>多个</strong>接口</p></li><li><p>接口和接口的关系</p><p><strong>继承</strong>关系，可以单继承，也可以多继承</p></li></ul><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul><li><p>成员区别</p><table><thead><tr><th>抽象类</th><th>变量，常量；有构造方法；有抽象方法，也有非抽象方法</th></tr></thead><tbody><tr><td><strong>接口</strong></td><td><strong>常量；抽象方法</strong></td></tr></tbody></table></li><li><p>关系区别</p><table><thead><tr><th>类与类</th><th>继承，单继承</th></tr></thead><tbody><tr><td><strong>类与接口</strong></td><td><strong>实现，可以单实现，也可以多实现</strong></td></tr><tr><td><strong>接口与接口</strong></td><td><strong>继承，单继承，多继承</strong></td></tr></tbody></table></li><li><p>设计理念区别</p><table><thead><tr><th>抽象类</th><th>对类抽象，包括属性、行为</th></tr></thead><tbody><tr><td><strong>接口</strong></td><td><strong>对行为抽象，主要是行为</strong></td></tr></tbody></table></li></ul><p>门和警报的例子</p><p>门：都有open()和close()两个动作，这个时候，我们可以分别使用抽象类和接口来定义这个抽象概念</p><blockquote><p>有些门是带有报警功能的，但有些门却不带有报警功能，如果把报警功能定义为一个抽象类，那么所有的门都会继承到这个报警功能，不是所有的门都会带有报警功能，所以我们可以把报警功能单独设计一个接口，这样当你的门需要报警功能的时候就去实现这个接口，不需要的时候就不实现这个接口。</p></blockquote><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117010648327.png" alt="image-20220117010648327"></p><p><strong>在这里，我们再次强调抽象类是对事物的抽象，而接口是对行为的抽象</strong></p><h3 id="案例：运动员和教练"><a href="#案例：运动员和教练" class="headerlink" title="案例：运动员和教练"></a>案例：运动员和教练</h3><p>需求：我们现在有乒乓球运动员，乒乓球教练和篮球教练。为了出国交流，跟乒乓球相关的人员都需要学习英语。请用所学知识分析，这个案例中有哪些具体类，哪些抽象类，哪些接口，并用代码实现</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117114051630.png" alt="image-20220117114051630"></p><p>思路：</p><p>① 定义说英语接口</p><ul><li>成员方法：说英语();</li></ul><p>② 定义抽象人类</p><ul><li>成员变量：姓名，年龄</li><li>构造方法：无参，带参</li><li>成员方法：get/set方法，吃饭();</li></ul><p>③ 定义抽象教练类，继承人类</p><ul><li>构造方法：无参，带参</li><li>成员方法：教()</li></ul><p>④ 定义抽象运动员类，继承人类</p><ul><li>构造方法：无参，带参</li><li>成员方法：学习();</li></ul><p>⑤ 定义具体篮球教练类，继承教练类</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}，重写教(){…}</li></ul><p>⑥ 定义具体乒乓球教练类，继承教练类，实现说英语接口</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}，重写教(){…}，重写英语(){…}</li></ul><p>⑦ 定义具体篮球运动员类，继承运动员类</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}，重写学习(){…}，</li></ul><p>⑧ 定义具体乒乓球运动员类，继承运动员类，实现说英语接口</p><ul><li>构造方法：无参，带参</li><li>成员方法：重写吃饭(){…}，重写学习(){…}，重写说英语(){…}</li></ul><p>⑨ 定义测试类，写代码测试</p><p><strong>代码在Case.Implements里面</strong></p><h2 id="25、形参和返回值"><a href="#25、形参和返回值" class="headerlink" title="25、形参和返回值"></a>25、形参和返回值</h2><h3 id="类名作为形参和返回值-对象"><a href="#类名作为形参和返回值-对象" class="headerlink" title="类名作为形参和返回值(对象)"></a>类名作为形参和返回值(对象)</h3><ul><li>方法的形参是类名，其实需要的是该类的对象</li><li>方法的返回值是类名，其实返回的是该类的对象</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117172243655.png" alt="image-20220117172243655"></p><h3 id="抽象类名作为形参和返回值-子类对象"><a href="#抽象类名作为形参和返回值-子类对象" class="headerlink" title="抽象类名作为形参和返回值(子类对象)"></a>抽象类名作为形参和返回值(子类对象)</h3><ul><li>方法的形参是抽象类名，其实需要的是该抽象类的子类对象</li><li>方法的返回值是抽象类名，其实返回的是该抽象类的子类对象</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117172319900.png" alt="image-20220117172319900"></p><h3 id="接口名作为形参和返回值-实现类对象"><a href="#接口名作为形参和返回值-实现类对象" class="headerlink" title="接口名作为形参和返回值(实现类对象)"></a>接口名作为形参和返回值(实现类对象)</h3><ul><li>方法的形参是接口名，其实需要的是该接口的实现类对象</li><li>方法的返回值是接口名，其实返回的是该接口的实现类对象</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117172158022.png" alt="image-20220117172158022"></p><h2 id="26、内部类"><a href="#26、内部类" class="headerlink" title="26、内部类"></a>26、内部类</h2><h3 id="内部类概述"><a href="#内部类概述" class="headerlink" title="内部类概述"></a>内部类概述</h3><p>内部类：就是在一个类中定义一个类。</p><p>举例：在一个类A的内部定义一个类B，类B就被称为内部类</p><h3 id="内部类的定义格式"><a href="#内部类的定义格式" class="headerlink" title="内部类的定义格式"></a>内部类的定义格式</h3><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 类名 </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inter</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="内部类的访问特点"><a href="#内部类的访问特点" class="headerlink" title="内部类的访问特点"></a>内部类的访问特点</h3><ul><li>内部类可以直接访问外部类的成员，包括私有</li><li>外部类要访问内部类的成员，必须创建对象</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117173352844.png" alt="image-20220117173352844"></p><h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><p>按照内部类在类中定义的位置不同，可以分为如下两种形式</p><ul><li>在类的成员位置：成员内部类</li><li>在类的局部位置：局部内部类</li></ul><p>成员内部类，外界如何创建对象使用呢？</p><ul><li><p>格式：外部类名.内部类名 对象名 = 外部类对象.内部类对象；</p></li><li><p>范例：Outer.Inner oi = new Outer().new Inner();</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117174552005.png" alt="image-20220117174552005"></p><p><strong>另一种情况：用private修饰的内部类</strong></p><p>(只能在外部类里封装一个调用方法来调用内部类，其他类想调用直接定义一个外部类对象使用内部类的调用方法即可)</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117174708577.png" alt="image-20220117174708577"></p></li></ul><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>局部内部类是在方法中定义的类，所以外界是无法直接使用，需要在方法内部创建对象并使用</p><p>该类可以直接访问外部类的成员，也可以访问方法内的局部变量</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117175556595.png" alt="image-20220117175556595"></p><p>匿名内部类</p><p>前提：存在一个类或者接口，这里的类可以是具体类也可以是抽象类</p><ul><li>格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> 类名或者接口名() &#123;</span><br><span class="line">    重写方法;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>范例</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Inter() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>本质：是一个继承了该类或者实现了该接口的子类匿名对象</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117183920222.png" alt="image-20220117183920222"></p><p><strong>调用匿名内部类中的方法</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117184424978.png" alt="image-20220117184424978"></p><p><strong>这个是把匿名内部类当一个对象赋值给 i 然后用 i 去实现调用方法</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117184611864.png" alt="image-20220117184611864"></p><h3 id="匿名内部类在开发中的使用"><a href="#匿名内部类在开发中的使用" class="headerlink" title="匿名内部类在开发中的使用"></a>匿名内部类在开发中的使用</h3><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117194347263.png" alt="image-20220117194347263"></p><h2 id="27、常用API"><a href="#27、常用API" class="headerlink" title="27、常用API"></a>27、常用API</h2><h3 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h3><h4 id="Math描述"><a href="#Math描述" class="headerlink" title="Math描述"></a>Math描述</h4><p>Math包含执行基本数字运算的方法</p><p><strong>没有构造方法，如何使用类中的成员呢？</strong></p><p>看类的成员是否都是静态的，如果是，通过类名就可以直接调用</p><h4 id="Math类的常用方法"><a href="#Math类的常用方法" class="headerlink" title="Math类的常用方法"></a>Math类的常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static int abs(int a)</td><td>返回参数的绝对值</td></tr><tr><td>public static double ceil(double a)</td><td>返回大于或等于参数的最小double值，等于一个整数</td></tr><tr><td>public static double floor(double a)</td><td>返回小于或等于参数的最大double值，等于一个整数</td></tr><tr><td>public static int round(float a)</td><td>按照四舍五入返回最接近参数的int</td></tr><tr><td>public static int max(int a,int b)</td><td>返回两个int值中的较大值</td></tr><tr><td>public static int min(int a,int b)</td><td>返回两个int值中的较小值</td></tr><tr><td>public static double pow(double a,double b)</td><td>返回a的b次幂的值</td></tr><tr><td>public static double random()</td><td>返回值为double的正值，[0.0，1.0)</td></tr></tbody></table><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117200504399.png" alt="image-20220117200504399"></p><h3 id="System"><a href="#System" class="headerlink" title="System"></a>System</h3><p>System包含几个有用的类字段和方法，它不能被实例化</p><h4 id="System类的常用方法"><a href="#System类的常用方法" class="headerlink" title="System类的常用方法"></a>System类的常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止当前运行的Java虚拟机，非零表示异常终止</td></tr><tr><td>public static long currentTimeMillis()</td><td>返回当前时间(以毫秒为单位)</td></tr></tbody></table><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220117201535984.png" alt="image-20220117201535984"></p><h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>Object是类层次结构的根，每个类都可以将Object作为超类。所以类都直接或者间接的继承自该类</p><p><strong>构造方法：</strong>public Object()</p><p>回想面向对象中，为什么说子类的构造方法默认访问的是父类的无参构造方法？</p><p>因为它们的顶级父类只有无参构造方法</p><h4 id="Object类的常用方法"><a href="#Object类的常用方法" class="headerlink" title="Object类的常用方法"></a>Object类的常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String toString()</td><td>返回对象的字符串表示形式。建议所有子类重写该方法，自动生成</td></tr><tr><td>public boolean equals(Object obj)</td><td>比较对象是否相等。默认比较地址值，重写可以比较内容，自动生成</td></tr></tbody></table><h4 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a>toString()</h4><ul><li><p>返回对象的字符串表示形式。</p></li><li><p>通常， <code>toString</code>方法返回一个“以文本形式表示”此对象的字符串。  结果应该是简洁易懂的表示形式，便于人们阅读。</p></li><li><p>建议所有子类都重写此方法。 </p></li><li><p>类<code>Object</code>的<code>toString</code>方法返回一个字符串，该字符串由对象是其实例的类的名称，符号处的字符’  <code>@</code> ‘和该对象的哈希码的无符号十六进制表示组成。 换句话说，此方法返回的字符串等于： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getClass().getName() + <span class="string">&#x27;@&#x27;</span> + Integer.toHexString(hashCode())</span><br></pre></td></tr></table></figure></li><li><p>所以，一般建议在父类中重写toString()方法，这样我们就可以直接输出创建的对象</p></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220118002153610.png" alt="image-20220118002153610"></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220118002228385.png" alt="image-20220118002228385"></p><h4 id="equals"><a href="#equals" class="headerlink" title="equals()"></a>equals()</h4><ul><li><p>指示其他某个对象是否“等于”该对象。</p></li><li><p>请注意，通常有必要在重写此方法时重写<code>hashCode</code>方法，以维护<code>hashCode</code>方法的常规协定，该<code>hashCode</code>规定相等的对象必须具有相等的哈希码。</p></li><li><p>所以一般建议在父类中重写equals()方法，这样我们就可以直接判断两个对象的内容是否相同</p></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220118003858041.png" alt="image-20220118003858041"></p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>排序：将一组数据按照固定的鬼册进行排列</p><p>冒泡排序**(Bubble Sort)**：一种排序的方式，对要进行排序的数据中相邻的数据进行两两比较，将较大的数据放在后面，依次对所有的数据进行操作，直至所有数据按要求完成排序</p><ul><li>如果有n个数据进行排序，总共需要比较n-1次</li><li>每一次比较完毕，下一次的比较就会少一个数据参与</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//定义一个数组</span></span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">24</span>, <span class="number">69</span>, <span class="number">80</span>, <span class="number">57</span>, <span class="number">13</span>&#125;;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序前:&quot;</span> + arrayToString(arr));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//一次性比较完</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; arr.length; a++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span> - a; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[i] &gt; arr[i + <span class="number">1</span>]) &#123;</span><br><span class="line">                    <span class="keyword">int</span> temp = arr[i];</span><br><span class="line">                    arr[i] = arr[i + <span class="number">1</span>];</span><br><span class="line">                    arr[i + <span class="number">1</span>] = temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;排序后：&quot;</span> + arrayToString(arr));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把数组中的元素按照指定的规则组成一个字符串：[元素1,元素2,...]</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">arrayToString</span><span class="params">(<span class="keyword">int</span>[] arr)</span> </span>&#123;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        sb.append(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                sb.append(arr[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                sb.append(arr[i]).append(<span class="string">&quot;, &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        sb.append(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">        String s = sb.toString();</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Arrays类的概述和常用方法"><a href="#Arrays类的概述和常用方法" class="headerlink" title="Arrays类的概述和常用方法"></a>Arrays类的概述和常用方法</h4><p>Arrays类其实就是一个<strong>工具类</strong>(更多内容请在帮助文档中查看)</p><p>Arrays类包含用于操作数组的各种方法</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(int[] a)</td><td>返回指定数组的内容的字符串表示形式</td></tr><tr><td>public static void sort(int[] a)</td><td>按照数字顺序排序指定的数组</td></tr></tbody></table><p>工具类的设计思想：</p><ul><li>构造方法用<strong>private</strong>修饰</li><li>成员用<strong>public static</strong>修饰</li></ul><h3 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h3><h4 id="基本类型包装类概述"><a href="#基本类型包装类概述" class="headerlink" title="基本类型包装类概述"></a>基本类型包装类概述</h4><p>将基本数据类型封装成对象的好处在于可以在对象中定义更多的功能方法操作该数据</p><p>常用的操作之一：用于基本数据类型与字符串之间的转换</p><p><strong>(其他包装类可以去帮助文档中学习更多方法)</strong></p><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><h4 id="Integer类的概述和使用"><a href="#Integer类的概述和使用" class="headerlink" title="Integer类的概述和使用"></a>Integer类的概述和使用</h4><p>Integer：包装一个对象中的原始类型int的值</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Integer(int value)</td><td>根据int值创建Integer对象**(过时)**</td></tr><tr><td>public Integer(String s)</td><td>根据String值创建Integer对象**(过时)**</td></tr><tr><td>public static Integer valueOf(int i)</td><td>返回表示指定的int值的Integer实例</td></tr><tr><td>public static Integer valueOf(String s)</td><td>返回一个保存指定值的Integer对象String</td></tr></tbody></table><p><strong>请注意这里是.valueOf 不是 .getInteger 后者功能不同，建议在帮助文档中学习</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220118022227567.png" alt="image-20220118022227567"></p><h4 id="int和String的相互转换"><a href="#int和String的相互转换" class="headerlink" title="int和String的相互转换"></a>int和String的相互转换</h4><p>基本类型包装类的最常见操作就是：用于基本类型和字符串之间的相互转换</p><h5 id="int转换为String"><a href="#int转换为String" class="headerlink" title="int转换为String"></a>int转换为String</h5><ul><li>public static String **valueOf(int i)**：返回int参数的字符串表示形式。该方法是String类中的方法</li></ul><h5 id="String转换为int"><a href="#String转换为int" class="headerlink" title="String转换为int"></a>String转换为int</h5><ul><li><p>public static int **parseInt(String s)**：将字符串解析为int类型。该方法是Integer类中的方法</p></li><li><p>public static int **parseUnsignedInt(String s)**：这也是将字符串解析为int类型，但是传入的字符串的值不能带有符号</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IntegerDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int 和 string 的相互转换</span></span><br><span class="line">        <span class="comment">//int -&gt; string</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">100</span>;</span><br><span class="line">        <span class="comment">//方式1(不专业)</span></span><br><span class="line">        String s1 = <span class="string">&quot;&quot;</span> + num;</span><br><span class="line">        System.out.println(s1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2推荐(使用String类中的valueOf方法)</span></span><br><span class="line">        String s2 = String.valueOf(num);</span><br><span class="line">        System.out.println(s2);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String -&gt; int</span></span><br><span class="line">        String num1 = <span class="string">&quot;100&quot;</span>;</span><br><span class="line">        <span class="comment">//方式1(String -&gt; Integer -&gt; int)</span></span><br><span class="line">        Integer i = Integer.valueOf(num1);</span><br><span class="line">        <span class="comment">//使用Integer类中的intValue方法把Integer类型转换为int类型</span></span><br><span class="line">        <span class="keyword">int</span> x = i.intValue();</span><br><span class="line">        System.out.println(x);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//方式2推荐使用(使用Integer类中的parseInt方法)</span></span><br><span class="line">        <span class="keyword">int</span> y = Integer.parseInt(num1);</span><br><span class="line">        System.out.println(y);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个parseUnsignedInt方法中插入的值不能带符合(不推荐使用)</span></span><br><span class="line">        <span class="keyword">int</span> z = Integer.parseUnsignedInt(num1);</span><br><span class="line">        System.out.println(z);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：字符串中的数据排序"><a href="#案例：字符串中的数据排序" class="headerlink" title="案例：字符串中的数据排序"></a>案例：字符串中的数据排序</h4><p>需求：有一个字符串：”91 27 46 38 50”，请用程序实现最终输出结果是：”27 38 46 50 91”</p><p>思路：</p><p>① 定义一个字符串</p><p>② 把字符串中的数字数据存储到一个int类型的数组中</p><ul><li>得到字符串中每一个数字数据？</li><li>public String[] split(String regex) ：用用regex作为分隔符分割数组</li><li>定义一个int数组，把String[]数组中的每一个元素存储到int数组中</li><li>public static int parseInt(String s)</li></ul><p>③ 对int数组进行排序</p><p>④ 把排序后的int数组中的元素进行拼接得到一个字符串，这里拼接采用StringBuilding来实现</p><p>⑤ 输出结果</p><p><strong>代码在Case.StringInteger里面</strong></p><h4 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h4><ul><li>装箱：把基本数据类型转换为对应的包装类类型</li><li>拆箱：把包装类类型转换为对应的基本数据类型</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220118034049833.png" alt="image-20220118034049833"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer i =<span class="number">100</span>;<span class="comment">// 自动装箱</span></span><br><span class="line">i +=<span class="number">200</span>;<span class="comment">// i = i + 200;i + 200 是自动拆箱; i = i + 200;是自动装箱</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>在使用包装类类型的时候，如果做操作，最好先判断是否为null</p><p>我们推荐的是，<strong>只要是对象，在使用前就必须进行不为null的判断</strong></p><h4 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h4><h5 id="Date类概述和构造方法"><a href="#Date类概述和构造方法" class="headerlink" title="Date类概述和构造方法"></a>Date类概述和构造方法</h5><p>Date代表了一个特点的时间，精确到毫秒</p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public Date()</td><td>分配一个Date对象，并初始化，以便它代表它被分配的时间，精确到毫秒</td></tr><tr><td>public Date(long date)</td><td>分配一个Date对象，并将其初始化为表示从标准基准时间起指定的毫秒数</td></tr></tbody></table><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220118035646947.png" alt="image-20220118035646947"></p><h5 id="Date类的常用方法"><a href="#Date类的常用方法" class="headerlink" title="Date类的常用方法"></a>Date类的常用方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public long getTime()</td><td>获取的是日期对象从1970年1月1日00:00:00到现在的毫秒值</td></tr><tr><td>public void setTime(long time)</td><td>设置时间，给的是毫秒值</td></tr></tbody></table><p><img src="C:\Users\13540\AppData\Roaming\Typora\typora-user-images\image-20220118040839288.png" alt="image-20220118040839288"></p><h5 id="SimpleDateFormat类概述"><a href="#SimpleDateFormat类概述" class="headerlink" title="SimpleDateFormat类概述"></a>SimpleDateFormat类概述</h5><p>SimpleDateFormat是一个具体的类，用于以区域设置敏感的方式格式化和解析日期，我们重点学习<strong>日期格式化和解析</strong></p><p>日期和时间格式由日期和时间模式字符串指定，在日期和时间模式字符串中，从 ‘A’ 到 ‘Z’ 以及从 ‘a’ 到 ‘z’ 引号的字母被解释为表示日期或时间字符串的组件的模式字母</p><p>常用的模式字母以及对应关系如下：</p><table><thead><tr><th align="center">字母</th><th align="center">关系</th></tr></thead><tbody><tr><td align="center">y</td><td align="center">年</td></tr><tr><td align="center">M</td><td align="center">月</td></tr><tr><td align="center">d</td><td align="center">日</td></tr><tr><td align="center">H</td><td align="center">时</td></tr><tr><td align="center">m</td><td align="center">分</td></tr><tr><td align="center">s</td><td align="center">秒</td></tr></tbody></table><h5 id="SimpleDateFormat类的构造方法"><a href="#SimpleDateFormat类的构造方法" class="headerlink" title="SimpleDateFormat类的构造方法"></a>SimpleDateFormat类的构造方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public SimpleDateFormat()</td><td>构造一个SimpleDateFormat，使用默认模式和日期格式</td></tr><tr><td>public SimpleDateFormat(String oattern)</td><td>构造一个SimpleDateFormat使用给定的模式和默认的日期格式</td></tr></tbody></table><h5 id="SimpleDateFormat类格式化和解析时间"><a href="#SimpleDateFormat类格式化和解析时间" class="headerlink" title="SimpleDateFormat类格式化和解析时间"></a>SimpleDateFormat类格式化和解析时间</h5><p><strong>格式化</strong>( 从Date到String )</p><ul><li>public final **String format(Date date)**：将日期格式化成日期/时间字符串</li></ul><p><strong>解析</strong>( 从String到Date )</p><ul><li>public Date **parse(String source)**：从给定字符串的开始解析文本以生成日期</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleDateFormatDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//格式化：从Date到String(使用format方法)</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>); <span class="comment">//yyyy年MM月dd日 HH:mm:ss也可以</span></span><br><span class="line">        String s = sdf.format(d);</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从String到Date(使用parse方法)</span></span><br><span class="line">        String ss = <span class="string">&quot;2022-1-18 04:36:00&quot;</span>;</span><br><span class="line">        SimpleDateFormat sdf1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        Date dd = sdf1.parse(ss);   <span class="comment">//使用alt+enter解决异常问题</span></span><br><span class="line">        System.out.println(dd);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>yyyy-MM-dd HH:mm:ss    年/月/日    时/分/秒<br>直接新建SimpleDateFormat类的对象，用带参构造方法定义格式，格式如上↑<br>再然后就是获取当前时间了，就是日期类：Date d = new Date();<br>再用SimpleDateFormat新建的对象s，调用它的format方法，传日期对象d进去，返回的是String类型<br>这时候再输出，就会按照我们刚才定义的格式  年/月/日  时:分:秒  输出了</p></blockquote><h5 id="案例：日期工具类"><a href="#案例：日期工具类" class="headerlink" title="案例：日期工具类"></a>案例：日期工具类</h5><p>需求：定义一个日期工具类(DateUtils)，包含两个方法：把日期转换为指定格式的字符串；把字符串解析为指定格式的日期，然后定义一个测试类(DateDemo)，测试日期工具类的方法</p><p>思路：</p><p>① 定义日期工具类(DateUtils)</p><ul><li>构造方法私有</li><li>成员方法静态</li></ul><p>② 定义一个方法dateToString，用于把日期转换为指定格式的字符串</p><ul><li>返回类型：String</li><li>参数：Date date，String format</li></ul><p>③ 定义一个方法stringToDate，用于字符串解析为指定格式的日期</p><ul><li>返回值类型：Date</li><li>参数：String s，String format</li></ul><p>④ 定义测试类DateDemo，调用日期工具类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        <span class="comment">//创建日期对象</span></span><br><span class="line">        Date d = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="comment">//Date转String</span></span><br><span class="line">        String s = DateUtils.dateToString(d, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//String转Date</span></span><br><span class="line">        Date d1 = DateUtils.stringToDate(s, <span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">//日期工具类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtils</span> </span>&#123;</span><br><span class="line">    <span class="comment">//把构造方法私有化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DateUtils</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把日期转为指定格式的字符串</span></span><br><span class="line"><span class="comment">        返回值类型：String</span></span><br><span class="line"><span class="comment">        参数：Date date，String format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">dateToString</span><span class="params">(Date date, String format)</span> </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        String s = sdf.format(date);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        把字符串解析为指定格式的日期</span></span><br><span class="line"><span class="comment">        返回值类型：Date</span></span><br><span class="line"><span class="comment">        参数：String s，String format</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">stringToDate</span><span class="params">(String s, String format)</span> <span class="keyword">throws</span> ParseException </span>&#123;</span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(format);</span><br><span class="line">        Date d = sdf.parse(s);</span><br><span class="line">        <span class="keyword">return</span> d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Calendar类概述"><a href="#Calendar类概述" class="headerlink" title="Calendar类概述"></a>Calendar类概述</h5><p>Calendar为某一时刻和一组日历字段之间的转换提供了一些方法，并为操作日历字段提供了一些<strong>方法</strong></p><p>Calendar提供了一个类方法<strong>getInstance</strong>用于获取<strong>Calendar</strong>对象，其日历字段以使用当前日期和时间初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Calendar rightNow = Calendar.getInstance();</span><br></pre></td></tr></table></figure><h5 id="Calendar的常用方法"><a href="#Calendar的常用方法" class="headerlink" title="Calendar的常用方法"></a>Calendar的常用方法</h5><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int filed)</td><td>返回给定日历字段的值</td></tr><tr><td>public abstract void add(int field,int amount)</td><td>根据日历的规则，将指定的时间量添加或减去给定的日历字段</td></tr><tr><td>public final void set(int year,int month,int date)</td><td>设置当前的日历的年月日</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Year;</span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalendarDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建对象</span></span><br><span class="line">        Calendar c = Calendar.getInstance(); <span class="comment">//多态的形式创建对象</span></span><br><span class="line">        <span class="comment">//System.out.println(c);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int get(int filed)</span></span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month = c.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">//月份从0开始</span></span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year + <span class="string">&quot;年&quot;</span> + month + <span class="string">&quot;月&quot;</span> + date + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public abstract void add(int field,int amount)</span></span><br><span class="line">        <span class="comment">//根据日历的规则，将指定的时间量添加或减去给定的日历字段</span></span><br><span class="line">        c.add(Calendar.YEAR, -<span class="number">3</span>); <span class="comment">//年份-3</span></span><br><span class="line">        <span class="keyword">int</span> year1 = c.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month1 = c.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">//月份从0开始</span></span><br><span class="line">        <span class="keyword">int</span> date1 = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year1 + <span class="string">&quot;年&quot;</span> + month1 + <span class="string">&quot;月&quot;</span> + date1 + <span class="string">&quot;日&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public final void set(int year,int month,int date)</span></span><br><span class="line">        <span class="comment">//设置当前的日历的年月日</span></span><br><span class="line">        c.set(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">int</span> year2 = c.get(Calendar.YEAR);</span><br><span class="line">        <span class="keyword">int</span> month2 = c.get(Calendar.MONTH) + <span class="number">1</span>; <span class="comment">//月份从0开始</span></span><br><span class="line">        <span class="keyword">int</span> date2 = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(year2 + <span class="string">&quot;年&quot;</span> + month2 + <span class="string">&quot;月&quot;</span> + date2 + <span class="string">&quot;日&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="案例：二月天"><a href="#案例：二月天" class="headerlink" title="案例：二月天"></a>案例：二月天</h5><p>需求：获取任意一年的二月份有多少天</p><p>思路：</p><p>① 键盘录入任意的年份</p><p>② 设置日历对象的年、月、日</p><ul><li>年：来自于键盘录入</li><li>月：设置为3月，月份是从0开始的，所以设置的值为2</li><li>日：设置为1日</li></ul><p>③ 3月1日往前推一天，就是2月的最后一天</p><p>④ 获取这一天输出即可</p><p><strong>代码放在Case.Twomonthday里面</strong></p><h2 id="28、异常"><a href="#28、异常" class="headerlink" title="28、异常"></a>28、异常</h2><h3 id="异常概述"><a href="#异常概述" class="headerlink" title="异常概述"></a>异常概述</h3><p>异常：就是程序出现了不正常的情况</p><h3 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h3><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220128143438371.png" alt="image-20220128143438371"></p><p>Error：严重问题，不需要处理</p><p>Exception：称为异常类，它表示程序本身可以处理的问题</p><ul><li>RuntimeException：在编译期是不检查的，出现问题后，需要我们回来修改代码</li><li>非RuntimeException：编译期就必须处理的，否则程序不能通过编译，就更不能正常运行了</li></ul><h3 id="JVM的默认处理方案"><a href="#JVM的默认处理方案" class="headerlink" title="JVM的默认处理方案"></a>JVM的默认处理方案</h3><p>如果程序出现了问题，我们没有做任何处理，最终JVM会做默认的处理</p><ul><li>把异常的名称，异常原因以及异常出现的位置等信息输出在了控制台</li><li>程序停止执行</li></ul><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><p>如果程序出现了问题，我们需要自己来处理，有两种方案：</p><ul><li>try … catch … </li><li>throws</li></ul><h3 id="异常处理之try…catch…"><a href="#异常处理之try…catch…" class="headerlink" title="异常处理之try…catch…"></a>异常处理之try…catch…</h3><ul><li><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    可能出现的异常的代码;</span><br><span class="line">&#125; <span class="keyword">catch</span>(异常类名 变量名) &#123;</span><br><span class="line">    异常的处理代码;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>执行流程：</p><ul><li>程序从try里面的代码开始执行</li><li>出现异常，会自动生成一个一场类对象，该异常对象将被提交给Java运行时系统</li><li>当Java运行时系统接收到异常对象时，会到catch中找匹配的异常类，找到后进行异常的处理</li><li>执行完毕之后，程序还可以继续往下执行</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你访问的数组的索引不存在&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Throwable的成员方法"><a href="#Throwable的成员方法" class="headerlink" title="Throwable的成员方法"></a>Throwable的成员方法</h3><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回此throwable的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回此可抛出的简短描述</td></tr><tr><td>public void printStackTrace()</td><td>把异常的错误信息输出在控制台</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">        method();</span><br><span class="line">        System.out.println(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">            <span class="comment">//Index 3 out of bounds for length 3</span></span><br><span class="line">            System.out.println(e.toString());</span><br><span class="line">            <span class="comment">//java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3</span></span><br><span class="line"><span class="comment">            at Exception.ExceptionDemo.method(ExceptionDemo.java:13)</span></span><br><span class="line"><span class="comment">            at Exception.ExceptionDemo.main(ExceptionDemo.java:6)</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译时异常和运行时异常的区别"><a href="#编译时异常和运行时异常的区别" class="headerlink" title="编译时异常和运行时异常的区别"></a>编译时异常和运行时异常的区别</h3><p>Java中的异常被分为两大类：<strong>编译时异常</strong>和<strong>运行时异常</strong>，也被称为<strong>受检异常</strong>和<strong>非受检异常</strong></p><p>所有的RuntimeException类及其子类被称为运行时异常，其他的异常都是编译时异常</p><ul><li>编译时异常：必须显示处理，否则程序就会发生错误，无法通过编译</li><li>运行时异常：无需显示处理，也可以和编译时异常一样处理</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        method();</span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编译时异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String s = <span class="string">&quot;2022-01-28&quot;</span>;</span><br><span class="line">            SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            Date d = sdf.parse(s);</span><br><span class="line">            System.out.println(d);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行时异常</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">            System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="异常处理之throws"><a href="#异常处理之throws" class="headerlink" title="异常处理之throws"></a>异常处理之throws</h3><p>虽然我们通过try…catch…可以对异常进行处理，但是并不是所有的情况我们都有权限进行异常的处理</p><p>也就是说，有些时候可能出现的异常时我们处理不了的，这个时候该怎么办呢？</p><p>针对这种情况，Java提供了<strong>throws</strong>的处理方案</p><p>格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">throws</span> 异常类名;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：这个格式是跟在方法的括号后面的</p><ul><li><strong>编译时异常必须要进行处理</strong>，有两种处理方案：try…catch…或者throws，如果采用throws这种方案，将来谁调用这个方法谁进行处理</li><li><strong>运行时异常可以不处理</strong>，出现问题后，需要我们回来修改代码</li></ul><blockquote><p>throws只是抛出异常，但不能解决异常，真正要解决异常还是得用try…catch…去处理，抛出异常可以不在异常方法中进行处理而让调用者去进行处理。</p></blockquote><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ul><li>格式：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 异常类名 <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    无参构造</span><br><span class="line">    带参构造</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>范例：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//无参构造</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//带参构造</span></span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="throws和throw的区别"><a href="#throws和throw的区别" class="headerlink" title="throws和throw的区别"></a>throws和throw的区别</h4><p><strong>throws</strong></p><ul><li>用在方法声明后面，跟的是异常类名</li><li>表示抛出异常，由该方法的调用者来处理</li><li>表示出现异常的一种可能性，并不一定会发生这些异常</li></ul><p><strong>throw</strong></p><ul><li>用在方法体内，跟的是异常对象名</li><li>表示抛出异常，由方法体内的语句处理</li><li>执行throw一定抛出了某种异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScoreException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScoreException</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkScore</span><span class="params">(<span class="keyword">int</span> score)</span> <span class="keyword">throws</span> ScoreException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (score &lt; <span class="number">0</span> || score &gt; <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ScoreException(<span class="string">&quot;你输入的分数有误，有效范围在0-100&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;分数正常&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ScoreException </span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入你的分数：&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> score = sc.nextInt();</span><br><span class="line">        Teacher t = <span class="keyword">new</span> Teacher();</span><br><span class="line">        t.checkScore(score);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="29、集合进阶"><a href="#29、集合进阶" class="headerlink" title="29、集合进阶"></a>29、集合进阶</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><p><strong>集合知识回顾</strong></p><p>集合类特点：提供一种存储空间可变的存储模型，存储的数据容量可以随时发生改变</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220128160809026.png" alt="image-20220128160809026"></p><h4 id="Collection集合概述和使用"><a href="#Collection集合概述和使用" class="headerlink" title="Collection集合概述和使用"></a>Collection集合概述和使用</h4><p>collection集合概述</p><ul><li>是单例接口的顶层接口，它表示一组对象，这些对象也称为Collection的元素</li><li>JDk不提供此接口的任何直接实现，它提供更具体的子接口(如Set和List)实现</li></ul><p>创建Collection集合的对象</p><ul><li>多态的方式</li><li>具体的实现类ArrayList</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Collection集合对象</span></span><br><span class="line">        Collection&lt;String&gt; c = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素：boolean add(E e)</span></span><br><span class="line">        c.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出集合对象</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Collection集合的常用方法"><a href="#Collection集合的常用方法" class="headerlink" title="Collection集合的常用方法"></a>Collection集合的常用方法</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素</td></tr><tr><td>boolean remove(Object o)</td><td>从集合中移除指定的元素</td></tr><tr><td>void clear()</td><td>清空集合中的元素</td></tr><tr><td>boolean contains(Object o)</td><td>判断集合中是否存在指定的元素</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中元素的个数</td></tr></tbody></table><h4 id="Collection集合的遍历"><a href="#Collection集合的遍历" class="headerlink" title="Collection集合的遍历"></a>Collection集合的遍历</h4><p>Iterator：迭代器，集合的专用遍历方式</p><ul><li><p>Iterator<E> iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</p><p>格式：<strong>Iterator<E> 方法名字 = 集合名字.iterator()</strong></p></li><li><p>迭代器是通过集合的<strong>iterator()方法</strong>得到的，所以我们说塔是依赖于集合而存在的</p></li></ul><p>Iterator中的常用方法</p><ul><li>E next()：返回迭代中的下一个元素</li><li>boolean hasNext()：如果迭代具有更多元素，则返回true</li></ul><p><strong>集合遍历</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator&lt;E&gt; iterator():返回该集合中元素的迭代器，通过集合的iterator()方法得到</span></span><br><span class="line">        Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(iter.next());</span></span><br><span class="line">            String s = iter.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IteratorDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Iterator&lt;E&gt; iterator():返回该集合中元素的迭代器，通过集合的iterator()方法得到</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line"><span class="comment">//            System.out.println(iter.next());</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>集合的使用步骤</strong></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210151958987.png" alt="image-20220210151958987"></p><h4 id="Collection集合存储学生对象并遍历"><a href="#Collection集合存储学生对象并遍历" class="headerlink" title="Collection集合存储学生对象并遍历"></a>Collection集合存储学生对象并遍历</h4><p>需求：创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><p>思路：</p><p>① 定义学生类</p><p>② 创建Collection集合对象</p><p>③ 创建学生对象</p><p>④ 把学生添加到集合</p><p>⑤ 遍历集合(迭代器方式)</p><p><strong>代码在Case.Iterator里面</strong></p><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><h4 id="List集合该书额和特点"><a href="#List集合该书额和特点" class="headerlink" title="List集合该书额和特点"></a>List集合该书额和特点</h4><p><strong>List集合概述</strong></p><ul><li>有序集合(也称为序列)，用户可以精确控制列表中每个元素的插入位置。用户可以通过整数索引访问元素，并搜索列表中的元素</li><li>与Set集合不同，列表通常允许重复的元素</li></ul><p><strong>List集合特点</strong></p><ul><li>有序：存储和取出的元素顺序一致</li><li>可重复：存储的元素可以重复</li></ul><h4 id="List集合的遍历"><a href="#List集合的遍历" class="headerlink" title="List集合的遍历"></a>List集合的遍历</h4><p>Iterator：迭代器，集合的专用遍历方式</p><ul><li><p>Iterator<E> iterator()：返回此集合中元素的迭代器，通过集合的iterator()方法得到</p><p>格式：<strong>Iterator<E> 方法名字 = 集合名字.iterator()</strong></p></li><li><p>迭代器是通过集合的<strong>iterator()方法</strong>得到的，所以我们说塔是依赖于集合而存在的</p></li></ul><p>Iterator中的常用方法</p><ul><li>E next()：返回迭代中的下一个元素</li><li>boolean hasNext()：如果迭代具有更多元素，则返回true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建List集合对象</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        list.add(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;World&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;Java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        Iterator&lt;String&gt; iter = list.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iter.hasNext()) &#123;</span><br><span class="line">            String s = iter.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="List集合特有方法"><a href="#List集合特有方法" class="headerlink" title="List集合特有方法"></a>List集合特有方法</h4><p><strong>List集合的特有方法Collection集合是没有的，但是它的儿子ArrayList是有的</strong></p><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>在此集合中的指定位置插入指定的元素</td></tr><tr><td>E remove(int index)</td><td>删除指定索引处的元素，返回被删除的元素</td></tr><tr><td>E set(int index,E element)</td><td>修改指定索引处的元素，返回被修改的元素</td></tr><tr><td>E get(int index)</td><td>返回指定索引处的元素</td></tr></tbody></table><h4 id="案例：List集合存储学生对象并遍历"><a href="#案例：List集合存储学生对象并遍历" class="headerlink" title="案例：List集合存储学生对象并遍历"></a>案例：List集合存储学生对象并遍历</h4><p>需求：创建一个存储学生对象的集合，存储3个学生对象，使用程序实现在控制台遍历该集合</p><p>思路：</p><p>① 定义学生类</p><p>② 创建List集合对象</p><p>③ 创建学生对象</p><p>④ 把学生添加到集合</p><p>⑤ 遍历集合(迭代器方式，for循环方式)</p><p><strong>代码在Case.List里面</strong></p><h4 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h4><p><strong>并发修改异常</strong></p><ul><li>ConcurrentModificationException</li></ul><p><strong>产生原因</strong></p><ul><li>迭代器遍历的过程中，通过集合对象修改了集合中元素的长度，造成了迭代器获取元素中判断预期修改值和实际修改值不一致</li></ul><p><strong>解决方法</strong></p><ul><li>用<strong>for</strong>循环遍历，然后用集合对象做对应的操作即可</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">    Student ls = list.get(i);</span><br><span class="line">    System.out.println(ls.getName() + <span class="string">&quot;,&quot;</span> + ls.getAge());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h4><p><strong>ListIterator：列表迭代器</strong></p><ul><li>通过List集合的listIterator()方法得到，所以说它是List集合特有的迭代器</li><li>用于允许程序员沿任意一个方向遍历列表的列表迭代器，在迭代期间修改列表，并获取列表中迭代器的当前位置</li></ul><p><strong>ListIterator中的常用方法</strong></p><ul><li>void add(E e)：将指定的元素插入列表</li><li>E next()：返回迭代器中的下一个元素</li><li>boolean hasNext()：如果迭代具有更多元素，则返回true</li><li>E previous()：返回列表中的上一个元素</li><li>boolean hasPrevious()：如果此列表迭代器在相反方向遍历列表时具有更多元素，则返回true</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210165345540.png" alt="image-20220210165345540"></p><h4 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h4><p><strong>增强for</strong>：简化数组和Collection集合的遍历</p><ul><li>实现Iterable接口的类允许其对象成为增强型for语句的目标</li><li>它是JDK5之后出现的，其内部原理是一个Iterator迭代器</li></ul><p><strong>增强for的格式</strong></p><ul><li><p>格式：</p></li><li><p>```java<br>for(元素数据类型 变量名:数组或者Collection集合) {</p><pre><code>//在此处使用变量即可，该变量就是元素</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 范例：</span><br><span class="line"></span><br><span class="line">- ```java</span><br><span class="line">  int[] arr = &#123;1,2,3,4,5&#125;;</span><br><span class="line">  for(int i : arr) &#123;</span><br><span class="line">  System.out.println(i);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210172310421.png" alt="image-20220210172310421"></p><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>数据结构是计算机存储、组织数据的方式。是指相互之间存在一种或多种特定关系的数据元素的集合</p><p>通常情况下，精心选择的数据结构可以带来更高的运行或者存储效率</p><h4 id="常见数据结构之栈"><a href="#常见数据结构之栈" class="headerlink" title="常见数据结构之栈"></a>常见数据结构之栈</h4><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210172712000.png" alt="image-20220210172712000"></p><h4 id="常见数据结构之队列"><a href="#常见数据结构之队列" class="headerlink" title="常见数据结构之队列"></a>常见数据结构之队列</h4><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210172912705.png" alt="image-20220210172912705"></p><h4 id="常见数据结构之数组"><a href="#常见数据结构之数组" class="headerlink" title="常见数据结构之数组"></a>常见数据结构之数组</h4><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210173226538.png" alt="image-20220210173226538"></p><h4 id="常见数据结构之链表"><a href="#常见数据结构之链表" class="headerlink" title="常见数据结构之链表"></a>常见数据结构之链表</h4><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210173412890.png" alt="image-20220210173412890"></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220210173711587.png" alt="image-20220210173711587"></p><p><strong>总结：</strong></p><ul><li><p>数组是一种查询快，增删慢的模型</p></li><li><p>链表是一种查询慢，增删快的模型</p></li></ul><h4 id="List集合子类特点"><a href="#List集合子类特点" class="headerlink" title="List集合子类特点"></a>List集合子类特点</h4><p>List集合常用子类：ArrayList，LinkedList</p><ul><li>ArrayList：底层数据结构是数组，查询快，增删慢</li><li>LinkedList：底层数据结构是链表，查询慢，增删快</li><li>List的基本功能它们都有，使用方法和List一模一样</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ArrayList集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; arr = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        arr.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        arr.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        arr.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(arr);</span><br><span class="line">        <span class="keyword">for</span>(String s : arr) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;--------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; lk = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line">        lk.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        lk.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        lk.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(lk);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lk.size(); i++) &#123;</span><br><span class="line">            String s = lk.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LinkedList集合的特有功能"><a href="#LinkedList集合的特有功能" class="headerlink" title="LinkedList集合的特有功能"></a>LinkedList集合的特有功能</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td>在该列表开头插入指定的元素</td></tr><tr><td>public void addLast(E e)</td><td>将指定的元素追加到此列表的末尾</td></tr><tr><td>public E getFirst()</td><td>返回此列表中的第一个元素</td></tr><tr><td>public E getLast()</td><td>返回此列表中的最后一个元素</td></tr><tr><td>public E removeFirst()</td><td>从此列表中删除并返回第一个元素</td></tr><tr><td>public E removeLast()</td><td>从此列表中删除并返回最后一个元素</td></tr></tbody></table><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="Set集合概述和特点"><a href="#Set集合概述和特点" class="headerlink" title="Set集合概述和特点"></a>Set集合概述和特点</h4><p>Set集合特点</p><ul><li>不包含重复元素的集合</li><li>没用带索引的方法，所以不能使用普通for循环遍历</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Set集合对象</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        set.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        <span class="comment">//不包含重复的元素</span></span><br><span class="line">        set.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String s : set) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="哈希值"><a href="#哈希值" class="headerlink" title="哈希值"></a>哈希值</h4><p><strong>哈希值：</strong>是JDK根据对象的<strong>地址</strong>或者<strong>字符串</strong>或者<strong>数字</strong>算出来的int类型的<strong>数值</strong></p><p>Object类中有一个方法可以获取<strong>对象的哈希值</strong></p><ul><li>public int hashCode()：返回对象的哈希码值</li></ul><p>对象的哈希值特点</p><ul><li>同一个对象多次调用hashCode()方法返回的哈希值是相同的</li><li>默认情况下，不同对象的哈希值是不同的。而重写hashCode()方法，可以实现让不同对象的哈希值相同</li></ul><h4 id="HashSet集合概述和特点"><a href="#HashSet集合概述和特点" class="headerlink" title="HashSet集合概述和特点"></a>HashSet集合概述和特点</h4><p>HashSet集合特点</p><ul><li>底层数据结构是哈希表</li><li>对集合的迭代顺序不作任何保证，也就是说不保证存储和取出的元素顺序一致</li><li>没有带索引的方法，所以不能使用普通for循环遍历</li><li>由于是Set集合，所以是不包含重复元素的集合</li></ul><h4 id="HashSet集合保证元素唯一性源码分析"><a href="#HashSet集合保证元素唯一性源码分析" class="headerlink" title="HashSet集合保证元素唯一性源码分析"></a>HashSet集合保证元素唯一性源码分析</h4><p>HashSet集合添加一个元素的过程：</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220211033939838.png" alt="image-20220211033939838"></p><h4 id="案例：HashSet集合存储学生对象并遍历"><a href="#案例：HashSet集合存储学生对象并遍历" class="headerlink" title="案例：HashSet集合存储学生对象并遍历"></a>案例：HashSet集合存储学生对象并遍历</h4><p>需求：创建一个存储学生对象的集合，存储多个学生对象，使用程序实现在控制台遍历该集合。</p><p>要求：学生对象的成员变量值相同，我们就认为是同一个对象</p><p>思路：</p><p>① 定义学生类</p><p>② 创建HashSet集合对象</p><p>③ 创建学生对象</p><p>④ 把学生添加到集合</p><p>⑤ 遍历集合(增强for)</p><p>⑥ 在学生类中重写两个方法</p><p>​    hashCode()和equals()    自动生成即可</p><p>⑦ 要想添加元素不重复在类方法里重写hashCode()即可</p><p><strong>代码在Case.HashSet里面</strong></p><h4 id="LinkedHashSet集合概述和特点"><a href="#LinkedHashSet集合概述和特点" class="headerlink" title="LinkedHashSet集合概述和特点"></a>LinkedHashSet集合概述和特点</h4><p>LinkedHashSet集合特点</p><ul><li>哈希表和链表实现的Set接口，具有可预测的迭代次序</li><li>由链表保证元素有序，也就是说元素的存储和取出顺序是一致的</li><li>由哈希表保证元素唯一，也就是说没有重复的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Case.HashSet;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合对象</span></span><br><span class="line">        LinkedHashSet&lt;String&gt; lk = <span class="keyword">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加元素</span></span><br><span class="line">        lk.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        lk.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        lk.add(<span class="string">&quot;java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(String s : lk) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TreeSet集合概述和特点"><a href="#TreeSet集合概述和特点" class="headerlink" title="TreeSet集合概述和特点"></a>TreeSet集合概述和特点</h4><p>TreeSet集合特点</p><ul><li><p>元素有序，这里的顺序不是指存储和取出的顺序，而是按照一定的规则进行排序，具体排序方式取决于构造方法</p><p>TreeSet()：根据其元素的自然排序进行排序</p><p>TreeSet(Comparator comparator)：根据指定的比较器进行排序</p></li><li><p>没有带索引的方法，所以不能使用普通for循环遍历</p></li><li><p>由于是Set集合，所以不包含重复元素的集合</p></li></ul><h4 id="自然排序Comparable的使用"><a href="#自然排序Comparable的使用" class="headerlink" title="自然排序Comparable的使用"></a>自然排序Comparable的使用</h4><ul><li>存储学生对象并遍历，创建TreeSet集合使用<strong>无参构造方法</strong></li><li>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</li></ul><p><strong>结论</strong></p><ul><li>用TreeSet集合存储自定义对象，无参构造方法使用的是自然排序对元素进行排序的</li><li>自然排序，就是<strong>让元素所属的类实现Comparable接口</strong>，重写compareTo(T o)方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.TreeSet;</span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建TreeSet集合对象</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;chenlisheng&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;shichanggang&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;tanyuhang&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;chenyuhang&quot;</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加学生</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.TreeSet;</span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Student</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Student s)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        return 0;</span></span><br><span class="line"><span class="comment">//        return 1;</span></span><br><span class="line"><span class="comment">//        return -1;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//按照年龄从小到大比较</span></span><br><span class="line">        <span class="keyword">int</span> num = <span class="keyword">this</span>.age - s.age;</span><br><span class="line">        <span class="comment">//按照姓名的字母顺序排序</span></span><br><span class="line">        <span class="keyword">int</span> i = num == <span class="number">0</span> ? <span class="keyword">this</span>.name.compareTo(s.name) : num;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="比较器顺序Comparator的使用"><a href="#比较器顺序Comparator的使用" class="headerlink" title="比较器顺序Comparator的使用"></a>比较器顺序Comparator的使用</h4><ul><li>存储学生对象并遍历，创建TreeSet集合使用<strong>带参构造方法</strong></li><li>要求：按照年龄从小大大排序，年龄相同时，按照姓名的字母顺序排序</li></ul><p><strong>结论</strong></p><ul><li>用TreeSet集合存储自定义对象，带参构造方法使用的是<strong>比较器排序</strong>对元素进行排序的</li><li>比较器排序，就是<strong>让集合构造方法接收Comparator的实现类对象</strong>，重写compare(T 01,T 02)方法</li><li>重写方法时，一定要注意排序规则必须按照要求的主要条件和次要条件来写</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.TreeSet.比较器排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> ArrayList.TreeSet.比较器排序;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TreeSetDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        TreeSet&lt;Student&gt; ts = <span class="keyword">new</span> TreeSet&lt;Student&gt;(<span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student s1, Student s2)</span> </span>&#123;</span><br><span class="line"><span class="comment">//                return 0;</span></span><br><span class="line">                <span class="keyword">int</span> num = s1.getAge() - s2.getAge();</span><br><span class="line">                <span class="keyword">int</span> i = num == <span class="number">0</span> ? s1.getName().compareTo(s2.getName()) : num;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;chenlisheng&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;shichanggang&quot;</span>, <span class="number">21</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;tanyuhang&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">&quot;chenyuhang&quot;</span>, <span class="number">19</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加学生</span></span><br><span class="line">        ts.add(s1);</span><br><span class="line">        ts.add(s2);</span><br><span class="line">        ts.add(s3);</span><br><span class="line">        ts.add(s4);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student s : ts) &#123;</span><br><span class="line">            System.out.println(s.getName() + <span class="string">&quot;,&quot;</span> + s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="案例：成绩排序"><a href="#案例：成绩排序" class="headerlink" title="案例：成绩排序"></a>案例：成绩排序</h4><p>需求：用TreeSet集合存储多个学生信息(姓名，语文成绩，数学成绩)，并遍历该集合</p><p>要求：按照总分从高到低出现</p><p>思路：</p><p>① 定义学生类</p><p>② 创建TreeSet集合对象，通过比较器排序进行排序</p><p>③ 创建学生对象</p><p>④ 把学生对象添加到集合</p><p>⑤ 遍历集合</p><p><strong>代码在Case.TreeSet里面</strong></p><h4 id="案例：不重复的随机数"><a href="#案例：不重复的随机数" class="headerlink" title="案例：不重复的随机数"></a>案例：不重复的随机数</h4><p>需求：编写一个程序，获取10个1-20之间的随机数，要求随机数不能重复，并在控制台输出</p><p>思路：</p><p>① 创建Set集合对象</p><p>② 创建随机数对象</p><p>③ 判断集合的长度是不是小于10</p><p>​    是：产生一个随机数，添加到集合</p><p>​    回到 ③ 继续</p><p>④ 遍历集合</p><p><strong>代码在Case.RandomSet里面</strong></p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><blockquote><p>是JDK5中引入的特性，它提供了编译时类型安全检测机制，该机制允许在编译时检测到非法的类型</p><p>它的本质是<strong>参数化类型</strong>，也就是说所操作的数据类型被指定为一个参数</p><p>一提到参数，最熟悉的就是定义方法时有形参，然后调用此方法时传递实参。那么参数化类型怎么理解呢？</p><p>顾名思义，就是<strong>将类型由原来的具体的类型参数化，然后在使用/调用时传入具体的类型</strong></p><p>这种参数类型可以用在类、方法和接口中，分别被称为泛型类、泛型方法、泛型接口</p><p><strong>说白了就是强制定义你的类型</strong></p></blockquote><p>泛型定义格式：</p><ul><li>&lt;类型&gt;：指定一种类型的格式。这里的类型可以看成是形参</li><li>&lt;类型1,类型2…&gt;：指定多种类型的格式，多种类型之间用逗号隔开。这里的类型可以看成是形参</li><li>将来具体调用时候给定的类型可以看成是实参，并且实参的类型只能是引用数据类型</li></ul><p>泛型的好处：</p><ul><li>把运行时期的问题提前到了编译期间</li><li>避免了强制类型转换</li></ul><h4 id="泛型类："><a href="#泛型类：" class="headerlink" title="泛型类："></a>泛型类：</h4><p>泛型类的定义格式：</p><ul><li><p>格式：修饰符class 类名 &lt;类型&gt; { }</p></li><li><p>范例：public class Generic<T> { }</p><p>此处<strong>T</strong>可以随便写为任意标识，常见的如<strong>T、E、K、V</strong>等形式的参数常用于表示泛型</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generics.GenericsClass;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T t;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getT</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> t;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setT</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.t = t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generics.GenericsClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Generic对象并定义为String类型</span></span><br><span class="line">        Generic&lt;String&gt; g1 = <span class="keyword">new</span> Generic&lt;String&gt;();</span><br><span class="line">        g1.setT(<span class="string">&quot;陈李生&quot;</span>);</span><br><span class="line">        System.out.println(g1.getT());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Generic对象并定义为Integer类型</span></span><br><span class="line">        Generic&lt;Integer&gt; g2 = <span class="keyword">new</span> Generic&lt;Integer&gt;();</span><br><span class="line">        g2.setT(<span class="number">10</span>);</span><br><span class="line">        System.out.println(g2.getT());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>泛型方法的定义格式：</p><ul><li>格式：修饰符 &lt;类型&gt; 返回值类型 方法名(类型 变量名) { }</li><li>范例：public <T> void show(T t) { }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generics.GenericsMethod;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generics.GenericsMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Generic g = <span class="keyword">new</span> Generic();</span><br><span class="line">        g.show(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        g.show(<span class="number">11</span>);</span><br><span class="line">        g.show(<span class="number">3.1415926</span>);</span><br><span class="line">        g.show(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p> 泛型接口的定义格式：</p><ul><li>格式：修饰符 interface 接口名&lt;类型&gt; { }</li><li>范例：public interface Generic<T> { }</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generics.Interface;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span> </span>&#123;</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generics.Interface;</span><br><span class="line"></span><br><span class="line"><span class="comment">//泛型接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Generics.Interface;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericImpl&lt;String&gt; t = <span class="keyword">new</span> GenericImpl&lt;String&gt;();</span><br><span class="line">        t.show(<span class="string">&quot;陈李生&quot;</span>);</span><br><span class="line"></span><br><span class="line">        GenericImpl&lt;Integer&gt; t1 = <span class="keyword">new</span> GenericImpl&lt;Integer&gt;();</span><br><span class="line">        t1.show(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        GenericImpl&lt;Boolean&gt; t2 = <span class="keyword">new</span> GenericImpl&lt;Boolean&gt;();</span><br><span class="line">        t2.show(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="类型通配符"><a href="#类型通配符" class="headerlink" title="类型通配符"></a>类型通配符</h4><p>为了表示各种泛型List的父类，可以使用类型通配符</p><ul><li>类型通配符：**&lt;?&gt;**</li><li>List&lt;?&gt;：标识元素类型未知的List，它的元素可以匹配<strong>任何的类型</strong></li><li>这种带通配符的List仅表示它是各种泛型List的父类，并不能把元素添加到其中</li></ul><p>如果说我们不希望List&lt;?&gt;是任何泛型List的父类，只希望它代表某一类泛型List的父类，可以使用类型通配符的上限</p><ul><li>类型通配符上限：**&lt;? extends 类型&gt;**</li><li>List&lt;? extends Number&gt;：它表示的类型是<strong>Number或者其子类型</strong></li></ul><p>除了可以指定类型通配符的上限，我们也可以指定类型通配符的下限</p><ul><li>类型通配符下限：**&lt;? super 类型&gt;**</li><li>List&lt;? super Number&gt;：它表示的类型是<strong>Number或者其父类型</strong></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220212184530228.png" alt="image-20220212184530228"></p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>可变参数又称参数个数可变，用作方法的形参出现，那么方法参数个数就是可变的了</p><ul><li>格式：修饰符 返回值类型 方法名(数据类型… 变量名) { }</li><li>范例：public static int sum(int… a) { }</li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220212185456937.png" alt="image-20220212185456937"></p><p><strong>注意事项：</strong></p><ul><li><p>这里的变量其实是一个数组</p></li><li><p>如果一个方法有多个参数，包含可变参数，<strong>可变参数要放在最后</strong></p></li></ul><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220212185827100.png" alt="image-20220212185827100"></p><h4 id="可变参数的使用"><a href="#可变参数的使用" class="headerlink" title="可变参数的使用"></a>可变参数的使用</h4><p><strong>Arrays工具类</strong>中有一个静态方法：</p><ul><li>public static <T> List<T> asList(T… a)：返回由指定数组支持的固定大小的列表</li><li>返回的集合不能做增删操作，可以做修改操作</li></ul><p>List接口中有一个静态方法：</p><ul><li>public static <E> List<E> of(E… elements)：返回包含任意数量元素的不可变列表</li><li>返回的集合不能做增删改操作</li></ul><p><strong>Set接口</strong>中有一个静态方法：</p><ul><li>public static <E> Set<E> of (E… elements)：返回一个包含任意数量元素的不可变集合</li><li>在给元素的时候，不能给重复的元素</li><li>返回的集合不能做增删操作，没有修改操作</li></ul><h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="Map集合概述和使用"><a href="#Map集合概述和使用" class="headerlink" title="Map集合概述和使用"></a>Map集合概述和使用</h4><p>Map集合概述</p><ul><li><p>相当于<strong>Python的字典</strong></p></li><li><p>Interface Map&lt;K,V&gt;</p></li><li><p>K：键的类型，V：值的类型</p></li><li><p>将键映射到值的对象；不能包含重复的键；每个键可以映射到最多一个值</p></li><li><p>举例：学生的学号和姓名</p><p>itheima001    林青霞</p><p>itheima002    张曼玉</p><p>itheima003    王祖贤</p></li></ul><p>创建Map集合的对象</p><ul><li>多态的方式</li><li>具体的实现类HashMap</li></ul><h4 id="Map集合的基本功能"><a href="#Map集合的基本功能" class="headerlink" title="Map集合的基本功能"></a>Map集合的基本功能</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V put(K key,V value)</td><td>添加元素</td></tr><tr><td>V remove(Object key)</td><td>根据键删除键值对元素</td></tr><tr><td>void clear()</td><td>移除所有的键值对元素</td></tr><tr><td>boolean containsKey(Object key)</td><td>判断集合是否包含指定的键</td></tr><tr><td>boolean containsValue(Object value)</td><td>判断集合是否包含指定的值</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合的长度，也就是集合中键值对的个数</td></tr></tbody></table><h4 id="Map集合的获取功能"><a href="#Map集合的获取功能" class="headerlink" title="Map集合的获取功能"></a>Map集合的获取功能</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>V get(Object key)</td><td>根据键获取值</td></tr><tr><td>Set<K> keySet()</td><td>获取所有键的集合</td></tr><tr><td>Collection<V> values()</td><td>获取所有值的集合</td></tr><tr><td><strong>Set&lt;Map.Entry&lt;k,V&gt;&gt; entrySet()</strong></td><td><strong>获取所有键值对对象的集合</strong></td></tr></tbody></table><h4 id="Map集合的遍历-方式1"><a href="#Map集合的遍历-方式1" class="headerlink" title="Map集合的遍历(方式1)"></a>Map集合的遍历(方式1)</h4><p>我们刚才存储的元素都说成对出现的，所以我们把Map看成是一个夫妻对的集合</p><p>遍历思路</p><ul><li>把所有的丈夫给集中起来</li><li>遍历丈夫的集合，获取到每一个丈夫</li><li>根据丈夫去找对应的妻子</li></ul><p>转换为Map集合中的操作：</p><ul><li>获取所有键的集合。用KeySet()方法实现</li><li>遍历键的集合，获取到每一个键。用增强for实现</li><li>根据键去找值。用get(Object key)方法实现</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Case.Map.HashMap01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合对象</span></span><br><span class="line">        Map&lt;String, Student&gt; map = <span class="keyword">new</span> HashMap&lt;String, Student&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;陈李生&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;陈华生&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;石昌钢&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合当中</span></span><br><span class="line">        map.put(<span class="string">&quot;01&quot;</span>, s1);</span><br><span class="line">        map.put(<span class="string">&quot;02&quot;</span>, s2);</span><br><span class="line">        map.put(<span class="string">&quot;03&quot;</span>, s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="comment">//第一种遍历方式</span></span><br><span class="line">        Set&lt;String&gt; keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keySet) &#123;</span><br><span class="line">            Student value = map.get(key);</span><br><span class="line">            String name = value.getName();</span><br><span class="line">            <span class="keyword">int</span> age = value.getAge();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Map集合的遍历-方式2"><a href="#Map集合的遍历-方式2" class="headerlink" title="Map集合的遍历(方式2)"></a>Map集合的遍历(方式2)</h4><p>我们刚才存储的元素都是成对出现的，所以我们把Map看成是一个夫妻对的集合</p><p>遍历思路</p><ul><li>获取所有结婚证的集合</li><li>遍历结婚证的集合，得到每一个结婚证</li><li>根据结婚证获取丈夫和妻子</li></ul><p>转换为Map集合中的操作：</p><ul><li><p>获取所有键值对对象的集合</p><p><strong>Set&lt;Map.Entry&lt;k,V&gt;&gt; entrySet()：获取所有键值对对象的集合</strong></p></li><li><p>遍历键值对对象的集合，得到每一个键值对对象</p><p>用增强for实现，得到每一个<strong>Map.Entry</strong></p></li><li><p>根据键值对对象获取键和值</p><p>用**getKey()**得到键</p><p>用**getValue()**得到值</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Case.Map.HashMap01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合对象</span></span><br><span class="line">        Map&lt;String, Student&gt; map = <span class="keyword">new</span> HashMap&lt;String, Student&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">&quot;陈李生&quot;</span>, <span class="number">19</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">&quot;陈华生&quot;</span>, <span class="number">20</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">&quot;石昌钢&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把学生添加到集合当中</span></span><br><span class="line">        map.put(<span class="string">&quot;01&quot;</span>, s1);</span><br><span class="line">        map.put(<span class="string">&quot;02&quot;</span>, s2);</span><br><span class="line">        map.put(<span class="string">&quot;03&quot;</span>, s3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="comment">//第二种遍历方式</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Student&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Student&gt; s : entries) &#123;</span><br><span class="line">            String key = s.getKey();</span><br><span class="line">            Student value = s.getValue();</span><br><span class="line">            System.out.println(key + <span class="string">&quot;,&quot;</span> + value.getName() + <span class="string">&quot;,&quot;</span> + value.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：HashMap集合存储学生对象并遍历-1"><a href="#案例：HashMap集合存储学生对象并遍历-1" class="headerlink" title="案例：HashMap集合存储学生对象并遍历-1"></a>案例：HashMap集合存储学生对象并遍历-1</h4><p>需求：创建一个HashMap集合，键是学号(String)，值是学生对象(Student)。存储三个键值对元素，并遍历</p><p>思路</p><p>① 定义学生类</p><p>② 创建HashMap集合对象</p><p>③ 创建学生对象</p><p>④ 把学生添加到集合</p><p>⑤ 遍历集合</p><p>​    方式一：键找值</p><p>​    方式二：键值对对象找键和值</p><p><strong>代码在Case.Map.HashMap01里面</strong></p><h4 id="案例：HashMap集合存储学生对象并遍历-2"><a href="#案例：HashMap集合存储学生对象并遍历-2" class="headerlink" title="案例：HashMap集合存储学生对象并遍历-2"></a>案例：HashMap集合存储学生对象并遍历-2</h4><p>需求：创建一个HashMap集合，键是学生对象(Student)，值是居住地(String)。存储多个键值对元素，并遍历。</p><p>要球保证键的唯一性：<strong>如果学生对象的成员变量相同，我们就认为是同一个对象</strong></p><p>思路：</p><p>① 定义学生类</p><p>② 创建HashMap集合对象</p><p>③ 创建学生对象</p><p>④ 把学生添加到集合</p><p>⑤ 遍历集合</p><p>⑥ 在学生类中重写两个方法</p><p>​    hashCode()和equals()</p><p><strong>代码在Case.Map.HashMap02里面</strong></p><h4 id="案例：ArrayList集合存储HashMap元素并遍历"><a href="#案例：ArrayList集合存储HashMap元素并遍历" class="headerlink" title="案例：ArrayList集合存储HashMap元素并遍历"></a>案例：ArrayList集合存储HashMap元素并遍历</h4><p>需求：创建一个ArrayList集合，存储三个元素，每一个元素都是HashMap，每一个HashMap的键和值都是String，并遍历</p><p>思路：</p><p>① 创建ArrayList集合</p><p>② 创建HashMap集合，并添加键值对元素</p><p>③ 把HashMap作为元素添加到ArrayList集合</p><p>④ 遍历ArrayList集合</p><p><strong>代码在Case.Map.HashMap03里面</strong></p><h4 id="案例：HashMap集合存储ArrayList元素并遍历"><a href="#案例：HashMap集合存储ArrayList元素并遍历" class="headerlink" title="案例：HashMap集合存储ArrayList元素并遍历"></a>案例：HashMap集合存储ArrayList元素并遍历</h4><p>需求：创建一个HashMap集合，存储三个键值对元素，每一个键值对元素的键是String，值是ArrayList，每一个ArrayList的元素是String，并遍历</p><p>思路：</p><p>① 创建HashMap集合</p><p>② 创建ArrayList集合，并添加元素</p><p>③ 把ArrayList作为元素添加到HashMap集合</p><p>④ 遍历HashMap集合</p><p><strong>代码在Case.Map.HashMap04里面</strong></p><h4 id="案例：统计字符串中每个字符出现的次数"><a href="#案例：统计字符串中每个字符出现的次数" class="headerlink" title="案例：统计字符串中每个字符出现的次数"></a>案例：统计字符串中每个字符出现的次数</h4><p>需求：键盘录入一个字符串，要求统计字符串中每个字符串出现的次数。</p><p>举例：键盘录入”aababcabcdabcde”</p><p>在控制台输出：”a(5)b(4)c(3)d(2)e(1)”</p><p>分析：</p><p>① 我们可以把结果分成几个部分来看：a(5),b(4),c(3),d(2),e(1)</p><p>② 每一个部分可以看成是：字符和字符对应的次数组成</p><p>③ 这样的数据，我们可以通过HashMap集合来存储，键是字符，值是字符出现的次数</p><p><strong>注意：</strong>键是字符，类型应该是Character；值是字符出现的次数，类型应该是Integer</p><p>思路：</p><p>① 键盘录入一个字符串</p><p>② 创建HashMap集合，键是Character，值是Integer</p><p>③ 遍历字符串，得到每一个字符</p><p>④ 拿到的每一个字符作为键到HashMap集合中去找对应的值，看其返回值</p><p>​    如果返回值是null：说明该字符在HashMap集合中不存在，就把该字符作为键，1作为值存储</p><p>​    如果返回值不是null：说明该字符在HashMap集合中存在，把该值加1，然后重新存储该字符和对应的值</p><p>⑤ 遍历HashMap集合，得到键和值，按照要求进行拼接</p><p>⑥ 输出结果</p><p><strong>代码在Case.Map.HashMap05里面</strong></p><h3 id="Collections"><a href="#Collections" class="headerlink" title="Collections"></a>Collections</h3><p>Collections类的概述</p><ul><li>是针对集合操作的工具类</li></ul><p>Collections类的常用方法</p><ul><li>public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List<T> list)：将指定的列表按升序排序</li><li>public static void reverse(List&lt;?&gt; list)：反转指定列表中元素的顺序</li><li>public static void shuffle(List&lt;?&gt; list)：使用默认的随机源随机排列指定的列表</li></ul><h4 id="案例：ArrayList存储学生对象并排序"><a href="#案例：ArrayList存储学生对象并排序" class="headerlink" title="案例：ArrayList存储学生对象并排序"></a>案例：ArrayList存储学生对象并排序</h4><p>需求：ArrayList存储学生对象，使用Collections对ArrayList进行排序</p><p>要求：按照年龄从小到大排序，年龄相同时，按照姓名的字母顺序排序</p><p>思路：</p><p>① 定义学生类</p><p>② 创建ArrayList集合对象</p><p>③ 创建学生对象</p><p>④ 把学生添加到集合</p><p>⑤ 使用Collections对ArrayList集合排序</p><p>⑥ 遍历排序</p><p><strong>代码在Case.Collections里面</strong></p><h4 id="案例：模拟斗地主"><a href="#案例：模拟斗地主" class="headerlink" title="案例：模拟斗地主"></a>案例：模拟斗地主</h4><p>需求：通过程序实现斗地主过程中的洗牌，发牌和看牌</p><p>思路：</p><p>① 创建一个牌盒，也就是定义一个集合对象，用ArrayList集合实现</p><p>② 往牌盒里面装牌</p><p>③ 洗牌，也就是把牌打散，用Collections的shuffle()方法实现</p><p>④ 发牌，也就是遍历集合，给三个玩家发牌</p><p>⑤ 输出每位玩家的手牌</p><p><strong>代码在Case.DouDiZhuDemo里面</strong></p><h4 id="案例：模拟斗地主升级版"><a href="#案例：模拟斗地主升级版" class="headerlink" title="案例：模拟斗地主升级版"></a>案例：模拟斗地主升级版</h4><p>需求：通过程序实现斗地主过程中的洗牌，发牌和看牌。要求：对牌进行排序</p><p>思路：</p><p>① 创建HashMap，键是编号，值是牌</p><p>② 创建ArrayList，存储编号</p><p>③ 创建花色数组和点数数组</p><p>④ 从0开始往HashMap里面存储编号，并存储对应的牌。同时往ArrayList里面存储编号</p><p>⑤ 洗牌(洗的是编号)，用Collections的shuffle()方法实现</p><p>⑥ 发牌(发的也是编号，为了保证编号是排序的，创建TreeSet集合接收)</p><p>⑦ 定义看牌方法(遍历TreeSet集合，获取编号，到HashMap集合找对应的牌)</p><p>⑧ 调用看牌方法</p><h2 id="30、IO流"><a href="#30、IO流" class="headerlink" title="30、IO流"></a>30、IO流</h2><h3 id="IO流概述和分类"><a href="#IO流概述和分类" class="headerlink" title="IO流概述和分类"></a>IO流概述和分类</h3><p>IO流概述：</p><ul><li><p>IO：输出/输出(Input/Output)</p></li><li><p>流：是一种抽象概念，是对数据传输的总称。也就是说数据在设备间的传输称为流，流的本质是数据传输</p></li><li><p>IO流就是用来处理设备间数据传输问题的</p><p>常见的应用：文件复制；文件上传；文件下载</p></li></ul><p>IO流分类：</p><ul><li><p>按照数据的流向</p><p>输入流：读数据</p><p>输出流：写数据</p></li><li><p>按照数据类型来分</p><p>字节流：字节输入流；字节输出流</p><p>字符流：字符输入流；字符输出流</p></li></ul><p>一般来说，我们说IO流的分类是按照<strong>数据类型</strong>来分的</p><p>那么这两种流都在什么情况下使用呢？ </p><ul><li><p>如果数据通过Window自带的记事本软件打开，我们还可以<strong>读懂里面的内容</strong>，就使用字符流</p><p>否则就使用字节流。如果你不知道该使用哪种类型的流，就使用字节流</p></li><li><p>字节流基本上是万能的流</p></li></ul><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><h4 id="File类概述和构造方法"><a href="#File类概述和构造方法" class="headerlink" title="File类概述和构造方法"></a>File类概述和构造方法</h4><p>File：它是文件和目录路径名的抽象表示</p><ul><li><p>文件和目录是可以通过File封装成对象的</p></li><li><p>对于File而言，其封装的并不是一个真正存在的文件，仅仅是一个路径名而已。它可以是存在的，也可以是不存在的。</p><p>将来是要通过具体的操作把这个路径的内容转换为具体存在的</p></li></ul><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>通过将给定的路径名字符串转换为抽象路径名来创建新的File实例</td></tr><tr><td>File(String parent,String child)</td><td>从父路径名字符串和子路径名字符串创建新的File实例</td></tr><tr><td>File(File parent,String child)</td><td>从父抽象路径名和子路径名字符串创建新的File实例</td></tr></tbody></table><h4 id="File类创建功能"><a href="#File类创建功能" class="headerlink" title="File类创建功能"></a>File类创建功能</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>当具有该名称的文件不存在时，创建一个由该抽象路径名命名的新空文件</td></tr><tr><td>public boolean mkdir()</td><td>创建由此抽象路径名命名的目录</td></tr><tr><td>public boolean mkdirs()</td><td>创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录</td></tr></tbody></table><h4 id="File类判断和获取功能"><a href="#File类判断和获取功能" class="headerlink" title="File类判断和获取功能"></a>File类判断和获取功能</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean isDirectory()</td><td>测试此抽象路径名表示的File是否为目录</td></tr><tr><td>public boolean isFile()</td><td>测试此抽象路径名表示的File是否为文件</td></tr><tr><td>public boolean exists()</td><td>测试此抽象路径名表示的File是否存在</td></tr><tr><td>public String getAbsolutePath()</td><td>返回此抽象路径名的绝对路径名字符串</td></tr><tr><td>public String getPath()</td><td>将此抽象路径名转换为路径名字符串</td></tr><tr><td>public String getName()</td><td>返回由此抽象路径名表示的文件或目录的名称</td></tr><tr><td>public String[] list()</td><td>返回此抽象路径名表示的目录中的文件和目录的名称字符串数组</td></tr><tr><td>public File[] listFiles()</td><td>返回此抽象路径名表示的目录中的文件和目录的File对象数组</td></tr></tbody></table><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220214160541040.png" alt="image-20220214160541040"></p><h4 id="File类删除功能"><a href="#File类删除功能" class="headerlink" title="File类删除功能"></a>File类删除功能</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>public boolean delete()</td><td>删除由此抽象路径名表示的文件或目录</td></tr></tbody></table><p>绝对路径和相对路径的区别</p><ul><li>绝对路径：<strong>完整的路径名</strong>，不需要任何其他信息就可以定位它所表示的文件。例如：<strong>E:\\itcast\\java.txt</strong></li><li>相对路径：必须使用取自其他路径名的信息进行解析。例如：<strong>myFile\\java.txt</strong></li></ul><p>删除目录时的注意事项：</p><ul><li>如果一个<strong>目录中有内容</strong>(目录，文件)，<strong>不能直接删除</strong>。应该先删除目录中的内容，最后才能删除目录</li></ul><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>递归概述：以编程的角度来看，递归指的是方法定义中调用方法本身的现象</p><p>递归解决问题的思路：</p><p>把一个复杂的问题层层转化为一个<strong>与原问题相似的规模较小</strong>的问题来求解</p><p>递归策略只需<strong>少量的程序</strong>就可以描述出解决问题的过程所需要的多次重复计算</p><p>递归解决问题要找到两个内容：</p><ul><li>递归出口：否则会出现内存溢出</li><li>递归规则：与原问题相似的规模较小的问题</li></ul><h4 id="案例：递归求阶乘"><a href="#案例：递归求阶乘" class="headerlink" title="案例：递归求阶乘"></a>案例：递归求阶乘</h4><p>需求：用递归求5的阶乘，并把结果在控制台输出</p><p>分析：</p><p>① 阶乘：一个正整数的阶乘是所有小于及等于该数的正整数的积，自然数n的阶乘写作n!</p><p>​    5!=5x4x3x2x1</p><p>② 递归出口：1!=1</p><p>③ 递归规则：n!=n x (n-1)!</p><p>​    5!=5x4!</p><p>思路：</p><p>① 定义一个方法，用于递归求阶乘，参数为一个int类型的变量</p><p>② 在方法内部判断该变量的值是否是1</p><p>​    是：返回1</p><p>​    否：返回n x n(n-1)!</p><p>③ 调用方法</p><p>④ 输出结果</p><p><strong>代码在Case.DiGui里面</strong></p><h4 id="案例：遍历目录"><a href="#案例：遍历目录" class="headerlink" title="案例：遍历目录"></a>案例：遍历目录</h4><p>需求：给定一个路径(E:\itcast)，请通过递归完成遍历该目录下的所有内容，并把所有文件的绝对路径输出在控制台</p><p>思路：</p><p>① 根据给定的路径创建一个File对象</p><p>② 定义一个方法，用于获取给定目录下的所有内容，参数为第一步创建的File对象</p><p>③ 获取给定的File目录下所有的文件或者目录的File数组</p><p>④ 遍历该File数组，得到每一个File对象</p><p>⑤ 判断该File对象是否是目录</p><p>​    是：递归调用</p><p>​    否：获取绝对路径输出在控制台</p><p>⑥ 调用方法</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220214171644318.png" alt="image-20220214171644318"></p><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><h4 id="字节流写数据"><a href="#字节流写数据" class="headerlink" title="字节流写数据"></a>字节流写数据</h4><p>字节流抽象基类</p><ul><li>InputStream：这个抽象类是表示字节输入流的所有类的超类</li><li>OutputStream：这个抽象类是表示字节输出流的所有类的超类</li><li>子类名特点：子类名称都是以其父类名作为子类名的后缀</li></ul><p>FileOutputStream：文件输出流用于将数据写入File</p><ul><li>FileOutputStream(String name)：创建文件输出流以指定的名称写入文件</li></ul><p>使用字节输出流写数据的步骤：</p><ul><li>创建字节输出流对象(调用系统功能创建了文件，创建字节输出流对象，让字节输出流对象指向文件)</li><li>调用字节输出流对象的写数据方法</li><li>释放资源(关闭此文件输出流并释放与此流相关联的任何系统资源)</li></ul><h4 id="字节流写数据的3种方式"><a href="#字节流写数据的3种方式" class="headerlink" title="字节流写数据的3种方式"></a>字节流写数据的3种方式</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void write(int b)</td><td>将指定的字节写入此文件输出流，一次写一个字节数据</td></tr><tr><td>void write(byte[] b)</td><td>将b.length字节从指定的字节数组写入此文件输出流，一次写一个字节数组数据</td></tr><tr><td>void write(byte[] b,int off,int len)</td><td>将len字节从指定的字节数组开始，从偏移量off开始写入此文件输出流，一次写一个字节数组的部分数据</td></tr></tbody></table><h4 id="字节流写数据的两个小问题"><a href="#字节流写数据的两个小问题" class="headerlink" title="字节流写数据的两个小问题"></a>字节流写数据的两个小问题</h4><p>字节流写数据如何实现换行呢？</p><ul><li><p>写完数据后，加换行符</p><table><thead><tr><th align="center">Windows</th><th align="center">\r\n</th></tr></thead><tbody><tr><td align="center"><strong>linux</strong></td><td align="center"><strong>\n</strong></td></tr><tr><td align="center"><strong>mac</strong></td><td align="center"><strong>\r</strong></td></tr></tbody></table></li></ul><p>字节流写数据如何实现追加写入呢？</p><ul><li>public FileOutputStream(String name,boolean append)</li><li>创建文件输出流以指定的名称写入文件。如果第二个参数为true，则字节将写入文件的末尾而不是开头</li></ul><h4 id="字节流写数据加异常处理"><a href="#字节流写数据加异常处理" class="headerlink" title="字节流写数据加异常处理"></a>字节流写数据加异常处理</h4><p><strong>finally：</strong>在异常处理时提供finally块来执行所有清除操作。比如说IO流中的释放资源</p><p>特点：被finally控制的语句一定会执行，除非JVM退出</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220214192122600.png" alt="image-20220214192122600"></p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220214192539519.png" alt="image-20220214192539519"></p><h4 id="字节流读数据-一次读一个字节数据"><a href="#字节流读数据-一次读一个字节数据" class="headerlink" title="字节流读数据(一次读一个字节数据)"></a>字节流读数据(一次读一个字节数据)</h4><p>需求：把文件fos.txt中的内容读取出来在控制台输出</p><p>FileInputStream：从文件系统中的文件获取输入字节</p><ul><li>FileInputStream(String name)：通过打开与实际文件的连接来创建一个FileInputStream，该文件由文件系统中的路径名name命名</li></ul><p>使用字节输入流读数据的步骤：</p><p>① 创建字节输入流对象</p><p>② 调用字节输入流对象的读数据方法</p><p>③ 释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IOStream.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InputStreamDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//创建字节流输入对象</span></span><br><span class="line">        <span class="comment">//FileInputStream(String name)</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;Java_Study\\fos.txt&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用字节输入流对象的读数据方法</span></span><br><span class="line">        <span class="comment">//int read():从该输入流读取一个字节的数据</span></span><br><span class="line"><span class="comment">//        int read = fis.read();</span></span><br><span class="line"><span class="comment">//        System.out.println(read);</span></span><br><span class="line">        <span class="comment">//如果文件到达末尾，返回的值是-1</span></span><br><span class="line">        <span class="keyword">int</span> read = fis.read();</span><br><span class="line">        <span class="keyword">while</span> (read != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) read);</span><br><span class="line">            read = fis.read();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：复制文本文件"><a href="#案例：复制文本文件" class="headerlink" title="案例：复制文本文件"></a>案例：复制文本文件</h4><p> 需求：把”E:\\itcast\\窗里窗外.txt” 复制到模块目录下的”窗里窗外.txt”</p><p>分析：</p><p>① 复制文本文件，其实就把文本文件的内容从一个文件中读取出来(<strong>数据源</strong>)，然后写入到另一个文件中(<strong>目的地</strong>)</p><p>② 数据源：</p><p>​    E:\\itcast\\窗里窗外.txt — 读数据 — InputStream — FileInputStream</p><p>③ 目的地：</p><p>​    myByteStream\\窗里窗外.txt — 写数据 — OutputStream — FileOutputStream</p><p> 思路：</p><p>① 根据数据源创建字节输入流对象</p><p>② 根据目的地创建字节输出流对象</p><p>③ 读写数据，复制文本文件(一次读取一个字节，一次写入一个字节)</p><p>④ 释放资源</p><p><strong>代码在Case.IOStream.OutputStream里面</strong></p><h4 id="字节流读数据-一次读一个字节数组数据"><a href="#字节流读数据-一次读一个字节数组数据" class="headerlink" title="字节流读数据(一次读一个字节数组数据)"></a>字节流读数据(一次读一个字节数组数据)</h4><p>需求：把文件fos.txt中的内容读取出来在控制台输出</p><p>使用字节输入流读数据的步骤：</p><p>① 创建字节输入流对象</p><p>② 调用字节输入流对象的读数据方法</p><p>③ 释放资源</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">while</span> ((len = bis.read(bys)) != -<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    bos.write(bys, <span class="number">0</span>, len);</span><br><span class="line">    <span class="comment">//在控制台输出数据</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> String(bys, <span class="number">0</span>, len));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220214214515136.png" alt="image-20220214214515136"></p><h4 id="案例：复制图片"><a href="#案例：复制图片" class="headerlink" title="案例：复制图片"></a>案例：复制图片</h4><p>需求：把”E:\\itcast\\窗里窗.jpg” 复制到模块目录下的”窗里窗外.jpg”</p><p>思路：</p><p>① 根据数据源创建字节输入流对象</p><p>② 根据目的地创建字节输出流对象</p><p>③ 读写数据，复制图片(一次读取一个字节数组，一次写入一个字节数组)</p><p>④ 释放资源</p><p><strong>代码在Case.CopyPhoto里面</strong></p><h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><p>字节缓冲流：</p><ul><li>BufferedOutputStream：该类实现缓冲输出流，通过设置这样的输出流，应用程序可以向底层输出流写入字节，而不必为写入的每个字节导致底层系统的调用</li><li>BufferedInputStream：创建BufferedInputStream将创建一个内部缓冲区数组。当从流中读取或跳过字节时，内部缓冲区将根据需要从所包含的输入流中重新填充，一次很多字节</li></ul><p>构造方法：</p><ul><li>字节缓冲输出流：BufferedOutputStream(OutputStream out)</li><li>字节缓冲输入流：BufferedInputStream(InputStream in)</li></ul><p>为什么构造方法需要的是字节流，而不是具体的文件或者路径呢？</p><ul><li>字节缓冲流<strong>仅仅提供缓冲区</strong>，而真正的读写数据还得依靠基本的字节流对象进行操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IOStream.BufferStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//字节缓冲输出流：BufferedOutputStream(OutputStream out)</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Java_Study\\fos.txt&quot;</span>);</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(fos);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//字节缓冲输入流：BufferedInputStream(InputStream in)</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;Java_Study\\bos.txt&quot;</span>);</span><br><span class="line">        BufferedInputStream bis = <span class="keyword">new</span> BufferedInputStream(fis);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读数据,并写入数据</span></span><br><span class="line">        <span class="keyword">byte</span>[] bys = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(bys)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">//写入数据</span></span><br><span class="line">            bos.write(bys, <span class="number">0</span>, len);</span><br><span class="line">            <span class="comment">//在控制台输出数据</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(bys, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        bis.close();</span><br><span class="line">        bos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：复制视频"><a href="#案例：复制视频" class="headerlink" title="案例：复制视频"></a>案例：复制视频</h4><p>需求：把”E:\\itcast\\窗里窗.avi” 复制到模块目录下的”窗里窗外.avi”</p><p>思路：</p><p>① 根据数据源创建字节输入流对象</p><p>② 根据目的地创建字节输出流对象</p><p>③ 读写数据，复制视频</p><p>④ 释放资源</p><p><strong>代码在Case.CopyVideo里面</strong></p><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><h4 id="为什么会出现字符流"><a href="#为什么会出现字符流" class="headerlink" title="为什么会出现字符流"></a>为什么会出现字符流</h4><p>由于字节流操作中文不是特别的方便，所以Java就提供字符流</p><ul><li>字符流=字节流+编码表</li></ul><p>用字节流复制文本文件时，文本文件也会有中文，但是没有问题，原因是最终底层操作会自动进行字节拼接成中文，如何识别是中文的呢？</p><ul><li>汉字在存储的时候，无论选择哪种编码存储，第一个字节都是负数</li></ul><h4 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h4><p>基础知识：</p><ul><li><p>计算机中储存的信息都是用<strong>二进制</strong>数表示的；我们在屏幕上看到的英文，汉字等字符是二进制数转换之后的结果</p></li><li><p>按照某种规则，将字符存储到计算机中，称为<strong>编码</strong>。反之，将存储在计算机中的二进制数按照某种规则解析显示出来，称为<strong>解码</strong>。这里强调一下：按照A编码存储，必须按照A编码解析，这样才能显示正确的文本符号。否则就会导致乱码现象</p><p>字符编码：就是一套自然语言的字符与二进制数之间的对应规则(A,65)</p></li></ul><p>字符集：</p><ul><li><p>是一个系统支持的所以字符的集合，包括各国家文字、标点符号、图形符号、数字等</p></li><li><p>计算机要准确的存储和识别各种字符集符号，就需要进行字符编码，一套字符集必然至少有一套字符编码。</p><p>常见的字符集有ASCII字符集、GBXXX字符集、Unicode字符集等</p></li></ul><p>ASCII字符集：</p><ul><li><strong>ASCII</strong>(American Standard Code for Information Interchange，美国信息交换标准代码)：是基于拉丁字母的一套电脑编码系统，用于显示现代英语，主要包括控制字符(回车键、退格、换行键等)和可显示字符(英文大小写字符、阿拉伯数字和西文字符)</li><li>基本的ASCII字符集，使用7位表示一个字符，共128字符。ASCII的扩展字符集使用8位表示一个字符，共256字符，方便支持欧洲常用字符。是一个系统支持的所以字符的集合，包括各国家文字、标点符号、图形符号、数字等</li></ul><p>GBXXX字符集：</p><ul><li>GB2312：简体中文码表。一个小于127的字符的意义与原来相同，但两个大于127的字符连在一起时，就表示一个汉字，这样大约可以组合了包含7000多个简体汉字，此外数字字符、罗马希腊的字母、日文的假名等都编进去了，连在ASCII里面本来就有的数字、标点、字母都统统重新编了两个字节长的编码，这就是常说的”全角”字符，而原来在127号以下的那些就叫”半角”字符了</li><li><strong>GBK</strong>：最常用的中文码表，是在GB2312标准基础上的扩展规范，使用了双字节编码方案，共收录了21003个汉字，完全兼容GB2312标准，同时支持繁体汉字以及日韩汉字等</li><li>GB18030：最新的中文码表。收录汉字70244个，采用多字节编码，每个字可以由1个、2个或4个字节组成。支持中国国内少数民族的文字，同时支持繁体汉字以及日韩汉字等</li></ul><p>Unicode字符集：</p><ul><li><p>为表达任意语言的任意字符而设计，是业界的一种标准，也称为统一码、标准万国码。它最多使用4个字节的数字来表达每个字母、符号，或者文字。有三种编码方案，UTF-8、UTF-16和UTF32.最为常用的是UTF-8编码</p></li><li><p><strong>UTF-8</strong>编码：可以用来表示Unicode标准中任意字符，它是电子邮件、网页以及其他存储或传送文字的应用中，优先采用的编码。互联网工程工作小组(IETF)要求所有互联网协议都必须支持UTF-8编码。它使用一至四个字节为每个字符编码</p><p>编码规则：</p><p>128个US-ASCII字符，只需一个字节编码</p><p>拉丁文等字符，需要两个字节编码</p><p>大部分常用字(含中文)，使用三个字节编码</p><p>其他极少使用的Unicode辅助字符，使用四个字节编码</p></li></ul><p><strong>小结：采用何种规则编码，就要采用对应规则解码，否则就会出现乱码</strong></p><h4 id="字符串中的编码解码问题"><a href="#字符串中的编码解码问题" class="headerlink" title="字符串中的编码解码问题"></a>字符串中的编码解码问题</h4><p>编码：</p><ul><li>byte[] getBytes()：使用平台的默认字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li><li>byte[] getBytes(String charsetName)：使用指定的字符集将该String编码为一系列字节，将结果存储到新的字节数组中</li></ul><p>解码：</p><ul><li>String(byte[] bytes)：通过使用平台的默认字符集解码指定的字节数组来构造新的String</li><li>String(byte[] bytes,String charsetName)：通过指定的字符集解码指定的字节数组来构造新的String</li></ul><h4 id="字符流中的编码解码问题"><a href="#字符流中的编码解码问题" class="headerlink" title="字符流中的编码解码问题"></a>字符流中的编码解码问题</h4><p>字符流抽象基类</p><ul><li>Reader：字符输入流的抽象类</li><li>Writer：字符输出流的抽象类</li></ul><p>字符流中和编码解码问题相关的两个类：</p><ul><li>InputStreamReader<ul><li>InputStreamReader(InputStream in)：创建一个使用默认字符集的InputStreamReader</li><li>InputStreamReader(InputStream in,String charsetName)：创建一个使用命名字符集的InputStreamReader</li></ul></li><li>OutputStreamWriter<ul><li>OutputStreamWriter(OutputStream out)：创建一个使用默认字符集编码的OutputStreamWriter</li><li>OutputStreamWriter(OutputStream out,String charsetName)：创建一个使用命名字符集的OutputStreamWriter</li></ul></li></ul><h4 id="字符流写数据的5种方式"><a href="#字符流写数据的5种方式" class="headerlink" title="字符流写数据的5种方式"></a>字符流写数据的5种方式</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写一个字符</td></tr><tr><td>void write(char[] cbuf)</td><td>写入一个字符数组</td></tr><tr><td>void write(char[] cbuf,int off,int len)</td><td>写入字符数组的一部分</td></tr><tr><td>void write(String str)</td><td>写一个字符串</td></tr><tr><td>void write(String str,int off,int len)</td><td>写一个字符串的一部分</td></tr></tbody></table><blockquote><p><strong>每次写入如果不想释放资源那么就要使用 void flush()：刷新流方法，void close()方法自带刷新</strong></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IOStream.IOStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WriteDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//InputStreamReader(InputStream in)：创建一个使用默认字符集的InputStreamReader</span></span><br><span class="line">        OutputStreamWriter isr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Java_Study\\fos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(int c)</span></span><br><span class="line">        isr.write(<span class="number">97</span>);</span><br><span class="line">        isr.flush();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(char[] cbuf)</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>, <span class="number">100</span>&#125;;</span><br><span class="line">        isr.write(chs);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(char[] cbuf,int off,int len)</span></span><br><span class="line">        isr.write(chs, <span class="number">0</span>, chs.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str)</span></span><br><span class="line">        String s = <span class="string">&quot;你好&quot;</span>;</span><br><span class="line">        isr.write(s);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//void write(String str,int off,int len)</span></span><br><span class="line">        isr.write(s, <span class="number">0</span>, s.length());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符流读数据的2种方式"><a href="#字符流读数据的2种方式" class="headerlink" title="字符流读数据的2种方式"></a>字符流读数据的2种方式</h4><table><thead><tr><th>方法名</th><th>说明</th></tr></thead><tbody><tr><td>int read()</td><td>一次读一个字符数据</td></tr><tr><td>int read(char[] cbuf)</td><td>一次读一个字符数组数据</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IOStream.IOStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReaderDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;Java_Study\\fos.txt&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read()</span></span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read()) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print((<span class="keyword">char</span>) len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//int read(char[] cbuf)</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len1;</span><br><span class="line">        <span class="keyword">while</span> ((len1 = isr.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(chs, <span class="number">0</span>, len1));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：复制Java文件"><a href="#案例：复制Java文件" class="headerlink" title="案例：复制Java文件"></a>案例：复制Java文件</h4><p>需求：把模块目录下的”Hello World.java” 复制到模块目录下的”Copy.java”</p><p>思路：</p><p>① 根据数据源创建字符输入流对象</p><p>② 根据目的地创建字符输出流对象</p><p>③ 读写数据，复制文件</p><p>④ 释放资源</p><p><strong>代码在Case.CopyJava里面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Case.CopyJava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        InputStreamReader isr = <span class="keyword">new</span> InputStreamReader(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;Java_Study\\src\\HelloWorld.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        OutputStreamWriter osr = <span class="keyword">new</span> OutputStreamWriter(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Java_Study\\Copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = isr.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            osr.write(chs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        osr.close();</span><br><span class="line">        isr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：复制Java文件-改进版"><a href="#案例：复制Java文件-改进版" class="headerlink" title="案例：复制Java文件(改进版)"></a>案例：复制Java文件(改进版)</h4><p>需求：把模块目录下的”Hello World.java” 复制到模块目录下的”Copy.java”</p><p>分析：</p><p>① 转换流的名字比较长，而我们常见的操作的都是按照默认本地编码来实现的，所以，为了简化书写，转换流提供了对应的子类</p><p>② FileReader：用于读取字符文件的便捷类</p><p>​    FileReader(String fileName)</p><p>③ FileWriter：用于写入字符文件的便捷类</p><p>​    FileWriter(String fileName)</p><p>④ 数据源和目的地的分析</p><p>​    数据源：Java_Study\\src\\Hello World.java — 读数据 — Reader — InputStreamReader — FileReader</p><p>​    目的地：Java_Study\\copy.java — 写数据 —Writer — OutputStreamWriter — FileWriter</p><p>思路：</p><p>① 根据数据源创建字符输入流对象</p><p>② 根据目的地创建字符输出流对象</p><p>③ 读写数据，复制文件</p><p>④ 释放资源</p><p><strong>代码在Case.CopyJava.CopyDemo2里面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Case.CopyJava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符输入流对象</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">&quot;Java_Study\\src\\HelloWorld.java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据目的地创建字符输出流对象</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">&quot;Java_Study\\copy.java&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = fr.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            fw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h4><p>字符缓冲流：</p><ul><li>BufferedWriter：将文本写入字符输出流，缓冲字符，以提供单个字符，数组和字符串的高效写入，可以指定缓冲区大小，或者可以接收默认大小。默认值足够大，可以用于大多数用途</li><li>BufferedReader：从字符输入流读取文本，缓冲字符，以提供字符，数组和行的高效读取，可以指定缓冲区大小，或者可以使用默认大小。默认值足够大，可以用于大多数用途</li></ul><p>构造方法：</p><ul><li>BufferedWriter(Writer out)</li><li>BufferedReader(Reader in)</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> IOStream.BufferStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BufferDemo2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//BufferedWriter(Writer out)</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;Java_Study\\bw.txt&quot;</span>));</span><br><span class="line">        bw.write(<span class="string">&quot;Hello\n&quot;</span>);</span><br><span class="line">        bw.write(<span class="string">&quot;World\n&quot;</span>);</span><br><span class="line">        bw.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//BufferedReader(Reader in)</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;Java_Study\\bw.txt&quot;</span>));</span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = br.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            System.out.print(<span class="keyword">new</span> String(chs, <span class="number">0</span>, len));</span><br><span class="line">        &#125;</span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="案例：复制Java文件-字符缓冲流改进版"><a href="#案例：复制Java文件-字符缓冲流改进版" class="headerlink" title="案例：复制Java文件(字符缓冲流改进版)"></a>案例：复制Java文件(字符缓冲流改进版)</h4><p>需求：把模块目录下的”Hello World.java” 复制到模块目录下的”Copy.java”</p><p>思路：</p><p>① 根据数据源创建字符缓冲输入流对象</p><p>② 根据目的地创建字符缓冲输出流对象</p><p>③ 读写文件，复制文件</p><p>④ 释放资源</p><p><strong>代码在case.CopyJava.CopyDemo3里面</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Case.CopyJava;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyDemo3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//根据数据源创建字符缓冲输入流对象</span></span><br><span class="line">        BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;Java_Study\\src\\HelloWorld.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据目的地创建字符缓冲输出流对象</span></span><br><span class="line">        BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;Java_Study\\copy.java&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//读写数据，复制文件</span></span><br><span class="line">        <span class="keyword">char</span>[] chs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = br.read(chs)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            bw.write(chs, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        bw.close();</span><br><span class="line">        br.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="字符缓冲流特有功能"><a href="#字符缓冲流特有功能" class="headerlink" title="字符缓冲流特有功能"></a>字符缓冲流特有功能</h4><p>BufferedWriter：</p><ul><li>void newLine()：写一行行分隔符，行分隔符字符串由系统属性定义</li></ul><p>BufferedReader：</p><ul><li>public String readLine()：读一行文字。结果包含行的内容的字符串，不包括任何行终止字符，如果流的结尾已经到达，则为null</li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>music</title>
      <link href="/2022/01/22/music/"/>
      <url>/2022/01/22/music/</url>
      
        <content type="html"><![CDATA[<!-- 我的网易云音乐网页 --><!-- 第一种导入方式 --><!-- require APlayer --><link rel="stylesheet" href="/css/Aplayer.min.css"><script src="/js/Aplayer.min.js"></script><!-- require MetingJS --><script src="/js/Meting.min.js"></script><p><meting-js    server="netease"    type="playlist"    id="60198"><br></meting-js></p><!-- 第二种导入方式 --><div class="aplayer" data-id="7192915284" data-server="netease" data-type="playlist" data-mutex="true" data-preload="auto" data-theme="#3F51B5"></div><!-- 左下角播放器 --><div class="aplayer no-destroy" data-id="7192915284" data-server="netease" data-type="playlist" data-fixed="true" data-mini="true" data-listFolded="false" data-order="random" data-preload="none" data-autoplay="true" muted></div>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Music </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo搭建个人博客</title>
      <link href="/2022/01/21/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/01/21/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="Hexo搭建个人博客"><a href="#Hexo搭建个人博客" class="headerlink" title="Hexo搭建个人博客"></a>Hexo搭建个人博客</h1><h2 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h2><ul><li>nodejs</li><li>git</li></ul><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><ul><li><p>设置淘宝源</p></li><li><p>npm config set registry <a href="http://registry.npm.taobao.org/">http://registry.npm.taobao.org</a></p></li><li><p>安装hexo</p></li><li><p>npm install hexo-cli -g</p></li></ul><h2 id="设置你的博客"><a href="#设置你的博客" class="headerlink" title="设置你的博客"></a>设置你的博客</h2><ul><li><p>生成你的博客</p></li><li><p>hexo init</p></li><li><p>cd blog</p></li></ul><h2 id="启动服务器"><a href="#启动服务器" class="headerlink" title="启动服务器"></a>启动服务器</h2><ul><li>hexo server 或者 hexo s</li></ul><h2 id="创建新帖子"><a href="#创建新帖子" class="headerlink" title="创建新帖子"></a>创建新帖子</h2><ul><li>hexo new “Hello Hexo”</li></ul><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><ul><li>hexo generate</li><li>hexo g(每次写文章都要生成)</li></ul><h2 id="部署blog"><a href="#部署blog" class="headerlink" title="部署blog"></a>部署blog</h2><ul><li>修改配置文件_config.yml(在你的安装环境的根目录下)</li><li>安装部署工具</li><li>npm install hexo-deployer-git –save</li><li>生成静态文件</li><li>hexo g</li><li>部署</li><li>hexo d</li></ul><h2 id="文件存放"><a href="#文件存放" class="headerlink" title="文件存放"></a>文件存放</h2><p>文章存放在/source/_post/里面</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220120230317135.png" alt="image-20220120230317135"></p><p><strong>_config</strong>这个文件很重要很重要很重要，这个是<strong>hexo框架</strong>的配置文件</p><p><strong>_config.landscape</strong>这个是landscape<strong>主题</strong>的配置文件</p><p><strong>config</strong>文件是<strong>缩进</strong>是<strong>两个空格</strong></p><p><strong>themes</strong>这个文件用来存放主题</p><p><strong>source</strong>是源文件，编写的文章存放在**/source/_post/**目录下面</p><p><strong>public</strong>是hexo生成的静态文件，里面的文件用于上传</p><p>文章记得加description</p><h2 id="hexo命令"><a href="#hexo命令" class="headerlink" title="hexo命令"></a>hexo命令</h2><ul><li>新建文章(文章存在/source/_post文件夹下)</li><li>hexo n +”文章名字”</li></ul><h2 id="config-butterfly-yml"><a href="#config-butterfly-yml" class="headerlink" title="_config.butterfly.yml"></a>_config.butterfly.yml</h2><h3 id="menu"><a href="#menu" class="headerlink" title="menu:"></a>menu:</h3><p>里面修改导航菜单</p><ul><li><p><strong>/categories/ || fas fa-folder-open</strong>  </p></li><li><p>/……/代表文件夹存放的路径(一般都是在/source下)，|| …… 这个是图标库</p></li></ul><h2 id="文章顶部语句"><a href="#文章顶部语句" class="headerlink" title="文章顶部语句"></a>文章顶部语句</h2><blockquote><p>title：标签</p><p>date：时间</p><p>description：简介/描述</p><p>cover：文章封面</p><p>top_img：文章的头顶图片</p><p>sticky: 1 置顶优先级，数字越大优先级越高</p><p>copyright_author：作者名</p><p>copyright_author_href：作者链接</p><p>copyright_url：文章链接</p><p>copyright_info：版权声明</p><p>toc_number：是否展示章节数</p><p>toc：是否展示章节栏</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫</title>
      <link href="/2022/01/21/%E7%88%AC%E8%99%AB/"/>
      <url>/2022/01/21/%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h1><h2 id="爬虫第一课"><a href="#爬虫第一课" class="headerlink" title="爬虫第一课"></a>爬虫第一课</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、爬取搜狗首页的数据</span></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> response</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 第一步指定url</span></span><br><span class="line">    url = <span class="string">&#x27;https://www.sogou.com/&#x27;</span></span><br><span class="line">    <span class="comment"># 第二步发起请求.get方法会返回一个响应对象</span></span><br><span class="line">    requests.get(url=url)</span><br><span class="line">    <span class="comment"># 第三步获取相应数据.text返回的是字符串形式的响应数据</span></span><br><span class="line">    page_text = requests.text</span><br><span class="line">    <span class="built_in">print</span>(page_text)</span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./sogou.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(<span class="built_in">str</span>(page_text))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;爬取数据结束！！！&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="爬虫第二课"><a href="#爬虫第二课" class="headerlink" title="爬虫第二课"></a>爬虫第二课</h2><p>UA伪装：让爬虫对应的请求载体身份标识伪装成某一款浏览器</p><p>User-Agent:</p><p>headers = {‘User-Agent’:…….}</p><h2 id="爬虫第三课"><a href="#爬虫第三课" class="headerlink" title="爬虫第三课"></a>爬虫第三课</h2><p>chrome浏览器的F12开发者工具的Network里面的XHR对应的是“阿贾克斯”请求数据包</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20220102212157387.png" alt="image-20220102212157387"></p><p>“阿贾克斯”请求：页面变了但是http地址没变。</p><h3 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h3><h4 id="1、爬取百度翻译的数据"><a href="#1、爬取百度翻译的数据" class="headerlink" title="1、爬取百度翻译的数据"></a>1、爬取百度翻译的数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取百度翻译的数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 1、指定url</span></span><br><span class="line">    post_url = <span class="string">&#x27;https://fanyi.baidu.com/sug&#x27;</span></span><br><span class="line">    <span class="comment"># 2、进行UA伪装</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 3、post请求参数处理（同get请求一致）</span></span><br><span class="line">    word = <span class="built_in">input</span>(<span class="string">&#x27;请输入想查询的单词:&#x27;</span>)</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;kw&#x27;</span>: word</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 4、请求发送</span></span><br><span class="line">    response = requests.post(url=post_url, data=data, headers=headers)</span><br><span class="line">    <span class="comment"># 5、获取响应数据：json()方法返回的是obj(如果确认响应数据是json类型的，才可以使用json())</span></span><br><span class="line">    dic_obj = response.json()</span><br><span class="line">    <span class="comment"># print(dic_obj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 6、持久化存储</span></span><br><span class="line">    fileName = word + <span class="string">&#x27;.json&#x27;</span></span><br><span class="line">    fp = <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(dic_obj, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;完成!&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="2、豆瓣电影数据获取"><a href="#2、豆瓣电影数据获取" class="headerlink" title="2、豆瓣电影数据获取"></a>2、豆瓣电影数据获取</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 豆瓣电影爬取</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://movie.douban.com/j/chart/top_list&quot;</span></span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;24&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;interval_id&#x27;</span>: <span class="string">&#x27;100:90&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;action&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;start&#x27;</span>: <span class="string">&#x27;1&#x27;</span>, <span class="comment"># 从库中的第几部电影去取</span></span><br><span class="line">        <span class="string">&#x27;limit&#x27;</span>: <span class="string">&#x27;20&#x27;</span>, <span class="comment"># 一次取出多少个</span></span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = requests.get(url=url, params=param, headers=header)</span><br><span class="line"></span><br><span class="line">    list_data = response.json()</span><br><span class="line"></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./douban.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    json.dump(list_data, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h4 id="3、爬虫作业：爬取KFC餐厅response信息"><a href="#3、爬虫作业：爬取KFC餐厅response信息" class="headerlink" title="3、爬虫作业：爬取KFC餐厅response信息"></a>3、爬虫作业：爬取KFC餐厅response信息</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取KFC餐厅信息数据</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    url = <span class="string">&#x27;http://www.kfc.com.cn/kfccda/ashx/GetStoreList.ashx?op=keyword&#x27;</span></span><br><span class="line">    keyword = <span class="built_in">input</span>(<span class="string">&#x27;请输入想要查询的城市:&#x27;</span>)</span><br><span class="line">    param = &#123;</span><br><span class="line">        <span class="string">&#x27;cname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;keyword&#x27;</span>: keyword,</span><br><span class="line">        <span class="string">&#x27;pageIndex&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, params=param, headers=headers).text</span><br><span class="line">    fileName = keyword+ <span class="string">&#x27;.text&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(fileName, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(<span class="built_in">str</span>(response))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="4、国家药品监督管理局"><a href="#4、国家药品监督管理局" class="headerlink" title="4、国家药品监督管理局"></a>4、国家药品监督管理局</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 爬取国家药品监督管理局的数据</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># UA封装：请求头</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># url获取</span></span><br><span class="line">    url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsList&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 参数的封装</span></span><br><span class="line">    i = <span class="built_in">int</span>(<span class="built_in">input</span>(<span class="string">&#x27;请输入想查到的页数：&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, i+<span class="number">1</span>):</span><br><span class="line">        page = <span class="built_in">int</span>(page)</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;on&#x27;</span>: <span class="string">&#x27;true&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;page&#x27;</span>: page,</span><br><span class="line">            <span class="string">&#x27;pageSize&#x27;</span>: <span class="string">&#x27;15&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;productName&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;conditionType&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applyname&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;applysn&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 对id数据进行处理</span></span><br><span class="line">        id_list = []  <span class="comment"># 用来存储每个企业所对应的id</span></span><br><span class="line">        json_ids = requests.post(url=url, data=data, headers=headers).json()</span><br><span class="line">        <span class="keyword">for</span> dic <span class="keyword">in</span> json_ids[<span class="string">&#x27;list&#x27;</span>]:</span><br><span class="line">            id_list.append(dic[<span class="string">&#x27;ID&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    all_Data_list = [] <span class="comment"># 新建一个列表用来存储</span></span><br><span class="line">    post_url = <span class="string">&#x27;http://scxk.nmpa.gov.cn:81/xk/itownet/portalAction.do?method=getXkzsById&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">id</span> <span class="keyword">in</span> id_list:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: <span class="built_in">id</span></span><br><span class="line">        &#125;</span><br><span class="line">        detail_json = requests.post(url=url, headers=headers, data=data).json()</span><br><span class="line">        all_Data_list.append(detail_json)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 持久化存储</span></span><br><span class="line">    fp = <span class="built_in">open</span>(<span class="string">&#x27;./国家药品监督管理局数据.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    json.dump(all_Data_list, fp=fp, ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;结束&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h1><h4 id="聚焦爬虫：爬取页面中指定的页面内容。"><a href="#聚焦爬虫：爬取页面中指定的页面内容。" class="headerlink" title="聚焦爬虫：爬取页面中指定的页面内容。"></a>聚焦爬虫：爬取页面中指定的页面内容。</h4><p>​        编码流程：</p><p>​                1、指定url</p><p>​                2、发起请求</p><p>​                3、获取响应数据</p><p>​                4、持久化存储</p><h4 id="数据解析分类："><a href="#数据解析分类：" class="headerlink" title="数据解析分类："></a>数据解析分类：</h4><p>​        re正则表达式</p><p>​        bs4 (beautifulsoup)</p><p>​        xpath    最常用最便捷高效的一种解析方式,通用性最强</p><p>​        xpath &gt; bs4 &gt; re正则表达式</p><h4 id="数据分析原理概述："><a href="#数据分析原理概述：" class="headerlink" title="数据分析原理概述："></a>数据分析原理概述：</h4><p>​        解析的局部的文本内容都会在标签之间或者标签对应的属性中进行存储</p><p>​        1、进行指定标签的定位</p><p>​        2、标签或者标签对应的属性中存储的数据值进行提取（解析）</p><h3 id="正则表达式："><a href="#正则表达式：" class="headerlink" title="正则表达式："></a>正则表达式：</h3><p>Regular Expression，正则表达式，一种使用表达式的方式对字符串进行匹配的语法规则。</p><p>我们抓取到的网页源代码本质上就是一个超长的字符串，想从里面提取内容。用正则再适合不过了。</p><p>正则的优点：速度快，效率高，准确性高</p><p>正则的缺点：新手上手难度有点高</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211124214938324.png" alt="image-20211124214938324"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>.   匹配除换行符以外的任意字符， 未来在python的re模块中是一个坑</span><br><span class="line"><span class="number">2</span>\w   匹配字母或数字或下划线</span><br><span class="line"><span class="number">3</span>\s   匹配任意的空白符</span><br><span class="line"><span class="number">4</span>\d   匹配数字</span><br><span class="line"><span class="number">5</span>\n   匹配一个换行符</span><br><span class="line"><span class="number">6</span>\t   匹配一个制表符</span><br><span class="line"><span class="number">7</span>^   匹配字符串的开始</span><br><span class="line"><span class="number">8</span>$   匹配字符串的结尾</span><br><span class="line"><span class="number">9</span>\W   匹配 非 字母或数字或下划线</span><br><span class="line"><span class="number">10</span>\D   匹配 非 数字</span><br><span class="line"><span class="number">11</span>\S   匹配 非 空白符</span><br><span class="line"><span class="number">12</span>a|b   匹配字符a或字符b</span><br><span class="line"><span class="number">13</span>()   匹配括号内的表达式，也表示一个组</span><br><span class="line"><span class="number">14</span>[..]   匹配字符组中的字符</span><br><span class="line"><span class="number">15</span>[^..]  匹配除了字符组中字符的所有字符</span><br><span class="line"></span><br><span class="line">量词：</span><br><span class="line"><span class="number">1</span>*   重复零次或更多次</span><br><span class="line"><span class="number">2</span>+   重复一次或更多次</span><br><span class="line"><span class="number">3</span>?   重复零次或一次</span><br><span class="line"><span class="number">4</span>&#123;n&#125;   重复n次</span><br><span class="line"><span class="number">5</span>&#123;n,&#125;   重复n次或更多次</span><br><span class="line"><span class="number">6</span>&#123;n,m&#125;  重复n次到m次</span><br><span class="line"></span><br><span class="line">贪婪匹配和惰性匹配：</span><br><span class="line"><span class="number">1</span>.*   贪婪匹配，尽可能多的去匹配结果（匹配到最远的结尾）</span><br><span class="line"><span class="number">2</span>.*?    惰性匹配，尽可能少的去匹配结果（匹配到最近的结尾结束，然后再进行下一次检测直到结束）</span><br></pre></td></tr></table></figure><h3 id="re模块："><a href="#re模块：" class="headerlink" title="re模块："></a>re模块：</h3><h5 id="re-findall："><a href="#re-findall：" class="headerlink" title="re.findall："></a>re.findall：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">result = re.findall(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;我是一个abcdefag&#x27;</span>)</span><br><span class="line"><span class="comment"># .findall(匹配全部字串，返回全部内容，类型为数组)</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">result = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;我今年18岁，我存款有2000元&#x27;</span>)</span><br><span class="line"><span class="comment"># \d\w之类的一般要在&#x27;&#x27;前加 r</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h5 id="re-finditer：-重点，用的最多"><a href="#re-finditer：-重点，用的最多" class="headerlink" title="re.finditer：(重点，用的最多)"></a>re.finditer：(重点，用的最多)</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">result = re.finditer(<span class="string">r&#x27;\d+&#x27;</span>, <span class="string">&#x27;我今年18岁，我存款有2000元&#x27;</span>)</span><br><span class="line"><span class="comment"># .finditer(返回类型是迭代器)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:<span class="comment"># 从迭代器中拿到内容</span></span><br><span class="line">    <span class="built_in">print</span>(item.group())<span class="comment"># 从匹配的结果中拿到数据</span></span><br><span class="line">    <span class="comment"># .group() 拿到的数据是从re.Match object中转换的</span></span><br></pre></td></tr></table></figure><h5 id="re-search："><a href="#re-search：" class="headerlink" title="re.search："></a>re.search：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">result = re.search(<span class="string">r&#x27;\d&#x27;</span>, <span class="string">&#x27;我叫周杰伦，今年32岁，我的班级是5年4班&#x27;</span>)</span><br><span class="line"><span class="comment"># .search(匹配只会返回第一次匹配到的内容)</span></span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br></pre></td></tr></table></figure><h5 id="re-match："><a href="#re-match：" class="headerlink" title="re.match："></a>re.match：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">result = re.match(<span class="string">r&#x27;\d&#x27;</span>, <span class="string">&#x27;我叫周杰伦，今年32岁，我的班级是5年4班&#x27;</span>)</span><br><span class="line"><span class="comment"># .match(在匹配的时候，是从字符串的开头进行匹配的，类似在正则前面加上了^)</span></span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><h5 id="预加载："><a href="#预加载：" class="headerlink" title="预加载："></a>预加载：</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 预加载，提前把正则对象加载完毕</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)</span><br><span class="line">result = obj.findall(<span class="string">&#x27;xxxxxxxxxxxxxxxxx&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;西游记&#x27;&gt;&lt;span id=&#x27;10010&#x27;&gt;中国联通&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div class=&#x27;西游记&#x27;&gt;&lt;span id=&#x27;10086&#x27;&gt;中国移动&lt;/span&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">obj = re.<span class="built_in">compile</span>(<span class="string">r&#x27;&lt;span id= &#x27;</span>(?P&lt;<span class="built_in">id</span>&gt;\d+)<span class="string">&#x27;&gt; (?P&lt;name&gt;.*?)&lt;/span&gt;&#x27;</span> )</span><br><span class="line"><span class="comment"># ?P&lt;xxx&gt; 把数据存入到XXX里面</span></span><br><span class="line">result = obj.finditer(s)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">id</span> = item.group(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">    name = item.group(<span class="string">&#x27;name&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">id</span>)</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br></pre></td></tr></table></figure><h3 id="HTML基础语法"><a href="#HTML基础语法" class="headerlink" title="HTML基础语法"></a>HTML基础语法</h3><p>1、&lt;标签名 属性=”值”&gt;被标记的内容&lt;/标签名&gt;</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211125113015109.png" alt="image-20211125113015109"></p><p>2、&lt;标签名 属性=”值” /&gt;</p><p><img src="https://gitee.com/polaris_tyh/pic/raw/master/img/image-20211125113208415.png" alt="image-20211125113208415"></p><h3 id="CSS基础语法"><a href="#CSS基础语法" class="headerlink" title="CSS基础语法"></a>CSS基础语法</h3><h4 id="1、css语法规则："><a href="#1、css语法规则：" class="headerlink" title="1、css语法规则："></a>1、css语法规则：</h4><p>​    1、通过style属性来编写样式</p><p>​    2、通过style标签，然后使用选择器的形式来编写样式</p><p>​    3、在css文件中编写样式，通过link引入该文件</p><h4 id="2、css选择器-重点"><a href="#2、css选择器-重点" class="headerlink" title="2、css选择器(重点)"></a>2、css选择器(重点)</h4><p>​    1、id选择器            #</p><p>​    2、标签选择器        标签</p><p>​    3、类选择器            .</p><p>​    4、选择器分组        ,</p><p>​    5、后代选择器        空格</p><p>​    6、子选择器            &gt;</p><p>​    7、相邻选择器        +</p><p>​    8、属性选择器        [属性=值]</p><h3 id="bs4学习"><a href="#bs4学习" class="headerlink" title="bs4学习"></a>bs4学习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href=&#x27;zhangwuji.com&#x27;&gt;张无忌&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li id=&#x27;abc&#x27;&gt;&lt;a href=&#x27;zhouxingchi.com&#x27;&gt;周星驰&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href=&#x27;zhubajie.com&#x27;&gt;猪八戒&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">    &lt;li&gt;&lt;a href=&#x27;wuzetian.com&#x27;&gt;武则天&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">&lt;ul&gt;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1、初始化beautifulSoup对象</span></span><br><span class="line">page = BeautifulSoup(html, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># page.find(&#x27;标签名&#x27;, attrs=&#123;&#x27;属性&#x27;: &#x27;值&#x27;&#125;)   查找某个元素,只会找到一个结果</span></span><br><span class="line"><span class="comment"># page.find_all(&#x27;标签名&#x27;, attrs=&#123;&#x27;属性&#x27;: &#x27;值&#x27;&#125;)   找到一堆结果</span></span><br><span class="line"></span><br><span class="line">li_list = page.find_all(<span class="string">&#x27;li&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(a.text)   # 拿a标签里面的文本</span></span><br><span class="line"><span class="comment"># print(a.get(&#x27;href&#x27;))    # 拿属性.get(&#x27;属性名&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用一个循环把文本和属性遍历出来</span></span><br><span class="line"><span class="keyword">for</span> li <span class="keyword">in</span> li_list:</span><br><span class="line">    a = li.find(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    a_text = a.text</span><br><span class="line">    href = a.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(a_text, href)</span><br></pre></td></tr></table></figure><h4 id="bs4实战"><a href="#bs4实战" class="headerlink" title="bs4实战"></a>bs4实战</h4><h5 id="旧版新地网页获取数据"><a href="#旧版新地网页获取数据" class="headerlink" title="旧版新地网页获取数据"></a>旧版新地网页获取数据</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="comment"># 提取url</span></span><br><span class="line">url = <span class="string">&#x27;https://www.construdip.com/marketanalysis/0/list/1.shtml&#x27;</span></span><br><span class="line"></span><br><span class="line">responses = requests.get(url)</span><br><span class="line"><span class="comment"># 初始化BS4对象</span></span><br><span class="line">page = BeautifulSoup(responses.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开一个文档</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;./旧版新菜地.text&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从url里面的网页源代码提取 &#x27;table&#x27; 标签筛选出属性是 &#x27;class=hq_table&#x27;的标签内容</span></span><br><span class="line">page_table = page.find(<span class="string">&#x27;table&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;hq_table&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到储存到page_table里面的 &#x27;tr&#x27;标签</span></span><br><span class="line">page_tr = page_table.find_all(<span class="string">&#x27;tr&#x27;</span>)</span><br><span class="line"><span class="comment"># print(page_tr)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行遍历查找</span></span><br><span class="line"><span class="keyword">for</span> trs <span class="keyword">in</span> page_tr:</span><br><span class="line">    page_td = trs.find_all(<span class="string">&#x27;td&#x27;</span>)</span><br><span class="line">    proName = page_td[<span class="number">0</span>].text</span><br><span class="line">    <span class="built_in">min</span> = page_td[<span class="number">1</span>].text</span><br><span class="line">    ave = page_td[<span class="number">2</span>].text</span><br><span class="line">    high = page_td[<span class="number">3</span>].text</span><br><span class="line">    spec = page_td[<span class="number">4</span>].text</span><br><span class="line">    unit = page_td[<span class="number">5</span>].text</span><br><span class="line">    data = page_td[<span class="number">6</span>].text</span><br><span class="line">    <span class="comment"># print(proName, min, ave, high, spec, unit, data)</span></span><br><span class="line">    <span class="comment"># 把提取到的内容写入到f文档里面</span></span><br><span class="line">    f.write(<span class="string">f&#x27;<span class="subst">&#123;proName&#125;</span>, <span class="subst">&#123;<span class="built_in">min</span>&#125;</span>, <span class="subst">&#123;ave&#125;</span>, <span class="subst">&#123;high&#125;</span>, <span class="subst">&#123;spec&#125;</span>, <span class="subst">&#123;unit&#125;</span>, <span class="subst">&#123;data&#125;</span>\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭进程</span></span><br><span class="line">f.close()</span><br><span class="line">responses.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;结束!&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="彼岸桌面壁纸图片爬取"><a href="#彼岸桌面壁纸图片爬取" class="headerlink" title="彼岸桌面壁纸图片爬取"></a>彼岸桌面壁纸图片爬取</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">page_nb = <span class="built_in">input</span>(<span class="string">&#x27;请输入你要爬取的页码:&#x27;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">f&#x27;http://www.netbian.com/index_<span class="subst">&#123;page_nb&#125;</span>.htm&#x27;</span></span><br><span class="line">url2 = <span class="string">&#x27;http://www.netbian.com&#x27;</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">注意:</span></span><br><span class="line"><span class="string">    获取的子页面的url如果开头是/,直接在前面拼接上域名即可</span></span><br><span class="line"><span class="string">    获取的子页面的url如果不是开头,此时需要找到主页面的url,去掉url最后一个/后面的内容,然后拼接上获取的子页面url</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据处理</span></span><br><span class="line">responses = requests.get(url=url,headers=headers)</span><br><span class="line">responses.encoding = <span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">lis = BeautifulSoup(responses.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取网页源代码里的&lt;div&gt;标签</span></span><br><span class="line">div = lis.find_all(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;list&#x27;</span>&#125;)</span><br><span class="line"><span class="comment"># print(div)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行遍历筛选出&lt;a&gt;标签</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> div:</span><br><span class="line">    href = item.find_all(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="comment"># 进行遍历筛选出&lt;a&gt;标签里面的href链接</span></span><br><span class="line">    <span class="keyword">for</span> item2 <span class="keyword">in</span> href:</span><br><span class="line">        sb = item2.get(<span class="string">&#x27;href&#x27;</span>)</span><br><span class="line">        <span class="comment"># 对所有获取的href链接进一步筛选</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(sb) == <span class="number">15</span>:</span><br><span class="line">            <span class="comment"># 拼接获取到的url</span></span><br><span class="line">            url3 = url2+sb</span><br><span class="line">            <span class="comment"># 再一次进行对子页面的数据处理</span></span><br><span class="line">            url3_responses = requests.get(url=url3, headers=headers)</span><br><span class="line">            url3_responses.encoding = <span class="string">&#x27;gbk&#x27;</span></span><br><span class="line">            divs = BeautifulSoup(url3_responses.text, <span class="string">&#x27;html.parser&#x27;</span>)</span><br><span class="line">            <span class="comment"># 获取&lt;div class=&quot;list&quot;&gt;标签</span></span><br><span class="line">            div2 = divs.find(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;pic&#x27;</span>&#125;)</span><br><span class="line">            <span class="comment"># 获取图片链接和图片名字</span></span><br><span class="line">            src = div2.find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&#x27;src&#x27;</span>)</span><br><span class="line">            name = div2.find(<span class="string">&#x27;img&#x27;</span>).get(<span class="string">&#x27;alt&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(name, <span class="string">&#x27; 爬取成功&#x27;</span>)</span><br><span class="line">            <span class="comment"># 对src的url进行数据爬取并进行持久化存储,图片不能用.text表现,只能用.content转换成字节进行保存</span></span><br><span class="line">            img_resp = requests.get(url=src, headers=headers)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;F:/爬虫/图片爬取/<span class="subst">&#123;name&#125;</span>.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:    <span class="comment"># wb是写入字节的</span></span><br><span class="line">                f.write(img_resp.content)   <span class="comment"># .content 是把拿到的内容转换成字节的形式,图片可以显示</span></span><br><span class="line">    <span class="comment"># 关闭文件</span></span><br><span class="line">    f.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;爬取结束!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>.text(返回的是字符串类型的响应数据)        写入为’w’</p><p>.content(返回的是二进制的响应数据)    可用于图片类型        写入为’wb’</p><p>.json()    (返回的是对象类型的响应数据)    可去网页进行json转换        写入为’w’</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">bs4</span><br><span class="line"><span class="bullet">-</span> bs4解析原理</span><br><span class="line"><span class="bullet">    -</span> 实例化一个BeautifulSoup的对象，且将待解析的页面源码数据加载到该对象中</span><br><span class="line"><span class="bullet">    -</span> 调用BeautifulSoup对象中相关方法或者属性进行标签定位和文本数据的提取</span><br><span class="line"><span class="bullet">-</span> 环境安装：</span><br><span class="line"><span class="bullet">    -</span> pip install lxml #解析器</span><br><span class="line"><span class="bullet">    -</span> pip install bs4</span><br><span class="line"><span class="bullet">-</span> BeautifulSoup对象的实例化：</span><br><span class="line"><span class="bullet">    -</span> fp = open(&#x27;./xxxx.html&#x27;, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;)</span><br><span class="line"><span class="bullet">    -</span> BeautifulSoup(fp,&#x27;lxml&#x27;)：用来将本地存储的html文档中的数据进行解析</span><br><span class="line"><span class="bullet">    -</span> BeautifulSoup(page<span class="emphasis">_text，’lxml‘)：用来将互联网上请求到的页面源码数据进行解析</span></span><br><span class="line"><span class="emphasis">- 标签定位：</span></span><br><span class="line"><span class="emphasis">    - soup.tagName：只可以定位到第一次出现的tagName标签</span></span><br><span class="line"><span class="emphasis">    - soup.find(&#x27;tagName&#x27;,attrName=&#x27;value&#x27;):属性定位</span></span><br><span class="line"><span class="emphasis">    - soup.find_</span>all:跟find一样用作属性定位，只不过findAll返回的是列表</span><br><span class="line"><span class="bullet">    -</span> soup.select(&#x27;选择器&#x27;):选择器定位返回的是一个列表</span><br><span class="line"><span class="bullet">        -</span> class类选择器</span><br><span class="line"><span class="bullet">        -</span> id选择器</span><br><span class="line"><span class="bullet">        -</span> 标签选择器</span><br><span class="line"><span class="bullet">        -</span> 层级选择soup.select(&#x27;.xxx &gt; xx &gt; xx&#x27;)[0]</span><br><span class="line"><span class="bullet">            -</span> 大于号:表示一个层级</span><br><span class="line"><span class="bullet">            -</span> 空格：表示多个层级</span><br><span class="line"><span class="bullet">-</span> 取数据</span><br><span class="line"><span class="bullet">    -</span> .text/get<span class="emphasis">_text：返回的是该标签下所有的文本内容</span></span><br><span class="line"><span class="emphasis">    - .string:返回的是该标签直系的文本内容</span></span><br><span class="line"><span class="emphasis">- 取属性：</span></span><br><span class="line"><span class="emphasis">    - .soup.a[&#x27;href&#x27;]<span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;xxxxx&quot;</span>&gt;</span></span>获取A标签的href属性值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-div2 = divs.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&#x27;pic&#x27;</span>)</span><br><span class="line">-div2 = divs.find(<span class="string">&#x27;div&#x27;</span>, attrs=&#123;<span class="string">&#x27;class&#x27;</span>: <span class="string">&#x27;pic&#x27;</span>&#125;)</span><br><span class="line">上面两个代码返回的内容都是一样的</span><br></pre></td></tr></table></figure><h3 id="xpath学习"><a href="#xpath学习" class="headerlink" title="xpath学习"></a>xpath学习</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">xpath解析</span><br><span class="line"><span class="bullet">-</span> 环境安装：</span><br><span class="line"><span class="bullet">    -</span> pip install lxml</span><br><span class="line"><span class="bullet">-</span> 解析原理:html标签是以树状的形式进行展示</span><br><span class="line"><span class="bullet">    -</span> 1.实例化一个etree的对象，且将待解析的页面源码数据加载到该对象中</span><br><span class="line"><span class="bullet">    -</span> 2.调用etree对象的xpath方法结合着不同的xpath表达式实现标签的定位和数据提取</span><br><span class="line"><span class="bullet">-</span> 实例化etree对象</span><br><span class="line"><span class="bullet">    -</span> from lxml import etree</span><br><span class="line"><span class="code">    1.将本地html文档加载到该对象中</span></span><br><span class="line"><span class="code">    - etree.parse(&#x27;filename&#x27;)</span></span><br><span class="line"><span class="code">    2.网站获取的页面数据加载到该对象</span></span><br><span class="line"><span class="code">    - etree.HTML(page_text)</span></span><br><span class="line"><span class="code">    - xpath(&#x27;xpath表达式的字符串&#x27;)</span></span><br><span class="line"><span class="code">- 标签定位：</span></span><br><span class="line"><span class="code">    - 最左侧的/:如果xpath表达式最左侧是以/开头则表示该xpath表达式一定要从根标签开始定位指定标签(忽略)</span></span><br><span class="line"><span class="code">    - 非最左侧的/:表示一个层级</span></span><br><span class="line"><span class="code">    - 非左侧的//:表示多个层级</span></span><br><span class="line"><span class="code">    - 最左侧的//：xpath表达式可以从任意位置进行标签定位</span></span><br><span class="line"><span class="code">    - 取某一个标签: /xxxxx[第几个标签]    /xxxxx[3] 取xxxx标签里的第三个标签</span></span><br><span class="line"><span class="code">    </span></span><br><span class="line"><span class="code">    - 属性定位：tree.xpath(&#x27;//div[@属性名称=&#x27;属性内容&#x27;]&#x27;)</span></span><br><span class="line"><span class="code">      tree.xpath(&#x27;//div[@class=&quot;xxx&quot;]&#x27;)</span></span><br><span class="line"><span class="code">    - 索引定位：tree.xpath(&#x27;//div[@class=&quot;xxx&quot;][3]&#x27;)取&lt;div class=&#x27;xxx&#x27;&gt;下的第3个标签 索引是从[1]开始</span></span><br><span class="line"><span class="code">    - 模糊匹配：</span></span><br><span class="line"><span class="code">        - //div[contains(@class, &quot;ng&quot;)]</span></span><br><span class="line"><span class="code">        - //div[starts-with(@class, &quot;ta&quot;)]</span></span><br><span class="line"><span class="code">- 取文本</span></span><br><span class="line"><span class="code">    - /text():获取的是标签中直系文本内容</span></span><br><span class="line"><span class="code">       tree.xpath(&#x27;//div[@class=&quot;xxx&quot;]/text()&#x27;)</span></span><br><span class="line"><span class="code">    - //text()：获取的是标签下所有的文本内容</span></span><br><span class="line"><span class="code">        tree.xpath(&#x27;//div[@class=&quot;xxx&quot;][3]//text()&#x27;)</span></span><br><span class="line"><span class="code">- 取属性</span></span><br><span class="line"><span class="code">    - /@attrName</span></span><br><span class="line"><span class="code">        tree.xpath(&#x27;//div[@class=&quot;xxx&quot;][3]/@href[数字]&#x27;)</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通用处理中文乱码的解决方案</span><br><span class="line"><span class="code">xxxxx.encode(&#x27;iso-8859-1&#x27;).decode(;gbk)</span></span><br></pre></td></tr></table></figure><h4 id="创建文件夹-os模块"><a href="#创建文件夹-os模块" class="headerlink" title="创建文件夹 os模块"></a>创建文件夹 os模块</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个文件夹</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os .path exists(<span class="string">&#x27;路径地址/文件夹名字&#x27;</span>)  判断这个路径下是否有这个文件夹</span><br><span class="line">os.mkdir(<span class="string">&#x27;路径地址/文件夹名字&#x27;</span>)         如果没有这个该路径下没有这个文件夹就新建一个</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;w/wb&#x27;</span>,encoding=<span class="string">&#x27;xxx&#x27;</span>)xxx是文件保存的地址, <span class="string">&#x27;w:文本/wb:二进制用于图片&#x27;</span>, encoding=编码格式</span><br><span class="line"><span class="comment"># 压缩包也是二进制形式写入</span></span><br><span class="line">fp.write(写入数据)</span><br></pre></td></tr></table></figure><h3 id="验证码识别"><a href="#验证码识别" class="headerlink" title="验证码识别"></a>验证码识别</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">验证码识别</span><br><span class="line"></span><br><span class="line">验证码和爬虫之间的爱恨情仇？</span><br><span class="line">反爬机制：验证码.识别验证码图片中的数据，用于模拟登陆操作。</span><br><span class="line"></span><br><span class="line">识别验证码的操作：</span><br><span class="line"><span class="bullet">    -</span> 人工肉眼识别。（不推荐）</span><br><span class="line"><span class="bullet">    -</span> 第三方自动识别（推荐）</span><br><span class="line"><span class="bullet">        -</span> 云打码：http://www.yundama.com/demo.html</span><br><span class="line">云打码的使用流程：</span><br><span class="line"><span class="bullet">    -</span> 注册：普通和开发者用户</span><br><span class="line"><span class="bullet">    -</span> 登录：</span><br><span class="line"><span class="bullet">        -</span> 普通用户的登录：查询该用户是否还有剩余的题分</span><br><span class="line"><span class="bullet">        -</span> 开发者用户的登录：</span><br><span class="line"><span class="bullet">            -</span> 创建一个软件：我的软件-》添加新软件-》录入软件名称-》提交（软件id和秘钥）</span><br><span class="line"><span class="bullet">            -</span> 下载示例代码：开发文档-》点此下载：云打码接口DLL-》PythonHTTP示例下载</span><br><span class="line">实战：识别古诗文网登录页面中的验证码。</span><br><span class="line">使用打码平台识别验证码的编码流程：</span><br><span class="line"><span class="bullet">    -</span> 将验证码图片进行本地下载</span><br><span class="line"><span class="bullet">    -</span> 调用平台提供的示例代码进行图片数据识别</span><br></pre></td></tr></table></figure><p>判断是否响应成功可以使用:  print(xxxxx.status_code)</p><h3 id="requests模块高级"><a href="#requests模块高级" class="headerlink" title="requests模块高级"></a>requests模块高级</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">模拟登录：</span><br><span class="line"><span class="bullet">    -</span> 爬取基于某些用户的用户信息。</span><br><span class="line">需求：对人人网进行模拟登录。</span><br><span class="line"><span class="bullet">    -</span> 点击登录按钮之后会发起一个post请求</span><br><span class="line"><span class="bullet">    -</span> post请求中会携带登录之前录入的相关的登录信息（用户名，密码，验证码......）</span><br><span class="line"><span class="bullet">    -</span> 验证码：每次请求都会变化</span><br><span class="line"></span><br><span class="line">需求：爬取当前用户的相关的用户信息（个人主页中显示的用户信息）</span><br><span class="line"></span><br><span class="line">http/https协议特性：无状态。</span><br><span class="line">没有请求到对应页面数据的原因：</span><br><span class="line"><span class="code">    发起的第二次基于个人主页页面请求的时候，服务器端并不知道该此请求是基于登录状态下的请求。</span></span><br><span class="line"><span class="code">cookie：用来让服务器端记录客户端的相关状态。</span></span><br><span class="line"><span class="code">    - 手动处理：通过抓包工具获取cookie值，将该值封装到headers中。（不建议）</span></span><br><span class="line"><span class="code">    - 自动处理：</span></span><br><span class="line"><span class="code">        - cookie值的来源是哪里？</span></span><br><span class="line"><span class="code">            - 模拟登录post请求后，由服务器端创建。</span></span><br><span class="line"><span class="code">        session会话对象：</span></span><br><span class="line"><span class="code">            - 作用：</span></span><br><span class="line"><span class="code">                1.可以进行请求的发送。</span></span><br><span class="line"><span class="code">                2.如果请求过程中产生了cookie，则该cookie会被自动存储/携带在该session对象中。</span></span><br><span class="line"><span class="code">        - 创建一个session对象：session = requests.Session()</span></span><br><span class="line"><span class="code">        - 使用session对象进行模拟登录post请求的发送（cookie就会被存储在session中）</span></span><br><span class="line"><span class="code">        - session对象对个人主页对应的get请求进行发送（携带了cookie）</span></span><br><span class="line"><span class="code"></span></span><br><span class="line">代理：破解封IP这种反爬机制。</span><br><span class="line">什么是代理：</span><br><span class="line"><span class="bullet">    -</span> 代理服务器。</span><br><span class="line">代理的作用：</span><br><span class="line"><span class="bullet">    -</span> 突破自身IP访问的限制。</span><br><span class="line"><span class="bullet">    -</span> 隐藏自身真实IP</span><br><span class="line">代理相关的网站：</span><br><span class="line"><span class="bullet">    -</span> 快代理</span><br><span class="line"><span class="bullet">    -</span> 西祠代理</span><br><span class="line"><span class="bullet">    -</span> www.goubanjia.com</span><br><span class="line">代理ip的类型：</span><br><span class="line"><span class="bullet">    -</span> http：应用到http协议对应的url中</span><br><span class="line"><span class="bullet">    -</span> https：应用到https协议对应的url中</span><br><span class="line"></span><br><span class="line">代理ip的匿名度：</span><br><span class="line"><span class="bullet">    -</span> 透明：服务器知道该次请求使用了代理，也知道请求对应的真实ip</span><br><span class="line"><span class="bullet">    -</span> 匿名：知道使用了代理，不知道真实ip</span><br><span class="line"><span class="bullet">    -</span> 高匿：不知道使用了代理，更不知道真实的ip</span><br></pre></td></tr></table></figure><h4 id="爬取人人网当前用户的个人详情页数据"><a href="#爬取人人网当前用户的个人详情页数据" class="headerlink" title="爬取人人网当前用户的个人详情页数据"></a>爬取人人网当前用户的个人详情页数据</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编码流程：</span></span><br><span class="line"><span class="comment"># 1.验证码的识别，获取验证码图片的文字数据</span></span><br><span class="line"><span class="comment"># 2.对post请求进行发送（处理请求参数）</span></span><br><span class="line"><span class="comment"># 3.对响应数据进行持久化存储</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> CodeClass <span class="keyword">import</span> YDMHttp</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 封装识别验证码图片的函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCodeText</span>(<span class="params">imgPath, codeType</span>):</span></span><br><span class="line">    <span class="comment"># 普通用户用户名</span></span><br><span class="line">    username = <span class="string">&#x27;bobo328410948&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 普通用户密码</span></span><br><span class="line">    password = <span class="string">&#x27;bobo328410948&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 软件ＩＤ，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">    appid = <span class="number">6003</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 软件密钥，开发者分成必要参数。登录开发者后台【我的软件】获得！</span></span><br><span class="line">    appkey = <span class="string">&#x27;1f4b564483ae5c907a1d34f8e2f2776c&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 图片文件：即将被识别的验证码图片的路径</span></span><br><span class="line">    filename = imgPath</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证码类型，# 例：1004表示4位字母数字，不同类型收费不同。请准确填写，否则影响识别率。在此查询所有类型 http://www.yundama.com/price.html</span></span><br><span class="line">    codetype = codeType</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 超时时间，秒</span></span><br><span class="line">    timeout = <span class="number">20</span></span><br><span class="line">    result = <span class="literal">None</span></span><br><span class="line">    <span class="comment"># 检查</span></span><br><span class="line">    <span class="keyword">if</span> (username == <span class="string">&#x27;username&#x27;</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;请设置好相关参数再测试&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 初始化</span></span><br><span class="line">        yundama = YDMHttp(username, password, appid, appkey)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 登陆云打码</span></span><br><span class="line">        uid = yundama.login();</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;uid: %s&#x27;</span> % uid)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查询余额</span></span><br><span class="line">        balance = yundama.balance();</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;balance: %s&#x27;</span> % balance)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 开始识别，图片路径，验证码类型ID，超时时间（秒），识别结果</span></span><br><span class="line">        cid, result = yundama.decode(filename, codetype, timeout);</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;cid: %s, result: %s&#x27;</span> % (cid, result))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个session对象</span></span><br><span class="line">session = requests.Session()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.对验证码图片进行捕获和识别</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&#x27;http://www.renren.com/SysHome.do&#x27;</span></span><br><span class="line">page_text = requests.get(url=url, headers=headers).text</span><br><span class="line">tree = etree.HTML(page_text)</span><br><span class="line">code_img_src = tree.xpath(<span class="string">&#x27;//*[@id=&quot;verifyPic_login&quot;]/@src&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">code_img_data = requests.get(url=code_img_src, headers=headers).content</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./code.jpg&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(code_img_data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用云打码提供的示例代码对验证码图片进行识别</span></span><br><span class="line">result = getCodeText(<span class="string">&#x27;code.jpg&#x27;</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># post请求的发送（模拟登录）</span></span><br><span class="line">login_url = <span class="string">&#x27;http://www.renren.com/ajaxLogin/login?1=1&amp;uniqueTimestamp=2019431046983&#x27;</span></span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;email&#x27;</span>: <span class="string">&#x27;www.zhangbowudi@qq.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;icode&#x27;</span>: result,</span><br><span class="line">    <span class="string">&#x27;origURL&#x27;</span>: <span class="string">&#x27;http://www.renren.com/home&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;domain&#x27;</span>: <span class="string">&#x27;renren.com&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;key_id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;captcha_type&#x27;</span>: <span class="string">&#x27;web_login&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;password&#x27;</span>: <span class="string">&#x27;06768edabba49f5f6b762240b311ae5bfa4bcce70627231dd1f08b9c7c6f4375&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;rkey&#x27;</span>: <span class="string">&#x27;3d1f9abdaae1f018a49d38069fe743c8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 使用session进行post请求的发送</span></span><br><span class="line">response = session.post(url=login_url, headers=headers, data=data)</span><br><span class="line"><span class="built_in">print</span>(response.status_code)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取当前用户的个人主页对应的页面数据</span></span><br><span class="line">detail_url = <span class="string">&#x27;http://www.renren.com/289676607/profile&#x27;</span></span><br><span class="line"><span class="comment"># 手动cookie处理</span></span><br><span class="line"><span class="comment"># headers = &#123;</span></span><br><span class="line"><span class="comment">#     &#x27;Cookie&#x27;:&#x27;xxxx&#x27;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># 使用携带cookie的session进行get请求的发送</span></span><br><span class="line">detail_page_text = session.get(url=detail_url, headers=headers).text</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;bobo.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(detail_page_text)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="同步爬虫"><a href="#同步爬虫" class="headerlink" title="同步爬虫"></a>同步爬虫</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    <span class="string">&#x27;http://www.netbian.com/1920x1080/&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://www.netbian.com/1920x1080/index_2.htm&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;http://www.netbian.com/1920x1080/index_3.htm&#x27;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># resp = requests.get(url=urls[0], headers=headers)</span></span><br><span class="line"><span class="comment"># print(resp)</span></span><br><span class="line"><span class="comment"># 定义一个get_content函数进行对url获取的数据进行字节处理</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_content</span>(<span class="params">url</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;正在爬取:&#x27;</span>, url)</span><br><span class="line">    resp = requests.get(url=url, headers=headers)</span><br><span class="line">    <span class="comment"># print(resp.status_code)</span></span><br><span class="line">    <span class="keyword">if</span> resp.status_code == <span class="number">200</span>: <span class="comment"># 判断是否url连通</span></span><br><span class="line">        <span class="keyword">return</span> resp.content     <span class="comment"># 返回的数据为字节形式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个parse_content函数进行对get_content获得的数据字节进行长度识别</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse_content</span>(<span class="params">content</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;响应数据长度为:&#x27;</span>, <span class="built_in">len</span>(content))     <span class="comment"># 查询url字节的长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对urls列表进行遍历</span></span><br><span class="line"><span class="keyword">for</span> url <span class="keyword">in</span> urls:</span><br><span class="line">    content = get_content(url)</span><br><span class="line">    parse_content(content)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">高性能异步爬虫</span><br><span class="line">目的：在爬虫中使用异步实现高性能的数据爬取操作。</span><br><span class="line"></span><br><span class="line">异步爬虫的方式：</span><br><span class="line"><span class="bullet">    -</span> 1.多线程，多进程（不建议）：</span><br><span class="line"><span class="code">        好处：可以为相关阻塞的操作单独开启线程或者进程，阻塞操作就可以异步执行。</span></span><br><span class="line"><span class="code">        弊端：无法无限制的开启多线程或者多进程。</span></span><br><span class="line"><span class="code">    - 2.线程池、进程池（适当的使用）：</span></span><br><span class="line"><span class="code">        好处：我们可以降低系统对进程或者线程创建和销毁的一个频率，从而很好的降低系统的开销。</span></span><br><span class="line"><span class="code">        弊端：池中线程或进程的数量是有上限。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="bullet">    -</span> 3.单线程+异步协程（推荐）：</span><br><span class="line"><span class="code">        event_loop：事件循环，相当于一个无限循环，我们可以把一些函数注册到这个事件循环上，</span></span><br><span class="line"><span class="code">        当满足某些条件的时候，函数就会被循环执行。</span></span><br><span class="line"><span class="code">        </span></span><br><span class="line"><span class="code">        coroutine：协程对象，我们可以将协程对象注册到事件循环中，它会被事件循环调用。</span></span><br><span class="line"><span class="code">        我们可以使用 async 关键字来定义一个方法，这个方法在调用时不会立即被执行，而是返回</span></span><br><span class="line"><span class="code">        一个协程对象。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        task：任务，它是对协程对象的进一步封装，包含了任务的各个状态。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        future：代表将来执行或还没有执行的任务，实际上和 task 没有本质区别。</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        async 定义一个协程.</span></span><br><span class="line"><span class="code"></span></span><br><span class="line"><span class="code">        await 用来挂起阻塞方法的执行。</span></span><br></pre></td></tr></table></figure><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">占位符%s既可以表示字符串str,还可以表示整数int,浮点数float;</span><br><span class="line"></span><br><span class="line">占位符%d既可以表示整数int,还可以表示浮点数float(去除整数部分);</span><br><span class="line"></span><br><span class="line">占位符%f既可以表示浮点数float,还可以表示整数int(默认保留6位小数);</span><br></pre></td></tr></table></figure><p>保存文件如果路径中的 ‘ / ‘ 不换成 ‘ \ ‘ 那么可以在路径  ‘ D:\迅雷下载 ‘ 前面加个  ‘r’  即  r ‘D:\迅雷下载 ‘</p><h3 id="excal数据保存"><a href="#excal数据保存" class="headerlink" title="excal数据保存"></a>excal数据保存</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">workbook = xlwt.Workbook(encoding=&#x27;utf-8&#x27;)  # 创建workbook对象  相当于文件</span></span><br><span class="line"><span class="string">worksheet = workbook.add_sheet(&#x27;sheet1&#x27;)    # 创建工作表,工作表名字为&#x27;sheet1&#x27;</span></span><br><span class="line"><span class="string">worksheet.write(0, 0, &#x27;hello&#x27;)    # 写入数据,第一个代表&#x27;行&#x27;,第二个代表&#x27;列&#x27;,第三个是参数内容</span></span><br><span class="line"><span class="string">workbook.save(&#x27;students.xls&#x27;)   # 保存到本地目录下,文件名为  students.xls</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将99乘法表导入到excal表格中</span></span><br><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 创建workbook对象  相当于文件</span></span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;sheet1&#x27;</span>)  <span class="comment"># 创建工作表,工作表名字为&#x27;sheet1&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, i + <span class="number">1</span>):</span><br><span class="line">        worksheet.write(i, j, <span class="string">&#x27;%d * %d = %d&#x27;</span> % ((j+<span class="number">1</span>), (i+<span class="number">1</span>), (i+<span class="number">1</span>) * (j+<span class="number">1</span>)))</span><br><span class="line">workbook.save(<span class="string">&#x27;students.xls&#x27;</span>)  <span class="comment"># 保存到本地目录下,文件名为  students.xls</span></span><br></pre></td></tr></table></figure><h1 id="Scrapy学习"><a href="#Scrapy学习" class="headerlink" title="Scrapy学习"></a>Scrapy学习</h1><p>scrapy框架</p><ul><li><p>什么是框架?</p><ul><li>就是一个集成了很多功能并且具有很强通用性的一个项目模板.</li></ul></li><li><p>如何学习框架?</p><ul><li>专门学习框架封装的各种功能的详细用法.</li></ul></li><li><p>什么是scrapy?</p><ul><li>爬虫中封装好的一个明星框架.功能:高性能的持久化存储,异步的数据下载,高性能的数据解析,分布式</li></ul></li><li><p>scrapy框架的基础使用</p><ul><li>环境的安装:<ul><li>mac or linux : pip install scrapy </li><li>windows :<ul><li>pip install wheel</li><li>下载twisted, 下载地址:<a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted">http://www.lfd.uci.edu/~gohlke/pythonlibs/#twisted</a></li><li>安装twisted: pip install xxxxxxxx.whl</li><li>pip install pywin32</li><li>pip install scrapy</li></ul></li></ul></li></ul></li></ul><p>​            测试:在终端里录入scrapy指令,没有报错即表示安装成功!</p><ul><li><p>创建一个工程:scrapy startproject xxxxxx(项目名字)</p></li><li><p>创建一个爬虫-&gt;必须要在spiders子目录中:scrapy genspider spiderName(爬虫名字) <a href="http://www.xxxx.com/">www.xxxx.com</a></p></li><li><p>执行工程:scrapy crawl spiderName       -&gt;scrapy crawl spiderName –nolog(不打印日志)</p><ul><li><p>在settings配置文件中加入一条: LOG_LEVEL = ‘ERROR’ 只显示错误信息</p><ul><li><p>修改settings配置文件中的  ROBOTSTXT_OBEY = True    -&gt;  ROBOTSTXT_OBEY = False</p></li><li><p>UA伪装,修改settings配置文件中的 USER_AGENT</p></li></ul></li></ul></li><li><p>scrapy持久化存储</p><ul><li>基于终端指令:<ul><li>要求: 只可以将parse方法的返回值存储到本地的文本文件中</li><li>注意: 持久化存储对应的文本文件的类型只可以为: ‘json’, ‘jsonlines’, ‘jl’, ‘csv’, ‘xml’, ‘marshal’, ‘pickle’</li><li>指令: scrapy crawl fileName -o filePath</li><li>好处: 简介高效便捷</li><li>缺点: 局限性比较强(数据只可以存储到指定后缀的文本文件中)</li></ul></li><li>基于管道: <ul><li>编码解析:<ul><li>数据解析</li><li>在item类中定义相关的属性</li><li>将解析的数据封装存储到item类型的对象</li><li>将item类型的对象提交给管道进行持久化存储的操作</li><li>在管道类的process_item中要将其接受到的item对象中存储的数据进行持久化存储操作</li><li>在配置文件中开启管道</li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/01/20/hello-world/"/>
      <url>/2022/01/20/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hello World </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
